//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer QuadObject
{
    float2  QuadVertices[4] = { -1, -1, 1, -1, -1, 1, 1, 1 };// Offset:    0, size:   56
    float2  QuadTexCoordinates[4] = { 0, 1, 1, 1, 0, 0, 1, 0 };// Offset:   64, size:   56
}

cbuffer cb0
{
    float   g_RenderCaustics;           // Offset:    0, size:    4
    float   g_UseDynamicLOD;            // Offset:    4, size:    4
    float   g_FrustumCullInHS;          // Offset:    8, size:    4
    float   g_DynamicTessFactor;        // Offset:   12, size:    4
    float   g_StaticTessFactor;         // Offset:   16, size:    4
    float   g_TerrainBeingRendered;     // Offset:   20, size:    4
    float   g_HalfSpaceCullSign;        // Offset:   24, size:    4
    float   g_HalfSpaceCullPosition;    // Offset:   28, size:    4
    float   g_SkipCausticsCalculation;  // Offset:   32, size:    4
    int     g_MSSamples;                // Offset:   36, size:    4
    float4x4 g_ModelViewMatrix;         // Offset:   48, size:   64
    float4x4 g_ModelViewProjectionMatrix;// Offset:  112, size:   64
    float4x4 g_ModelViewProjectionMatrixInv;// Offset:  176, size:   64
    float4x4 g_LightModelViewProjectionMatrix;// Offset:  240, size:   64
    float4x4 g_LightModelViewProjectionMatrixInv;// Offset:  304, size:   64
    float3  g_CameraPosition;           // Offset:  368, size:   12
    float3  g_CameraDirection;          // Offset:  384, size:   12
    float3  g_LightPosition;            // Offset:  400, size:   12
    float2  g_WaterBumpTexcoordShift;   // Offset:  416, size:    8
    float2  g_ScreenSizeInv;            // Offset:  424, size:    8
    float   g_MainBufferSizeMultiplier; // Offset:  432, size:    4
    float   g_ZNear;                    // Offset:  436, size:    4
    float   g_ZFar;                     // Offset:  440, size:    4
    float2  g_DiffuseTexcoordScale = { 130 };// Offset:  448, size:    8
    float2  g_RockBumpTexcoordScale = { 10 };// Offset:  456, size:    8
    float   g_RockBumpHeightScale = 3;  // Offset:  464, size:    4
    float2  g_SandBumpTexcoordScale = { 3.5 };// Offset:  468, size:    8
    float   g_SandBumpHeightScale = 0.5;// Offset:  476, size:    4
    float   g_TerrainSpecularIntensity = 0.5;// Offset:  480, size:    4
    float2  g_WaterMicroBumpTexcoordScale = { 225 };// Offset:  484, size:    8
    float2  g_WaterBumpTexcoordScale = { 7 };// Offset:  496, size:    8
    float   g_WaterHeightBumpScale = 1; // Offset:  504, size:    4
    float3  g_WaterDeepColor = { 0.100000001, 0.400000006, 0.699999988 };// Offset:  512, size:   12
    float3  g_WaterScatterColor = { 0.300000012, 0.699999988, 0.600000024 };// Offset:  528, size:   12
    float3  g_WaterSpecularColor = { 1 };// Offset:  544, size:   12
    float   g_WaterSpecularIntensity = 350;// Offset:  556, size:    4
    float   g_WaterSpecularPower = 1000;// Offset:  560, size:    4
    float2  g_WaterColorIntensity = { 0.100000001, 0.200000003 };// Offset:  564, size:    8
    float3  g_AtmosphereBrightColor = { 1, 1.10000002, 1.39999998 };// Offset:  576, size:   12
    float3  g_AtmosphereDarkColor = { 0.600000024, 0.600000024, 0.699999988 };// Offset:  592, size:   12
    float   g_FogDensity = 0.00142857141;// Offset:  604, size:    4
    float2  g_HeightFieldOrigin = { 0 };// Offset:  608, size:    8
    float   g_HeightFieldSize = 512;    // Offset:  616, size:    4
}

//
// 46 local object(s)
//
SamplerState SamplerPointClamp
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState SamplerLinearClamp
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState SamplerLinearWrap
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerAnisotropicWrap
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    MaxAnisotropy = uint(16);
};
SamplerState SamplerCube
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
};
SamplerState SamplerLinearMirror
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(MIRROR /* 2 */);
    AddressV = uint(MIRROR /* 2 */);
};
SamplerState SamplerLinearBorderBlack
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerComparisonState SamplerBackBufferDepth
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    BorderColor = float4(1, 1, 1, 1);
    ComparisonFunc = uint(LESS_EQUAL /* 4 */);
};
SamplerComparisonState SamplerDepthAnisotropic
{
    Filter   = uint(COMPARISON_ANISOTROPIC /* 213 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    ComparisonFunc = uint(LESS /* 2 */);
    BorderColor = float4(1, 1, 1, 1);
    MaxAnisotropy = uint(16);
};
RasterizerState CullBack
{
    CullMode = uint(BACK /* 3 */);
    FrontCounterClockwise = bool(TRUE /* 1 */);
};
RasterizerState CullBackMS
{
    CullMode = uint(BACK /* 3 */);
    FrontCounterClockwise = bool(TRUE /* 1 */);
    MultisampleEnable = bool(TRUE /* 1 */);
};
RasterizerState CullFrontNoClip
{
    CullMode = uint(FRONT /* 2 */);
    FrontCounterClockwise = bool(TRUE /* 1 */);
    DepthClipEnable = bool(FALSE /* 0 */);
};
RasterizerState CullFrontMS
{
    CullMode = uint(FRONT /* 2 */);
    FrontCounterClockwise = bool(TRUE /* 1 */);
    MultisampleEnable = bool(TRUE /* 1 */);
};
RasterizerState NoCull
{
    CullMode = uint(NONE /* 1 */);
};
RasterizerState NoCullMS
{
    CullMode = uint(NONE /* 1 */);
    MultisampleEnable = bool(TRUE /* 1 */);
};
RasterizerState Wireframe
{
    CullMode = uint(NONE /* 1 */);
    FillMode = uint(WIREFRAME /* 2 */);
};
RasterizerState WireframeMS
{
    CullMode = uint(NONE /* 1 */);
    FillMode = uint(WIREFRAME /* 2 */);
    MultisampleEnable = bool(TRUE /* 1 */);
};
DepthStencilState DepthNormal
{
    DepthFunc = uint(LESS_EQUAL /* 4 */);
};
DepthStencilState NoDepthStencil
{
    DepthEnable = bool(FALSE /* 0 */);
};
DepthStencilState ReadDepthNoStencil
{
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState DepthShadingPass
{
    DepthFunc = uint(EQUAL /* 3 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
BlendState NoBlending
{
    BlendEnable[0] = bool(FALSE /* 0 */);
};
BlendState BlendingAdd
{
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(ONE /* 2 */);
    SrcBlend[1] = uint(ONE /* 2 */);
    SrcBlend[2] = uint(ONE /* 2 */);
    SrcBlend[3] = uint(ONE /* 2 */);
    SrcBlend[4] = uint(ONE /* 2 */);
    SrcBlend[5] = uint(ONE /* 2 */);
    SrcBlend[6] = uint(ONE /* 2 */);
    SrcBlend[7] = uint(ONE /* 2 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(DEST_ALPHA /* 7 */);
    DestBlendAlpha[1] = uint(DEST_ALPHA /* 7 */);
    DestBlendAlpha[2] = uint(DEST_ALPHA /* 7 */);
    DestBlendAlpha[3] = uint(DEST_ALPHA /* 7 */);
    DestBlendAlpha[4] = uint(DEST_ALPHA /* 7 */);
    DestBlendAlpha[5] = uint(DEST_ALPHA /* 7 */);
    DestBlendAlpha[6] = uint(DEST_ALPHA /* 7 */);
    DestBlendAlpha[7] = uint(DEST_ALPHA /* 7 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
BlendState AlphaBlending
{
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[1] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[2] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[3] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[4] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[5] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[6] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[7] = uint(INV_SRC_ALPHA /* 6 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(DEST_ALPHA /* 7 */);
    DestBlendAlpha[1] = uint(DEST_ALPHA /* 7 */);
    DestBlendAlpha[2] = uint(DEST_ALPHA /* 7 */);
    DestBlendAlpha[3] = uint(DEST_ALPHA /* 7 */);
    DestBlendAlpha[4] = uint(DEST_ALPHA /* 7 */);
    DestBlendAlpha[5] = uint(DEST_ALPHA /* 7 */);
    DestBlendAlpha[6] = uint(DEST_ALPHA /* 7 */);
    DestBlendAlpha[7] = uint(DEST_ALPHA /* 7 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
Texture2D g_HeightfieldTexture;
Texture2D g_LayerdefTexture;
Texture2D g_RockBumpTexture;
Texture2D g_RockMicroBumpTexture;
Texture2D g_RockDiffuseTexture;
Texture2D g_SandBumpTexture;
Texture2D g_SandMicroBumpTexture;
Texture2D g_SandDiffuseTexture;
Texture2D g_GrassDiffuseTexture;
Texture2D g_SlopeDiffuseTexture;
Texture2D g_WaterBumpTexture;
Texture2D g_DepthMapTexture;
Texture2D g_SkyTexture;
Texture2D g_ReflectionTexture;
Texture2D g_RefractionTexture;
Texture2D g_RefractionDepthTextureResolved;
Texture2D g_WaterNormalMapTexture;
Texture2D g_DepthTexture;
Texture2D g_MainTexture;
Texture2DMS g_RefractionDepthTextureMS1;
Texture2DMS g_RefractionDepthTextureMS2;
Texture2DMS g_RefractionDepthTextureMS4;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 7 technique(s)
    //
    technique11 Default
    {
        pass p0
        {
            RasterizerState = NoCull;
            DS_StencilRef = uint(0);
            DepthStencilState = DepthNormal;
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NoBlending;
            VertexShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            GeometryShader = NULL;
            PixelShader = NULL;
        }

    }

    technique11 RefractionDepthManualResolve
    {
        pass MS1
        {
            RasterizerState = NoCullMS;
            DS_StencilRef = uint(0);
            DepthStencilState = NoDepthStencil;
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NoBlending;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer QuadObject
                // {
                //
                //   float2 QuadVertices[4];            // Offset:    0 Size:    56
                //      = 0xbf800000 0xbf800000 0x00000000 0x00000000 
                //        0x3f800000 0xbf800000 0x00000000 0x00000000 
                //        0xbf800000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 
                //   float2 QuadTexCoordinates[4];      // Offset:   64 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // QuadObject                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_4_0
                dcl_constantbuffer cb0[8], dynamicIndexed
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- VertexId; 
                //   o1.x <- <FullScreenQuadVS return value>.texcoord.x; o1.y <- <FullScreenQuadVS return value>.texcoord.y; 
                //   o0.x <- <FullScreenQuadVS return value>.position.x; o0.y <- <FullScreenQuadVS return value>.position.y; o0.z <- <FullScreenQuadVS return value>.position.z; o0.w <- <FullScreenQuadVS return value>.position.w
                //
                #line 766 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                itof r0.zw, l(0, 0, 0, 1)  // r0.z <- output.position.z; r0.w <- output.position.w
                mov r1.x, v0.x
                mov r0.xy, cb0[r1.x + 0].xyxx  // r0.x <- output.position.x; r0.y <- output.position.y
                mov r1.xy, cb0[r1.x + 4].xyxx  // r1.x <- output.texcoord.x; r1.y <- output.texcoord.y
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 7 instruction slots used
                            
            };
            HullShader = NULL;
            DomainShader = NULL;
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // g_RefractionDepthTextureMS1       texture   float       2dMS1    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xy  
                // TEXCOORD                 0   xy          1     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   x           0   TARGET   float   x   
                //
                ps_4_0
                dcl_resource_texture2dms(1) (float,float,float,float) t0
                dcl_input_ps_siv linear noperspective v0.xy, position
                dcl_output o0.x
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
                //   v1.x <- input.texcoord.x; v1.y <- input.texcoord.y; 
                //   o0.x <- <RefractionDepthManualResolvePS1 return value>
                //
                #line 782 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                ftoi r0.xy, v0.xyxx
                mov r0.zw, l(0,0,0,0)
                ldms r0.xyzw, r0.xyzw, t0.xyzw, l(0)
                mov o0.x, r0.x
                ret 
                // Approximately 5 instruction slots used
                            
            };
        }

        pass MS2
        {
            RasterizerState = NoCullMS;
            DS_StencilRef = uint(0);
            DepthStencilState = NoDepthStencil;
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NoBlending;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer QuadObject
                // {
                //
                //   float2 QuadVertices[4];            // Offset:    0 Size:    56
                //      = 0xbf800000 0xbf800000 0x00000000 0x00000000 
                //        0x3f800000 0xbf800000 0x00000000 0x00000000 
                //        0xbf800000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 
                //   float2 QuadTexCoordinates[4];      // Offset:   64 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // QuadObject                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_4_0
                dcl_constantbuffer cb0[8], dynamicIndexed
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- VertexId; 
                //   o1.x <- <FullScreenQuadVS return value>.texcoord.x; o1.y <- <FullScreenQuadVS return value>.texcoord.y; 
                //   o0.x <- <FullScreenQuadVS return value>.position.x; o0.y <- <FullScreenQuadVS return value>.position.y; o0.z <- <FullScreenQuadVS return value>.position.z; o0.w <- <FullScreenQuadVS return value>.position.w
                //
                #line 766 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                itof r0.zw, l(0, 0, 0, 1)  // r0.z <- output.position.z; r0.w <- output.position.w
                mov r1.x, v0.x
                mov r0.xy, cb0[r1.x + 0].xyxx  // r0.x <- output.position.x; r0.y <- output.position.y
                mov r1.xy, cb0[r1.x + 4].xyxx  // r1.x <- output.texcoord.x; r1.y <- output.texcoord.y
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 7 instruction slots used
                            
            };
            HullShader = NULL;
            DomainShader = NULL;
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // g_RefractionDepthTextureMS2       texture   float       2dMS2    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xy  
                // TEXCOORD                 0   xy          1     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   x           0   TARGET   float   x   
                //
                ps_4_0
                dcl_resource_texture2dms(2) (float,float,float,float) t0
                dcl_input_ps_siv linear noperspective v0.xy, position
                dcl_output o0.x
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
                //   v1.x <- input.texcoord.x; v1.y <- input.texcoord.y; 
                //   o0.x <- <RefractionDepthManualResolvePS2 return value>
                //
                #line 787 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                ftoi r0.xy, v0.xyxx
                mov r0.zw, l(0,0,0,0)
                ldms r0.xyzw, r0.xyzw, t0.xyzw, l(0)
                mov o0.x, r0.x
                ret 
                // Approximately 5 instruction slots used
                            
            };
        }

        pass MS4
        {
            RasterizerState = NoCullMS;
            DS_StencilRef = uint(0);
            DepthStencilState = NoDepthStencil;
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NoBlending;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer QuadObject
                // {
                //
                //   float2 QuadVertices[4];            // Offset:    0 Size:    56
                //      = 0xbf800000 0xbf800000 0x00000000 0x00000000 
                //        0x3f800000 0xbf800000 0x00000000 0x00000000 
                //        0xbf800000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 
                //   float2 QuadTexCoordinates[4];      // Offset:   64 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // QuadObject                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_4_0
                dcl_constantbuffer cb0[8], dynamicIndexed
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- VertexId; 
                //   o1.x <- <FullScreenQuadVS return value>.texcoord.x; o1.y <- <FullScreenQuadVS return value>.texcoord.y; 
                //   o0.x <- <FullScreenQuadVS return value>.position.x; o0.y <- <FullScreenQuadVS return value>.position.y; o0.z <- <FullScreenQuadVS return value>.position.z; o0.w <- <FullScreenQuadVS return value>.position.w
                //
                #line 766 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                itof r0.zw, l(0, 0, 0, 1)  // r0.z <- output.position.z; r0.w <- output.position.w
                mov r1.x, v0.x
                mov r0.xy, cb0[r1.x + 0].xyxx  // r0.x <- output.position.x; r0.y <- output.position.y
                mov r1.xy, cb0[r1.x + 4].xyxx  // r1.x <- output.texcoord.x; r1.y <- output.texcoord.y
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 7 instruction slots used
                            
            };
            HullShader = NULL;
            DomainShader = NULL;
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // g_RefractionDepthTextureMS4       texture   float       2dMS4    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xy  
                // TEXCOORD                 0   xy          1     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   x           0   TARGET   float   x   
                //
                ps_4_0
                dcl_resource_texture2dms(4) (float,float,float,float) t0
                dcl_input_ps_siv linear noperspective v0.xy, position
                dcl_output o0.x
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
                //   v1.x <- input.texcoord.x; v1.y <- input.texcoord.y; 
                //   o0.x <- <RefractionDepthManualResolvePS4 return value>
                //
                #line 792 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                ftoi r0.xy, v0.xyxx
                mov r0.zw, l(0,0,0,0)
                ldms r0.xyzw, r0.xyzw, t0.xyzw, l(0)
                mov o0.x, r0.x
                ret 
                // Approximately 5 instruction slots used
                            
            };
        }

    }

    technique11 MainToBackBuffer
    {
        pass Solid
        {
            RasterizerState = NoCullMS;
            DS_StencilRef = uint(0);
            DepthStencilState = NoDepthStencil;
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NoBlending;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer QuadObject
                // {
                //
                //   float2 QuadVertices[4];            // Offset:    0 Size:    56
                //      = 0xbf800000 0xbf800000 0x00000000 0x00000000 
                //        0x3f800000 0xbf800000 0x00000000 0x00000000 
                //        0xbf800000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 
                //   float2 QuadTexCoordinates[4];      // Offset:   64 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // QuadObject                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_4_0
                dcl_constantbuffer cb0[8], dynamicIndexed
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- VertexId; 
                //   o1.x <- <FullScreenQuadVS return value>.texcoord.x; o1.y <- <FullScreenQuadVS return value>.texcoord.y; 
                //   o0.x <- <FullScreenQuadVS return value>.position.x; o0.y <- <FullScreenQuadVS return value>.position.y; o0.z <- <FullScreenQuadVS return value>.position.z; o0.w <- <FullScreenQuadVS return value>.position.w
                //
                #line 766 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                itof r0.zw, l(0, 0, 0, 1)  // r0.z <- output.position.z; r0.w <- output.position.w
                mov r1.x, v0.x
                mov r0.xy, cb0[r1.x + 0].xyxx  // r0.x <- output.position.x; r0.y <- output.position.y
                mov r1.xy, cb0[r1.x + 4].xyxx  // r1.x <- output.texcoord.x; r1.y <- output.texcoord.y
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 7 instruction slots used
                            
            };
            HullShader = NULL;
            DomainShader = NULL;
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cb0
                // {
                //
                //   float g_RenderCaustics;            // Offset:    0 Size:     4 [unused]
                //   float g_UseDynamicLOD;             // Offset:    4 Size:     4 [unused]
                //   float g_FrustumCullInHS;           // Offset:    8 Size:     4 [unused]
                //   float g_DynamicTessFactor;         // Offset:   12 Size:     4 [unused]
                //   float g_StaticTessFactor;          // Offset:   16 Size:     4 [unused]
                //   float g_TerrainBeingRendered;      // Offset:   20 Size:     4 [unused]
                //   float g_HalfSpaceCullSign;         // Offset:   24 Size:     4 [unused]
                //   float g_HalfSpaceCullPosition;     // Offset:   28 Size:     4 [unused]
                //   float g_SkipCausticsCalculation;   // Offset:   32 Size:     4 [unused]
                //   int g_MSSamples;                   // Offset:   36 Size:     4 [unused]
                //   float4x4 g_ModelViewMatrix;        // Offset:   48 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrix;// Offset:  112 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrixInv;// Offset:  176 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrix;// Offset:  240 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrixInv;// Offset:  304 Size:    64 [unused]
                //   float3 g_CameraPosition;           // Offset:  368 Size:    12 [unused]
                //   float3 g_CameraDirection;          // Offset:  384 Size:    12 [unused]
                //   float3 g_LightPosition;            // Offset:  400 Size:    12 [unused]
                //   float2 g_WaterBumpTexcoordShift;   // Offset:  416 Size:     8 [unused]
                //   float2 g_ScreenSizeInv;            // Offset:  424 Size:     8 [unused]
                //   float g_MainBufferSizeMultiplier;  // Offset:  432 Size:     4
                //   float g_ZNear;                     // Offset:  436 Size:     4 [unused]
                //   float g_ZFar;                      // Offset:  440 Size:     4 [unused]
                //   float2 g_DiffuseTexcoordScale;     // Offset:  448 Size:     8 [unused]
                //      = 0x43020000 0x43020000 
                //   float2 g_RockBumpTexcoordScale;    // Offset:  456 Size:     8 [unused]
                //      = 0x41200000 0x41200000 
                //   float g_RockBumpHeightScale;       // Offset:  464 Size:     4 [unused]
                //      = 0x40400000 
                //   float2 g_SandBumpTexcoordScale;    // Offset:  468 Size:     8 [unused]
                //      = 0x40600000 0x40600000 
                //   float g_SandBumpHeightScale;       // Offset:  476 Size:     4 [unused]
                //      = 0x3f000000 
                //   float g_TerrainSpecularIntensity;  // Offset:  480 Size:     4 [unused]
                //      = 0x3f000000 
                //   float2 g_WaterMicroBumpTexcoordScale;// Offset:  484 Size:     8 [unused]
                //      = 0x43610000 0x43610000 
                //   float2 g_WaterBumpTexcoordScale;   // Offset:  496 Size:     8 [unused]
                //      = 0x40e00000 0x40e00000 
                //   float g_WaterHeightBumpScale;      // Offset:  504 Size:     4 [unused]
                //      = 0x3f800000 
                //   float3 g_WaterDeepColor;           // Offset:  512 Size:    12 [unused]
                //      = 0x3dcccccd 0x3ecccccd 0x3f333333 
                //   float3 g_WaterScatterColor;        // Offset:  528 Size:    12 [unused]
                //      = 0x3e99999a 0x3f333333 0x3f19999a 
                //   float3 g_WaterSpecularColor;       // Offset:  544 Size:    12 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 
                //   float g_WaterSpecularIntensity;    // Offset:  556 Size:     4 [unused]
                //      = 0x43af0000 
                //   float g_WaterSpecularPower;        // Offset:  560 Size:     4 [unused]
                //      = 0x447a0000 
                //   float2 g_WaterColorIntensity;      // Offset:  564 Size:     8 [unused]
                //      = 0x3dcccccd 0x3e4ccccd 
                //   float3 g_AtmosphereBrightColor;    // Offset:  576 Size:    12 [unused]
                //      = 0x3f800000 0x3f8ccccd 0x3fb33333 
                //   float3 g_AtmosphereDarkColor;      // Offset:  592 Size:    12 [unused]
                //      = 0x3f19999a 0x3f19999a 0x3f333333 
                //   float g_FogDensity;                // Offset:  604 Size:     4 [unused]
                //      = 0x3abb3ee7 
                //   float2 g_HeightFieldOrigin;        // Offset:  608 Size:     8 [unused]
                //      = 0x00000000 0x00000000 
                //   float g_HeightFieldSize;           // Offset:  616 Size:     4 [unused]
                //      = 0x44000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinearWrap                 sampler      NA          NA    0        1
                // g_MainTexture                     texture  float4          2d    0        1
                // cb0                               cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_4_0
                dcl_constantbuffer cb0[28], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
                //   v1.x <- input.texcoord.x; v1.y <- input.texcoord.y; 
                //   o0.x <- <MainToBackBufferPS return value>.x; o0.y <- <MainToBackBufferPS return value>.y; o0.z <- <MainToBackBufferPS return value>.z; o0.w <- <MainToBackBufferPS return value>.w
                //
                #line 775 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                mov r0.x, l(-0.500000)
                add r0.x, r0.x, v1.x
                div r0.x, r0.x, cb0[27].x
                add r0.x, r0.x, l(0.500000)
                mov r0.z, l(-0.500000)
                add r0.z, r0.z, v1.y
                div r0.z, r0.z, cb0[27].x
                add r0.y, r0.z, l(0.500000)
                itof r0.z, l(0)
                sample_l r0.xyzw, r0.xyxx, t0.xyzw, s0, r0.z
                mov r0.xyz, r0.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                itof r0.w, l(0)  // r0.w <- color.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 15 instruction slots used
                            
            };
        }

    }

    technique11 WaterNormalmapCombine
    {
        pass Solid
        {
            RasterizerState = NoCullMS;
            DS_StencilRef = uint(0);
            DepthStencilState = NoDepthStencil;
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NoBlending;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer QuadObject
                // {
                //
                //   float2 QuadVertices[4];            // Offset:    0 Size:    56
                //      = 0xbf800000 0xbf800000 0x00000000 0x00000000 
                //        0x3f800000 0xbf800000 0x00000000 0x00000000 
                //        0xbf800000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 
                //   float2 QuadTexCoordinates[4];      // Offset:   64 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // QuadObject                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_4_0
                dcl_constantbuffer cb0[8], dynamicIndexed
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- VertexId; 
                //   o1.x <- <WaterNormalmapCombineVS return value>.texcoord.x; o1.y <- <WaterNormalmapCombineVS return value>.texcoord.y; 
                //   o0.x <- <WaterNormalmapCombineVS return value>.position.x; o0.y <- <WaterNormalmapCombineVS return value>.position.y; o0.z <- <WaterNormalmapCombineVS return value>.position.z; o0.w <- <WaterNormalmapCombineVS return value>.position.w
                //
                #line 744 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                itof r0.zw, l(0, 0, 0, 1)  // r0.z <- output.position.z; r0.w <- output.position.w
                mov r1.x, v0.x
                mov r0.xy, cb0[r1.x + 0].xyxx  // r0.x <- output.position.x; r0.y <- output.position.y
                mov r1.xy, cb0[r1.x + 4].xyxx  // r1.x <- output.texcoord.x; r1.y <- output.texcoord.y
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 7 instruction slots used
                            
            };
            HullShader = NULL;
            DomainShader = NULL;
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cb0
                // {
                //
                //   float g_RenderCaustics;            // Offset:    0 Size:     4 [unused]
                //   float g_UseDynamicLOD;             // Offset:    4 Size:     4 [unused]
                //   float g_FrustumCullInHS;           // Offset:    8 Size:     4 [unused]
                //   float g_DynamicTessFactor;         // Offset:   12 Size:     4 [unused]
                //   float g_StaticTessFactor;          // Offset:   16 Size:     4 [unused]
                //   float g_TerrainBeingRendered;      // Offset:   20 Size:     4 [unused]
                //   float g_HalfSpaceCullSign;         // Offset:   24 Size:     4 [unused]
                //   float g_HalfSpaceCullPosition;     // Offset:   28 Size:     4 [unused]
                //   float g_SkipCausticsCalculation;   // Offset:   32 Size:     4 [unused]
                //   int g_MSSamples;                   // Offset:   36 Size:     4 [unused]
                //   float4x4 g_ModelViewMatrix;        // Offset:   48 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrix;// Offset:  112 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrixInv;// Offset:  176 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrix;// Offset:  240 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrixInv;// Offset:  304 Size:    64 [unused]
                //   float3 g_CameraPosition;           // Offset:  368 Size:    12
                //   float3 g_CameraDirection;          // Offset:  384 Size:    12 [unused]
                //   float3 g_LightPosition;            // Offset:  400 Size:    12 [unused]
                //   float2 g_WaterBumpTexcoordShift;   // Offset:  416 Size:     8
                //   float2 g_ScreenSizeInv;            // Offset:  424 Size:     8 [unused]
                //   float g_MainBufferSizeMultiplier;  // Offset:  432 Size:     4 [unused]
                //   float g_ZNear;                     // Offset:  436 Size:     4 [unused]
                //   float g_ZFar;                      // Offset:  440 Size:     4 [unused]
                //   float2 g_DiffuseTexcoordScale;     // Offset:  448 Size:     8 [unused]
                //      = 0x43020000 0x43020000 
                //   float2 g_RockBumpTexcoordScale;    // Offset:  456 Size:     8 [unused]
                //      = 0x41200000 0x41200000 
                //   float g_RockBumpHeightScale;       // Offset:  464 Size:     4 [unused]
                //      = 0x40400000 
                //   float2 g_SandBumpTexcoordScale;    // Offset:  468 Size:     8 [unused]
                //      = 0x40600000 0x40600000 
                //   float g_SandBumpHeightScale;       // Offset:  476 Size:     4 [unused]
                //      = 0x3f000000 
                //   float g_TerrainSpecularIntensity;  // Offset:  480 Size:     4 [unused]
                //      = 0x3f000000 
                //   float2 g_WaterMicroBumpTexcoordScale;// Offset:  484 Size:     8 [unused]
                //      = 0x43610000 0x43610000 
                //   float2 g_WaterBumpTexcoordScale;   // Offset:  496 Size:     8
                //      = 0x40e00000 0x40e00000 
                //   float g_WaterHeightBumpScale;      // Offset:  504 Size:     4 [unused]
                //      = 0x3f800000 
                //   float3 g_WaterDeepColor;           // Offset:  512 Size:    12 [unused]
                //      = 0x3dcccccd 0x3ecccccd 0x3f333333 
                //   float3 g_WaterScatterColor;        // Offset:  528 Size:    12 [unused]
                //      = 0x3e99999a 0x3f333333 0x3f19999a 
                //   float3 g_WaterSpecularColor;       // Offset:  544 Size:    12 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 
                //   float g_WaterSpecularIntensity;    // Offset:  556 Size:     4 [unused]
                //      = 0x43af0000 
                //   float g_WaterSpecularPower;        // Offset:  560 Size:     4 [unused]
                //      = 0x447a0000 
                //   float2 g_WaterColorIntensity;      // Offset:  564 Size:     8 [unused]
                //      = 0x3dcccccd 0x3e4ccccd 
                //   float3 g_AtmosphereBrightColor;    // Offset:  576 Size:    12 [unused]
                //      = 0x3f800000 0x3f8ccccd 0x3fb33333 
                //   float3 g_AtmosphereDarkColor;      // Offset:  592 Size:    12 [unused]
                //      = 0x3f19999a 0x3f19999a 0x3f333333 
                //   float g_FogDensity;                // Offset:  604 Size:     4 [unused]
                //      = 0x3abb3ee7 
                //   float2 g_HeightFieldOrigin;        // Offset:  608 Size:     8 [unused]
                //      = 0x00000000 0x00000000 
                //   float g_HeightFieldSize;           // Offset:  616 Size:     4
                //      = 0x44000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinearWrap                 sampler      NA          NA    0        1
                // g_WaterBumpTexture                texture  float4          2d    0        1
                // cb0                               cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_4_0
                dcl_constantbuffer cb0[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
                //   v1.x <- input.texcoord.x; v1.y <- input.texcoord.y; 
                //   o0.x <- <WaterNormalmapCombinePS return value>.x; o0.y <- <WaterNormalmapCombinePS return value>.y; o0.z <- <WaterNormalmapCombinePS return value>.z; o0.w <- <WaterNormalmapCombinePS return value>.w
                //
                #line 753 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                nop 
                mul r0.x, v1.x, l(400.000000)
                mov r0.y, l(-200.000000)
                add r0.x, r0.y, r0.x
                mul r0.z, v1.y, l(400.000000)
                mov r0.w, l(-200.000000)
                add r0.y, r0.w, r0.z
                add r0.xy, r0.xyxx, cb0[23].xzxx
                itof r0.z, l(0)
                
                #line 222
                mov r1.xyz, l(0,4.000000,0,0)  // r1.x <- water_normal.x; r1.y <- water_normal.y; r1.z <- water_normal.z
                
                #line 227
                mov r0.w, l(1.000000)  // r0.w <- texcoord_scale
                mov r1.w, l(1.000000)  // r1.w <- normal_disturbance_scale
                mov r2.xy, l(1.000000,1.000000,0,0)  // r2.x <- variance.x; r2.y <- variance.y
                mul r0.xy, r0.xyxx, cb0[31].xyxx
                div r0.xy, r0.xyxx, cb0[38].zzzz  // r0.x <- tc.x; r0.y <- tc.y
                
                #line 235
                itof r2.w, l(0)  // r2.w <- i
                mov r3.xy, r1.xzxx  // r3.x <- water_normal.x; r3.y <- water_normal.z
                mov r3.z, r0.w  // r3.z <- texcoord_scale
                mov r3.w, r1.w  // r3.w <- normal_disturbance_scale
                mov r2.z, r2.x  // r2.z <- variance.x
                mov r4.x, r2.w  // r4.x <- i
                loop 
                  itof r4.y, l(8)
                  lt r4.y, r4.x, r4.y
                  breakc_z r4.y
                  mul r4.yz, r0.xxyx, r3.zzzz
                  mul r5.xy, cb0[26].xyxx, l(0.030000, 0.030000, 0.000000, 0.000000)
                  mul r5.xy, r2.zyzz, r5.xyxx
                  add r4.yz, r4.yyzy, r5.xxyx
                  sample_l r5.xyzw, r4.yzyy, t0.xyzw, s0, r0.z
                  mov r5.xy, r5.xyxx  // r5.x <- texvalue.x; r5.y <- texvalue.z
                  mul r2.z, r2.z, l(-1.000000)
                  itof r4.yz, l(0, 2, 2, 0)
                  mul r4.yz, r5.xxyx, r4.yyzy
                  itof r5.xy, l(1, 1, 0, 0)
                  mov r5.xy, -r5.xyxx
                  add r4.yz, r4.yyzy, r5.xxyx
                  mul r4.yz, r3.wwww, r4.yyzy
                  add r3.xy, r3.xyxx, r4.yzyy
                  mul r3.z, r3.z, l(1.400000)
                  mul r3.w, r3.w, l(0.850000)
                  add r4.x, r4.x, l(1.000000)
                endloop 
                mov r1.xz, r3.xxyx  // r1.x <- water_normal.x; r1.z <- water_normal.z
                dp3 r0.x, r1.xyzx, r1.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, r1.xyzx  // r0.x <- <CombineSimplifiedWaterNormal return value>.x; r0.y <- <CombineSimplifiedWaterNormal return value>.y; r0.z <- <CombineSimplifiedWaterNormal return value>.z
                
                #line 753
                add r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                itof r0.w, l(0)  // r0.w <- color.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 53 instruction slots used
                            
            };
        }

    }

    technique11 RenderHeightfield
    {
        pass Solid
        {
            RasterizerState = CullBackMS;
            DS_StencilRef = uint(0);
            DepthStencilState = DepthNormal;
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NoBlending;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // PATCH_PARAMETERS         0   xyzw        0     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // ORIGIN                   0   xy          0     NONE   float   xy  
                // SIZE                     0     zw        0     NONE   float     zw
                //
                vs_4_0
                dcl_input v0.xyzw
                dcl_output o0.xy
                dcl_output o0.zw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- PatchParams.x; v0.y <- PatchParams.y; v0.z <- PatchParams.z; v0.w <- PatchParams.w; 
                //   o0.x <- <PassThroughVS return value>.origin.x; o0.y <- <PassThroughVS return value>.origin.y; o0.z <- <PassThroughVS return value>.size.x; o0.w <- <PassThroughVS return value>.size.y
                //
                #line 326 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                mov r0.xy, v0.xyxx  // r0.x <- output.origin.x; r0.y <- output.origin.y
                mov r0.zw, v0.zzzw  // r0.z <- output.size.x; r0.w <- output.size.y
                mov o0.xy, r0.xyxx
                mov o0.zw, r0.zzzw
                ret 
                // Approximately 5 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cb0
                // {
                //
                //   float g_RenderCaustics;            // Offset:    0 Size:     4 [unused]
                //   float g_UseDynamicLOD;             // Offset:    4 Size:     4
                //   float g_FrustumCullInHS;           // Offset:    8 Size:     4
                //   float g_DynamicTessFactor;         // Offset:   12 Size:     4
                //   float g_StaticTessFactor;          // Offset:   16 Size:     4
                //   float g_TerrainBeingRendered;      // Offset:   20 Size:     4
                //   float g_HalfSpaceCullSign;         // Offset:   24 Size:     4 [unused]
                //   float g_HalfSpaceCullPosition;     // Offset:   28 Size:     4 [unused]
                //   float g_SkipCausticsCalculation;   // Offset:   32 Size:     4 [unused]
                //   int g_MSSamples;                   // Offset:   36 Size:     4 [unused]
                //   float4x4 g_ModelViewMatrix;        // Offset:   48 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrix;// Offset:  112 Size:    64
                //   float4x4 g_ModelViewProjectionMatrixInv;// Offset:  176 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrix;// Offset:  240 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrixInv;// Offset:  304 Size:    64 [unused]
                //   float3 g_CameraPosition;           // Offset:  368 Size:    12
                //   float3 g_CameraDirection;          // Offset:  384 Size:    12
                //   float3 g_LightPosition;            // Offset:  400 Size:    12 [unused]
                //   float2 g_WaterBumpTexcoordShift;   // Offset:  416 Size:     8 [unused]
                //   float2 g_ScreenSizeInv;            // Offset:  424 Size:     8 [unused]
                //   float g_MainBufferSizeMultiplier;  // Offset:  432 Size:     4 [unused]
                //   float g_ZNear;                     // Offset:  436 Size:     4 [unused]
                //   float g_ZFar;                      // Offset:  440 Size:     4 [unused]
                //   float2 g_DiffuseTexcoordScale;     // Offset:  448 Size:     8 [unused]
                //      = 0x43020000 0x43020000 
                //   float2 g_RockBumpTexcoordScale;    // Offset:  456 Size:     8 [unused]
                //      = 0x41200000 0x41200000 
                //   float g_RockBumpHeightScale;       // Offset:  464 Size:     4 [unused]
                //      = 0x40400000 
                //   float2 g_SandBumpTexcoordScale;    // Offset:  468 Size:     8 [unused]
                //      = 0x40600000 0x40600000 
                //   float g_SandBumpHeightScale;       // Offset:  476 Size:     4 [unused]
                //      = 0x3f000000 
                //   float g_TerrainSpecularIntensity;  // Offset:  480 Size:     4 [unused]
                //      = 0x3f000000 
                //   float2 g_WaterMicroBumpTexcoordScale;// Offset:  484 Size:     8 [unused]
                //      = 0x43610000 0x43610000 
                //   float2 g_WaterBumpTexcoordScale;   // Offset:  496 Size:     8 [unused]
                //      = 0x40e00000 0x40e00000 
                //   float g_WaterHeightBumpScale;      // Offset:  504 Size:     4 [unused]
                //      = 0x3f800000 
                //   float3 g_WaterDeepColor;           // Offset:  512 Size:    12 [unused]
                //      = 0x3dcccccd 0x3ecccccd 0x3f333333 
                //   float3 g_WaterScatterColor;        // Offset:  528 Size:    12 [unused]
                //      = 0x3e99999a 0x3f333333 0x3f19999a 
                //   float3 g_WaterSpecularColor;       // Offset:  544 Size:    12 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 
                //   float g_WaterSpecularIntensity;    // Offset:  556 Size:     4 [unused]
                //      = 0x43af0000 
                //   float g_WaterSpecularPower;        // Offset:  560 Size:     4 [unused]
                //      = 0x447a0000 
                //   float2 g_WaterColorIntensity;      // Offset:  564 Size:     8 [unused]
                //      = 0x3dcccccd 0x3e4ccccd 
                //   float3 g_AtmosphereBrightColor;    // Offset:  576 Size:    12 [unused]
                //      = 0x3f800000 0x3f8ccccd 0x3fb33333 
                //   float3 g_AtmosphereDarkColor;      // Offset:  592 Size:    12 [unused]
                //      = 0x3f19999a 0x3f19999a 0x3f333333 
                //   float g_FogDensity;                // Offset:  604 Size:     4 [unused]
                //      = 0x3abb3ee7 
                //   float2 g_HeightFieldOrigin;        // Offset:  608 Size:     8 [unused]
                //      = 0x00000000 0x00000000 
                //   float g_HeightFieldSize;           // Offset:  616 Size:     4
                //      = 0x44000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinearWrap                 sampler      NA          NA    0        1
                // g_HeightfieldTexture              texture  float4          2d    0        1
                // cb0                               cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float   x   
                // ORIGIN                   0    yz         0     NONE   float    yz 
                // SV_TessFactor            1   x           1 QUADEDGE   float   x   
                // SIZE                     0    yz         1     NONE   float    yz 
                // SV_TessFactor            2   x           2 QUADEDGE   float   x   
                // SV_TessFactor            3   x           3 QUADEDGE   float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT   float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // ORIGIN                   0   xy          0     NONE   float   xy  
                // SIZE                     0     zw        0     NONE   float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // DUMMY                    0   x           0     NONE   float   x   
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           1
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 1
                dcl_output_control_point_count 1
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                hs_control_point_phase 
                dcl_output o0.x
                //
                // Initial variable locations:
                //   o0.x <- <PatchHS return value>; 
                //   v[0][0].x <- inputPatch[0].origin.x; v[0][0].y <- inputPatch[0].origin.y; v[0][0].z <- inputPatch[0].size.x; v[0][0].w <- inputPatch[0].size.y
                //
                #line 404 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                itof o0.x, l(0)
                ret 
                hs_join_phase 
                dcl_input vicp[1][0].xy
                dcl_input vicp[1][0].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output o0.yz
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output o1.yz
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 5
                
                #line 337
                itof r0.x, l(0)  // r0.x <- inside_tessellation_factor
                itof r0.y, l(0)  // r0.y <- in_frustum
                mov r0.zw, vicp[0][0].xxxy  // r0.z <- output.origin.x; r0.w <- output.origin.y
                mov r1.xy, vicp[0][0].zwzz  // r1.x <- output.size.x; r1.y <- output.size.y
                div r1.zw, vicp[0][0].zzzw, l(0.000000, 0.000000, 2.000000, 2.000000)
                add r1.zw, r1.zzzw, vicp[0][0].xxxy
                div r2.xy, r1.zwzz, cb0[38].zzzz  // r2.x <- texcoord0to1.x; r2.y <- texcoord0to1.y
                itof r1.z, l(1)
                mov r1.w, -r2.y
                add r2.z, r1.w, r1.z  // r2.z <- texcoord0to1.y
                
                #line 347
                mul r1.z, l(0.500000), vicp[0][0].z
                add r3.x, r1.z, vicp[0][0].x  // r3.x <- patch_center.x
                itof r1.z, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r1.z, r2.xzxx, t0.xywz, s0, r1.z
                mul r3.y, r1.z, cb0[1].y  // r3.y <- patch_center.y
                mul r1.z, l(0.500000), vicp[0][0].w
                add r3.z, r1.z, vicp[0][0].y  // r3.z <- patch_center.z
                mov r2.xyz, -cb0[23].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- camera_to_patch_vector.x; r2.y <- camera_to_patch_vector.y; r2.z <- camera_to_patch_vector.z
                dp3 r1.z, r2.xyzx, cb0[24].xyzx
                mul r4.xyz, r1.zzzz, cb0[24].xyzx
                mov r2.xyz, -r2.xyzx
                add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- patch_to_camera_direction_vector.x; r2.y <- patch_to_camera_direction_vector.y; r2.z <- patch_to_camera_direction_vector.z
                dp3 r1.z, r2.xyzx, r2.xyzx
                rsq r1.z, r1.z
                mul r4.xyz, r1.zzzz, r2.xyzx
                itof r1.z, l(2)
                mul r1.z, r1.z, vicp[0][0].z
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w
                min r1.z, r1.w, r1.z
                mul r2.xyz, r1.zzzz, r4.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- patch_center_realigned.x; r2.y <- patch_center_realigned.y; r2.z <- patch_center_realigned.z
                mov r2.w, l(1.000000)
                dp4 r1.z, r2.xyzw, cb0[7].xyzw  // r1.z <- patch_screenspace_center.x
                dp4 r1.w, r2.xyzw, cb0[8].xyzw  // r1.w <- patch_screenspace_center.y
                dp4 r2.x, r2.xyzw, cb0[10].xyzw  // r2.x <- patch_screenspace_center.w
                div r2.y, r1.z, r2.x
                lt r2.y, l(-1.000000), r2.y
                div r1.z, r1.z, r2.x
                lt r1.z, r1.z, l(1.000000)
                and r1.z, r1.z, r2.y
                div r2.y, r1.w, r2.x
                lt r2.y, l(-1.000000), r2.y
                and r1.z, r1.z, r2.y
                div r1.w, r1.w, r2.x
                lt r1.w, r1.w, l(1.000000)
                and r1.z, r1.w, r1.z
                itof r1.w, l(0)
                lt r1.w, r1.w, r2.x
                and r1.z, r1.w, r1.z
                mov r2.xyz, -cb0[23].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w
                itof r2.x, l(2)
                mul r2.x, r2.x, vicp[0][0].z
                lt r1.w, r1.w, r2.x
                or r1.z, r1.w, r1.z
                if_nz r1.z
                
                #line 357
                  itof r0.y, l(1)
                endif 
                ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), r0.y
                itof r1.z, l(0)
                eq r1.z, r1.z, cb0[0].z
                or r0.y, r0.y, r1.z
                if_nz r0.y
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r2.y, l(0.500000), vicp[0][0].w
                  itof r2.x, l(0)
                  mov r2.xy, -r2.xyxx
                  add r1.zw, r1.zzzw, r2.xxxy
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r2.x, r0.y, cb0[1].x  // r2.x <- <CalculateTessellationFactor return value>
                
                #line 363
                  mov r2.x, r2.x  // r2.x <- tesselation_factor
                  mov r2.x, r2.x  // r2.x <- output.Edges[0]
                  add r0.x, r0.x, r2.x
                
                #line 368
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r3.x, l(0.500000), vicp[0][0].z
                  itof r3.y, l(0)
                  mov r2.zw, -r3.xxxy
                  add r1.zw, r1.zzzw, r2.zzzw
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r2.y, r0.y, cb0[1].x  // r2.y <- <CalculateTessellationFactor return value>
                
                #line 369
                  mov r2.y, r2.y  // r2.y <- tesselation_factor
                  mov r2.y, r2.y  // r2.y <- output.Edges[1]
                  add r0.x, r0.x, r2.y
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r3.y, l(0.500000), vicp[0][0].w
                  mov r3.x, vicp[0][0].z
                  mov r2.zw, -r3.xxxy
                  add r1.zw, r1.zzzw, r2.zzzw
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r3.x, r0.y, cb0[1].x  // r3.x <- <CalculateTessellationFactor return value>
                
                #line 374
                  mov r3.x, r3.x  // r3.x <- tesselation_factor
                  mov r3.x, r3.x  // r3.x <- output.Edges[2]
                  add r0.x, r0.x, r3.x
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r4.x, l(0.500000), vicp[0][0].z
                  mov r4.y, vicp[0][0].w
                  mov r2.zw, -r4.xxxy
                  add r1.zw, r1.zzzw, r2.zzzw
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r3.y, r0.y, cb0[1].x  // r3.y <- <CalculateTessellationFactor return value>
                
                #line 379
                  mov r3.y, r3.y  // r3.y <- tesselation_factor
                  mov r3.y, r3.y  // r3.y <- output.Edges[3]
                  add r0.x, r0.x, r3.y
                  mul r3.w, r0.x, l(0.250000)  // r3.w <- output.Inside[1]
                  mov r3.z, r3.w  // r3.z <- output.Inside[0]
                else   // Prior locations: r3.x <- patch_center.x; r3.y <- patch_center.y; r3.z <- patch_center.z
                
                #line 386
                  itof r2.x, l(-1)  // r2.x <- output.Edges[0]
                  itof r2.y, l(-1)  // r2.y <- output.Edges[1]
                  itof r3.x, l(-1)  // r3.x <- output.Edges[2]
                  itof r3.y, l(-1)  // r3.y <- output.Edges[3]
                  itof r3.z, l(-1)  // r3.z <- output.Inside[0]
                  itof r3.w, l(-1)  // r3.w <- output.Inside[1]
                endif 
                mov o0.yz, r0.zzwz
                mov o1.yz, r1.xxyx
                mov o0.x, r2.x
                mov o1.x, r2.y
                mov r3.xyzw, r3.xyzw  // r3.x <- <PatchConstantHS return value>.Edges[2]; r3.y <- <PatchConstantHS return value>.Edges[3]; r3.z <- <PatchConstantHS return value>.Inside[0]; r3.w <- <PatchConstantHS return value>.Inside[1]
                mov o2.x, r3.x
                mov o3.x, r3.y
                mov o4.x, r3.z
                mov o5.x, r3.w
                ret 
                // Approximately 173 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cb0
                // {
                //
                //   float g_RenderCaustics;            // Offset:    0 Size:     4
                //   float g_UseDynamicLOD;             // Offset:    4 Size:     4
                //   float g_FrustumCullInHS;           // Offset:    8 Size:     4 [unused]
                //   float g_DynamicTessFactor;         // Offset:   12 Size:     4
                //   float g_StaticTessFactor;          // Offset:   16 Size:     4
                //   float g_TerrainBeingRendered;      // Offset:   20 Size:     4 [unused]
                //   float g_HalfSpaceCullSign;         // Offset:   24 Size:     4 [unused]
                //   float g_HalfSpaceCullPosition;     // Offset:   28 Size:     4 [unused]
                //   float g_SkipCausticsCalculation;   // Offset:   32 Size:     4
                //   int g_MSSamples;                   // Offset:   36 Size:     4 [unused]
                //   float4x4 g_ModelViewMatrix;        // Offset:   48 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrix;// Offset:  112 Size:    64
                //   float4x4 g_ModelViewProjectionMatrixInv;// Offset:  176 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrix;// Offset:  240 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrixInv;// Offset:  304 Size:    64 [unused]
                //   float3 g_CameraPosition;           // Offset:  368 Size:    12
                //   float3 g_CameraDirection;          // Offset:  384 Size:    12 [unused]
                //   float3 g_LightPosition;            // Offset:  400 Size:    12
                //   float2 g_WaterBumpTexcoordShift;   // Offset:  416 Size:     8 [unused]
                //   float2 g_ScreenSizeInv;            // Offset:  424 Size:     8 [unused]
                //   float g_MainBufferSizeMultiplier;  // Offset:  432 Size:     4 [unused]
                //   float g_ZNear;                     // Offset:  436 Size:     4 [unused]
                //   float g_ZFar;                      // Offset:  440 Size:     4 [unused]
                //   float2 g_DiffuseTexcoordScale;     // Offset:  448 Size:     8
                //      = 0x43020000 0x43020000 
                //   float2 g_RockBumpTexcoordScale;    // Offset:  456 Size:     8
                //      = 0x41200000 0x41200000 
                //   float g_RockBumpHeightScale;       // Offset:  464 Size:     4
                //      = 0x40400000 
                //   float2 g_SandBumpTexcoordScale;    // Offset:  468 Size:     8
                //      = 0x40600000 0x40600000 
                //   float g_SandBumpHeightScale;       // Offset:  476 Size:     4
                //      = 0x3f000000 
                //   float g_TerrainSpecularIntensity;  // Offset:  480 Size:     4 [unused]
                //      = 0x3f000000 
                //   float2 g_WaterMicroBumpTexcoordScale;// Offset:  484 Size:     8 [unused]
                //      = 0x43610000 0x43610000 
                //   float2 g_WaterBumpTexcoordScale;   // Offset:  496 Size:     8 [unused]
                //      = 0x40e00000 0x40e00000 
                //   float g_WaterHeightBumpScale;      // Offset:  504 Size:     4
                //      = 0x3f800000 
                //   float3 g_WaterDeepColor;           // Offset:  512 Size:    12 [unused]
                //      = 0x3dcccccd 0x3ecccccd 0x3f333333 
                //   float3 g_WaterScatterColor;        // Offset:  528 Size:    12 [unused]
                //      = 0x3e99999a 0x3f333333 0x3f19999a 
                //   float3 g_WaterSpecularColor;       // Offset:  544 Size:    12 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 
                //   float g_WaterSpecularIntensity;    // Offset:  556 Size:     4 [unused]
                //      = 0x43af0000 
                //   float g_WaterSpecularPower;        // Offset:  560 Size:     4 [unused]
                //      = 0x447a0000 
                //   float2 g_WaterColorIntensity;      // Offset:  564 Size:     8 [unused]
                //      = 0x3dcccccd 0x3e4ccccd 
                //   float3 g_AtmosphereBrightColor;    // Offset:  576 Size:    12 [unused]
                //      = 0x3f800000 0x3f8ccccd 0x3fb33333 
                //   float3 g_AtmosphereDarkColor;      // Offset:  592 Size:    12 [unused]
                //      = 0x3f19999a 0x3f19999a 0x3f333333 
                //   float g_FogDensity;                // Offset:  604 Size:     4 [unused]
                //      = 0x3abb3ee7 
                //   float2 g_HeightFieldOrigin;        // Offset:  608 Size:     8 [unused]
                //      = 0x00000000 0x00000000 
                //   float g_HeightFieldSize;           // Offset:  616 Size:     4
                //      = 0x44000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinearWrap                 sampler      NA          NA    0        1
                // g_HeightfieldTexture              texture  float4          2d    0        1
                // g_LayerdefTexture                 texture  float4          2d    1        1
                // g_RockBumpTexture                 texture  float4          2d    2        1
                // g_SandBumpTexture                 texture  float4          2d    3        1
                // g_WaterNormalMapTexture           texture  float4          2d    4        1
                // cb0                               cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float       
                // ORIGIN                   0    yz         0     NONE   float    yz 
                // SV_TessFactor            1   x           1 QUADEDGE   float       
                // SIZE                     0    yz         1     NONE   float    yz 
                // SV_TessFactor            2   x           2 QUADEDGE   float       
                // SV_TessFactor            3   x           3 QUADEDGE   float       
                // SV_InsideTessFactor      0   x           4  QUADINT   float       
                // SV_InsideTessFactor      1   x           5  QUADINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // DUMMY                    0   x           0     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 1   xyz         3     NONE   float   xyz 
                // TEXCOORD                 2   xyzw        4     NONE   float   xyzw
                // TEXCOORD                 3   xyzw        5     NONE   float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           1
                //
                ds_5_0
                dcl_input_control_point_count 1
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input vpc0.yz
                dcl_input vpc1.yz
                dcl_input vDomain.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_temps 12
                //
                // Initial variable locations:
                //   vpc0.y <- input.origin.x; vpc0.z <- input.origin.y; 
                //   vpc1.y <- input.size.x; vpc1.z <- input.size.y; 
                //   vpc0.x <- input.Edges[0]; 
                //   vpc1.x <- input.Edges[1]; 
                //   vpc2.x <- input.Edges[2]; 
                //   vpc3.x <- input.Edges[3]; 
                //   vpc4.x <- input.Inside[0]; 
                //   vpc5.x <- input.Inside[1]; 
                //   vDomain.x <- uv.x; vDomain.y <- uv.y; 
                //   o5.x <- <HeightFieldPatchDS return value>.depthmap_scaler.x; o5.y <- <HeightFieldPatchDS return value>.depthmap_scaler.y; o5.z <- <HeightFieldPatchDS return value>.depthmap_scaler.z; o5.w <- <HeightFieldPatchDS return value>.depthmap_scaler.w; 
                //   o4.x <- <HeightFieldPatchDS return value>.layerdef.x; o4.y <- <HeightFieldPatchDS return value>.layerdef.y; o4.z <- <HeightFieldPatchDS return value>.layerdef.z; o4.w <- <HeightFieldPatchDS return value>.layerdef.w; 
                //   o3.x <- <HeightFieldPatchDS return value>.positionWS.x; o3.y <- <HeightFieldPatchDS return value>.positionWS.y; o3.z <- <HeightFieldPatchDS return value>.positionWS.z; 
                //   o2.x <- <HeightFieldPatchDS return value>.normal.x; o2.y <- <HeightFieldPatchDS return value>.normal.y; o2.z <- <HeightFieldPatchDS return value>.normal.z; 
                //   o1.x <- <HeightFieldPatchDS return value>.texcoord.x; o1.y <- <HeightFieldPatchDS return value>.texcoord.y; 
                //   o0.x <- <HeightFieldPatchDS return value>.position.x; o0.y <- <HeightFieldPatchDS return value>.position.y; o0.z <- <HeightFieldPatchDS return value>.position.z; o0.w <- <HeightFieldPatchDS return value>.position.w; 
                //   vicp[0][0].x <- inputPatch
                //
                #line 415 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                mul r0.xy, vpc1.yzyy, vDomain.xyxx
                add r0.xy, r0.xyxx, vpc0.yzyy
                div r0.xy, r0.xyxx, cb0[38].zzzz  // r0.x <- texcoord0to1.x; r0.y <- texcoord0to1.y
                
                #line 425
                itof r0.w, l(1)
                mov r0.y, -r0.y
                add r0.z, r0.y, r0.w  // r0.z <- texcoord0to1.y
                
                #line 428
                itof r0.y, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xzxx, t0.yzxw, s0, r0.y  // r1.z <- base_texvalue.x; r1.x <- base_texvalue.y
                mov r1.xyzw, r1.xyzw  // r1.y <- base_texvalue.z; r1.w <- base_texvalue.w
                mov r2.xyw, r1.zxzy  // r2.x <- base_normal.x; r2.y <- base_normal.y; r2.w <- base_normal.z
                mov r1.y, -r2.w  // r1.y <- base_normal.z
                mov r2.z, r1.y  // r2.z <- base_normal.z
                mul r0.yw, vpc1.yyyz, vDomain.xxxy
                add r3.xz, r0.yywy, vpc0.yyzy  // r3.x <- vertexPosition.x; r3.z <- vertexPosition.z
                mov r3.y, r1.w  // r3.y <- vertexPosition.y
                
                #line 435
                mov r4.xyz, -r3.xyzx
                add r4.xyz, r4.xyzx, cb0[23].xyzx
                dp3 r0.y, r4.xyzx, r4.xyzx
                sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                nop 
                mov r0.y, r0.y
                
                #line 177
                itof r0.w, l(128)
                nop 
                mov r0.y, r0.y
                
                #line 170
                itof r1.w, l(1)
                mul r2.w, r0.y, l(0.015000)
                div r1.w, r1.w, r2.w
                mul r1.w, r1.w, cb0[0].w
                mov r2.w, -cb0[1].x
                add r1.w, r1.w, r2.w
                mul r1.w, r1.w, cb0[0].y
                add r1.w, r1.w, cb0[1].x  // r1.w <- <CalculateTessellationFactor return value>
                
                #line 177
                div r0.w, r0.w, r1.w
                log r0.w, r0.w  // r0.w <- <CalculateMIPLevelForDisplacementTextures return value>
                
                #line 436
                mov r0.w, r0.w  // r0.w <- detailmap_miplevel
                
                #line 439
                itof r1.w, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r0.xzxx, t1.xyzw, s0, r1.w  // r4.x <- layerdef.x; r4.y <- layerdef.y; r4.z <- layerdef.z; r4.w <- layerdef.w
                
                #line 442
                mul r5.xy, r0.xzxx, cb0[29].yzyy
                sample_l_indexable(texture2d)(float,float,float,float) r5.xyzw, r5.xyxx, t3.xzyw, s0, r0.w
                mov r5.xyzw, r5.xyzw  // r5.x <- detail_texvalue.x; r5.y <- detail_texvalue.y; r5.z <- detail_texvalue.z; r5.w <- detail_texvalue.w
                itof r6.xyz, l(2, 2, 2, 0)
                mul r5.xyz, r5.xyzx, r6.xyzx
                itof r6.xyz, l(1, 0, 1, 0)
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- detail_normal.x; r5.y <- detail_normal.y; r5.z <- detail_normal.z
                mov r1.w, l(-0.500000)
                add r1.w, r1.w, r5.w
                mul r1.w, r1.w, cb0[29].w  // r1.w <- detail_height
                
                #line 447
                mul r6.xy, r0.xzxx, cb0[28].zwzz
                sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r6.xyxx, t2.xzyw, s0, r0.w
                mov r6.xyzw, r6.xyzw  // r6.x <- detail_texvalue.x; r6.y <- detail_texvalue.y; r6.z <- detail_texvalue.z; r6.w <- detail_texvalue.w
                itof r7.xyz, l(2, 2, 2, 0)
                mul r6.xyz, r6.xyzx, r7.xyzx
                itof r7.xz, l(1, 0, 1, 0)
                mov r7.y, l(1.400000)
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx
                dp3 r0.w, r6.xyzx, r6.xyzx
                rsq r0.w, r0.w
                mul r6.xyz, r0.wwww, r6.xyzx
                mov r7.xyz, -r5.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx
                mul r6.xyz, r4.wwww, r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                mov r0.w, l(-0.500000)
                add r0.w, r0.w, r6.w
                mul r0.w, r0.w, cb0[29].x
                mov r2.w, -r1.w
                add r0.w, r0.w, r2.w
                mul r0.w, r0.w, r4.w
                add r6.z, r0.w, r1.w  // r6.z <- detail_height
                
                #line 452
                mul r7.xyz, r2.xyzx, r6.zzzz
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 455
                mov r2.xyz, r2.xyzx  // r2.x <- normal_rotation_matrix._m10; r2.y <- normal_rotation_matrix._m11; r2.z <- normal_rotation_matrix._m12
                mul r7.xyz, r1.xyzx, l(-1.000000, 0.000000, 0.000000, 0.000000)
                mul r8.xyz, r1.zxyz, l(0.000000, 0.000000, -1.000000, 0.000000)
                mov r8.xyz, -r8.xyzx
                add r7.xyz, r7.xyzx, r8.xyzx
                dp3 r0.w, r7.xyzx, r7.xyzx
                rsq r0.w, r0.w
                mul r7.xyz, r0.wwww, r7.yzxy  // r7.x <- normal_rotation_matrix._m20; r7.y <- normal_rotation_matrix._m21; r7.z <- normal_rotation_matrix._m22
                mul r8.xyz, r1.yzxy, r7.yzxy
                mul r1.xyz, r1.xyzx, r7.zxyz
                mov r1.xyz, -r1.xyzx
                add r1.xyz, r1.xyzx, r8.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- normal_rotation_matrix._m00; r1.y <- normal_rotation_matrix._m01; r1.z <- normal_rotation_matrix._m02
                
                #line 460
                mul r1.xyz, r1.xyzx, r5.xxxx
                mul r2.xyz, r2.xyzx, r5.yyyy
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, r5.zzzz, r7.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- detail_normal_rotated.x; r1.y <- detail_normal_rotated.y; r1.z <- detail_normal_rotated.z
                
                #line 463
                itof r0.w, l(0)  // r0.w <- cc
                itof r1.w, l(0)
                eq r1.w, r1.w, cb0[2].x
                itof r2.x, l(0)
                lt r2.x, r2.x, cb0[0].x
                and r1.w, r1.w, r2.x
                if_nz r1.w
                  nop 
                  mov r3.xyz, r3.xyzx
                
                #line 254
                  mov r1.w, l(0.200000)  // r1.w <- m
                  itof r2.x, l(0)  // r2.x <- cc
                  mov r2.y, l(0.150000)  // r2.y <- k
                  mov r2.z, -r3.y
                  add r2.z, r2.z, l(0.500000)  // r2.z <- water_depth
                  mov r5.xyz, -r3.xyzx
                  add r5.xyz, r5.xyzx, cb0[25].xyzx
                  dp3 r2.w, r5.xyzx, r5.xyzx
                  rsq r2.w, r2.w
                  mul r5.xyz, r2.wwww, r5.xyzx  // r5.x <- pixel_to_light_vector.x; r5.y <- pixel_to_light_vector.y; r5.z <- pixel_to_light_vector.z
                  mul r7.xy, r3.yyyy, r5.xzxx
                  mov r7.xy, -r7.xyxx
                  add r7.xy, r3.xzxx, r7.xyxx  // r7.x <- worldpos.x; r7.y <- worldpos.z
                  mul r8.xyz, r2.zzzz, r5.xyzx  // r8.x <- pixel_to_water_surface_vector.x; r8.y <- pixel_to_water_surface_vector.y; r8.z <- pixel_to_water_surface_vector.z
                
                #line 266
                  itof r2.w, l(-3)  // r2.w <- i
                  mov r0.w, r2.x  // r0.w <- cc
                  mov r5.w, r2.w  // r5.w <- i
                  loop 
                    itof r7.z, l(3)
                    ge r7.z, r7.z, r5.w
                    breakc_z r7.z
                    itof r7.z, l(-3)  // r7.z <- j
                    mov r9.x, r0.w  // r9.x <- cc
                    mov r9.y, r7.z  // r9.y <- j
                    loop 
                      itof r7.w, l(3)
                      ge r7.w, r7.w, r9.y
                      breakc_z r7.w
                      mov r9.zw, -cb0[23].xxxz
                      add r9.zw, r7.xxxy, r9.zzzw
                      mov r10.xy, l(-200.000000,-200.000000,-0.000000,-0.000000)
                      add r9.zw, r9.zzzw, r10.xxxy
                      mul r10.x, r2.y, r5.w
                      mul r10.y, r2.y, r9.y
                      mul r10.xy, r1.wwww, r10.xyxx
                      mul r10.xy, r2.zzzz, r10.xyxx
                      add r9.zw, r9.zzzw, r10.xxxy
                      div r9.zw, r9.zzzw, l(0.000000, 0.000000, 400.000000, 400.000000)
                      itof r7.w, l(0)
                      sample_l_indexable(texture2d)(float,float,float,float) r9.zw, r9.zwzz, t4.ywxz, s0, r7.w
                      mul r9.zw, r9.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000)
                      mov r10.xy, l(-1.000000,-1.000000,-0.000000,-0.000000)
                      add r9.zw, r9.zzzw, r10.xxxy  // r9.z <- n.x; r9.w <- n.z
                      mul r10.x, r2.y, r5.w
                      mul r10.z, r2.y, r9.y
                      itof r10.y, l(0)
                      add r10.xyz, r8.xyzx, r10.xyzx
                      mul r10.xyz, r1.wwww, r10.xyzx
                      itof r7.w, l(0)
                      mul r11.xz, r9.zzwz, l(0.500000, 0.000000, 0.500000, 0.000000)
                      mul r11.y, r7.w, l(0.500000)
                      mov r11.xyz, -r11.xyzx
                      add r10.xyz, r10.xyzx, r11.xyzx  // r10.x <- refracted_pixel_to_light_vector.x; r10.y <- refracted_pixel_to_light_vector.y; r10.z <- refracted_pixel_to_light_vector.z
                      itof r7.w, l(0)
                      itof r8.w, l(0)
                      dp3 r9.z, r10.xyzx, r10.xyzx
                      rsq r9.z, r9.z
                      mul r10.xyz, r9.zzzz, r10.xyzx
                      dp3 r9.z, r5.xyzx, r5.xyzx
                      rsq r9.z, r9.z
                      mul r11.xyz, r5.xyzx, r9.zzzz
                      dp3 r9.z, r10.xyzx, r11.xyzx
                      max r8.w, r8.w, r9.z
                      log r8.w, r8.w
                      mul r8.w, r8.w, l(500.000000)
                      exp r8.w, r8.w
                      max r7.w, r7.w, r8.w
                      mul r7.w, r7.w, l(0.050000)
                      add r9.x, r7.w, r9.x
                      itof r7.w, l(1)
                      add r9.y, r7.w, r9.y
                    endloop 
                    mov r0.w, r9.x  // r0.w <- cc
                    itof r7.z, l(1)
                    add r5.w, r5.w, r7.z
                  endloop 
                  mov r0.w, r0.w  // r0.w <- <CalculateWaterCausticIntensity return value>
                
                #line 467
                  mov r0.w, r0.w  // r0.w <- cc
                endif 
                
                #line 471
                add r0.y, r0.y, l(200.000000)
                div r0.y, l(200.000000), r0.y
                mul r0.y, r0.y, r0.w  // r0.y <- cc
                
                #line 474
                itof r0.w, l(1)
                itof r1.w, l(0)
                mov r2.x, -cb0[31].z
                mov r2.y, -r3.y
                add r2.x, r2.y, r2.x
                max r1.w, r1.w, r2.x
                min r0.w, r0.w, r1.w
                mul r6.w, r0.w, r0.y  // r6.w <- cc
                
                #line 478
                mov r3.w, l(1.000000)
                dp4 r2.x, r3.xyzw, cb0[7].xyzw  // r2.x <- output.position.x
                dp4 r2.y, r3.xyzw, cb0[8].xyzw  // r2.y <- output.position.y
                dp4 r2.z, r3.xyzw, cb0[9].xyzw  // r2.z <- output.position.z
                dp4 r2.w, r3.xyzw, cb0[10].xyzw  // r2.w <- output.position.w
                mul r0.xy, r0.xzxx, cb0[28].xyxx  // r0.x <- output.texcoord.x; r0.y <- output.texcoord.y
                mov r1.xyz, r1.xyzx  // r1.x <- output.normal.x; r1.y <- output.normal.y; r1.z <- output.normal.z
                mov r3.xyz, r3.xyzx  // r3.x <- output.positionWS.x; r3.y <- output.positionWS.y; r3.z <- output.positionWS.z
                mov r4.xyzw, r4.xyzw  // r4.x <- output.layerdef.x; r4.y <- output.layerdef.y; r4.z <- output.layerdef.z; r4.w <- output.layerdef.w
                mov r6.xy, l(1.000000,1.000000,0,0)
                mov r6.xyzw, r6.xyzw  // r6.x <- output.depthmap_scaler.x; r6.y <- output.depthmap_scaler.y; r6.z <- output.depthmap_scaler.z; r6.w <- output.depthmap_scaler.w
                mov o0.xyzw, r2.xyzw
                mov o4.xyzw, r4.xyzw
                mov o5.xyzw, r6.xyzw
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r3.xyzx
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 213 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cb0
                // {
                //
                //   float g_RenderCaustics;            // Offset:    0 Size:     4 [unused]
                //   float g_UseDynamicLOD;             // Offset:    4 Size:     4 [unused]
                //   float g_FrustumCullInHS;           // Offset:    8 Size:     4 [unused]
                //   float g_DynamicTessFactor;         // Offset:   12 Size:     4 [unused]
                //   float g_StaticTessFactor;          // Offset:   16 Size:     4 [unused]
                //   float g_TerrainBeingRendered;      // Offset:   20 Size:     4 [unused]
                //   float g_HalfSpaceCullSign;         // Offset:   24 Size:     4
                //   float g_HalfSpaceCullPosition;     // Offset:   28 Size:     4
                //   float g_SkipCausticsCalculation;   // Offset:   32 Size:     4 [unused]
                //   int g_MSSamples;                   // Offset:   36 Size:     4 [unused]
                //   float4x4 g_ModelViewMatrix;        // Offset:   48 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrix;// Offset:  112 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrixInv;// Offset:  176 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrix;// Offset:  240 Size:    64
                //   float4x4 g_LightModelViewProjectionMatrixInv;// Offset:  304 Size:    64 [unused]
                //   float3 g_CameraPosition;           // Offset:  368 Size:    12
                //   float3 g_CameraDirection;          // Offset:  384 Size:    12 [unused]
                //   float3 g_LightPosition;            // Offset:  400 Size:    12
                //   float2 g_WaterBumpTexcoordShift;   // Offset:  416 Size:     8 [unused]
                //   float2 g_ScreenSizeInv;            // Offset:  424 Size:     8 [unused]
                //   float g_MainBufferSizeMultiplier;  // Offset:  432 Size:     4 [unused]
                //   float g_ZNear;                     // Offset:  436 Size:     4 [unused]
                //   float g_ZFar;                      // Offset:  440 Size:     4 [unused]
                //   float2 g_DiffuseTexcoordScale;     // Offset:  448 Size:     8 [unused]
                //      = 0x43020000 0x43020000 
                //   float2 g_RockBumpTexcoordScale;    // Offset:  456 Size:     8 [unused]
                //      = 0x41200000 0x41200000 
                //   float g_RockBumpHeightScale;       // Offset:  464 Size:     4 [unused]
                //      = 0x40400000 
                //   float2 g_SandBumpTexcoordScale;    // Offset:  468 Size:     8 [unused]
                //      = 0x40600000 0x40600000 
                //   float g_SandBumpHeightScale;       // Offset:  476 Size:     4 [unused]
                //      = 0x3f000000 
                //   float g_TerrainSpecularIntensity;  // Offset:  480 Size:     4 [unused]
                //      = 0x3f000000 
                //   float2 g_WaterMicroBumpTexcoordScale;// Offset:  484 Size:     8 [unused]
                //      = 0x43610000 0x43610000 
                //   float2 g_WaterBumpTexcoordScale;   // Offset:  496 Size:     8 [unused]
                //      = 0x40e00000 0x40e00000 
                //   float g_WaterHeightBumpScale;      // Offset:  504 Size:     4 [unused]
                //      = 0x3f800000 
                //   float3 g_WaterDeepColor;           // Offset:  512 Size:    12 [unused]
                //      = 0x3dcccccd 0x3ecccccd 0x3f333333 
                //   float3 g_WaterScatterColor;        // Offset:  528 Size:    12 [unused]
                //      = 0x3e99999a 0x3f333333 0x3f19999a 
                //   float3 g_WaterSpecularColor;       // Offset:  544 Size:    12 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 
                //   float g_WaterSpecularIntensity;    // Offset:  556 Size:     4 [unused]
                //      = 0x43af0000 
                //   float g_WaterSpecularPower;        // Offset:  560 Size:     4 [unused]
                //      = 0x447a0000 
                //   float2 g_WaterColorIntensity;      // Offset:  564 Size:     8 [unused]
                //      = 0x3dcccccd 0x3e4ccccd 
                //   float3 g_AtmosphereBrightColor;    // Offset:  576 Size:    12
                //      = 0x3f800000 0x3f8ccccd 0x3fb33333 
                //   float3 g_AtmosphereDarkColor;      // Offset:  592 Size:    12
                //      = 0x3f19999a 0x3f19999a 0x3f333333 
                //   float g_FogDensity;                // Offset:  604 Size:     4
                //      = 0x3abb3ee7 
                //   float2 g_HeightFieldOrigin;        // Offset:  608 Size:     8 [unused]
                //      = 0x00000000 0x00000000 
                //   float g_HeightFieldSize;           // Offset:  616 Size:     4 [unused]
                //      = 0x44000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropicWrap            sampler      NA          NA    0        1
                // SamplerDepthAnisotropic         sampler_c      NA          NA    1        1
                // g_RockMicroBumpTexture            texture  float4          2d    0        1
                // g_RockDiffuseTexture              texture  float4          2d    1        1
                // g_SandMicroBumpTexture            texture  float4          2d    2        1
                // g_SandDiffuseTexture              texture  float4          2d    3        1
                // g_GrassDiffuseTexture             texture  float4          2d    4        1
                // g_SlopeDiffuseTexture             texture  float4          2d    5        1
                // g_DepthTexture                    texture  float4          2d    6        1
                // cb0                               cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 1   xyz         3     NONE   float   xyz 
                // TEXCOORD                 2   xyzw        4     NONE   float    yzw
                // TEXCOORD                 3   xyzw        5     NONE   float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_4_0
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_resource_texture2d (float,float,float,float) t6
                dcl_input_ps linear centroid v1.xy
                dcl_input_ps linear centroid v2.xyz
                dcl_input_ps linear centroid v3.xyz
                dcl_input_ps linear centroid v4.yzw
                dcl_input_ps linear centroid v5.zw
                dcl_output o0.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
                //   v1.x <- input.texcoord.x; v1.y <- input.texcoord.y; 
                //   v2.x <- input.normal.x; v2.y <- input.normal.y; v2.z <- input.normal.z; 
                //   v3.x <- input.positionWS.x; v3.y <- input.positionWS.y; v3.z <- input.positionWS.z; 
                //   v4.x <- input.layerdef.x; v4.y <- input.layerdef.y; v4.z <- input.layerdef.z; v4.w <- input.layerdef.w; 
                //   v5.x <- input.depthmap_scaler.x; v5.y <- input.depthmap_scaler.y; v5.z <- input.depthmap_scaler.z; v5.w <- input.depthmap_scaler.w; 
                //   o0.x <- <HeightFieldPatchPS return value>.x; o0.y <- <HeightFieldPatchPS return value>.y; o0.z <- <HeightFieldPatchPS return value>.z; o0.w <- <HeightFieldPatchPS return value>.w
                //
                #line 491 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                mov r0.xyz, -v3.xyzx
                add r0.xyz, r0.xyzx, cb0[25].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- pixel_to_light_vector.x; r0.y <- pixel_to_light_vector.y; r0.z <- pixel_to_light_vector.z
                mov r1.xyz, -v3.xyzx
                add r1.xyz, r1.xyzx, cb0[23].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- pixel_to_eye_vector.x; r1.y <- pixel_to_eye_vector.y; r1.z <- pixel_to_eye_vector.z
                
                #line 498
                mov r0.w, -cb0[1].w
                add r0.w, r0.w, v3.y
                mul r0.w, r0.w, cb0[1].z
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 501
                itof r2.xyz, l(2, 2, 2, 0)
                sample r3.xyzw, v1.xyxx, t2.xyzw, s0
                mul r2.xyz, r2.xyzx, r3.xzyx
                mov r3.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r2.xyz, r2.xyzx, r3.xyzx
                dp3 r0.w, r2.xyzx, r2.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, r2.xyzx  // r2.x <- microbump_normal.x; r2.y <- microbump_normal.y; r2.z <- microbump_normal.z
                itof r3.xyz, l(2, 2, 2, 0)
                sample r4.xyzw, v1.xyxx, t0.xyzw, s0
                mul r3.xyz, r3.xyzx, r4.xzyx
                mov r4.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r4.xyzx
                mov r4.xyz, -r2.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r3.xyz, r3.xyzx, v4.wwww
                add r2.xyz, r2.xyzx, r3.xyzx
                dp3 r0.w, r2.xyzx, r2.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, r2.xyzx  // r2.x <- microbump_normal.x; r2.y <- microbump_normal.y; r2.z <- microbump_normal.z
                
                #line 505
                mov r3.xyz, v2.xyzx  // r3.x <- normal_rotation_matrix._m10; r3.y <- normal_rotation_matrix._m11; r3.z <- normal_rotation_matrix._m12
                mul r4.xyz, v2.yzxy, l(-1.000000, 0.000000, 0.000000, 0.000000)
                mul r5.xyz, v2.xyzx, l(0.000000, 0.000000, -1.000000, 0.000000)
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.yzxy  // r4.x <- normal_rotation_matrix._m20; r4.y <- normal_rotation_matrix._m21; r4.z <- normal_rotation_matrix._m22
                mul r5.xyz, r4.yzxy, v2.zxyz
                mul r6.xyz, r4.zxyz, v2.yzxy
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- normal_rotation_matrix._m00; r5.y <- normal_rotation_matrix._m01; r5.z <- normal_rotation_matrix._m02
                mul r5.xyz, r2.xxxx, r5.xyzx
                mul r2.xyw, r2.yyyy, r3.xyxz
                add r2.xyw, r2.xyxw, r5.xyxz
                mul r3.xyz, r2.zzzz, r4.xyzx
                add r2.xyz, r2.xywx, r3.xyzx  // r2.x <- microbump_normal.x; r2.y <- microbump_normal.y
                
                #line 511
                sample r3.xyzw, v1.xyxx, t5.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- color.x; r3.y <- color.y; r3.z <- color.z
                sample r4.xyzw, v1.xyxx, t3.xyzw, s0
                mul r0.w, v4.y, v4.y
                mov r5.xyz, -r3.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                mul r4.xyz, r0.wwww, r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                sample r4.xyzw, v1.xyxx, t1.xyzw, s0
                mul r0.w, v4.w, v4.w
                mov r5.xyz, -r3.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                mul r4.xyz, r0.wwww, r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                sample r4.xyzw, v1.xyxx, t4.xyzw, s0
                mov r5.xyz, -r3.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                mul r4.xyz, r4.xyzx, v4.zzzz
                add r3.xyz, r3.xyzx, r4.xyzx
                
                #line 517
                div r0.w, v5.z, l(3.000000)
                add r0.w, r0.w, l(0.500000)
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)
                mul r0.w, r0.w, l(0.500000)
                add r0.w, r0.w, l(0.500000)
                mul r3.xyz, r0.wwww, r3.xyzx
                
                #line 520
                itof r4.w, l(1)
                mov r4.xyz, v3.xyzx
                dp4 r5.x, r4.xyzw, cb0[15].xyzw  // r5.x <- positionLS.x
                dp4 r5.y, r4.xyzw, cb0[16].xyzw  // r5.y <- positionLS.y
                dp4 r5.z, r4.xyzw, cb0[17].xyzw  // r5.z <- positionLS.z
                dp4 r0.w, r4.xyzw, cb0[18].xyzw  // r0.w <- positionLS.w
                div r4.xyz, r5.xyzx, r0.wwww  // r4.x <- positionLS.x; r4.y <- positionLS.y; r4.z <- positionLS.z
                itof r0.w, l(1)
                add r0.w, r0.w, r4.x
                mul r5.x, r0.w, l(0.500000)  // r5.x <- positionLS.x
                itof r0.w, l(1)
                mov r1.w, -r4.y
                add r0.w, r0.w, r1.w
                mul r5.y, r0.w, l(0.500000)  // r5.y <- positionLS.y
                
                #line 527
                mov r6.y, l(0.000183)  // r6.y <- dsf
                mul r0.w, r4.z, l(0.995000)
                sample_c r0.w, r5.xyxx, t6.xxxx, s1, r0.w
                mul r0.w, r0.w, l(0.200000)  // r0.w <- shadow_factor
                add r4.xy, r5.xyxx, r6.yyyy
                mul r1.w, r4.z, l(0.995000)
                sample_c r1.w, r4.xyxx, t6.xxxx, s1, r1.w
                mul r1.w, r1.w, l(0.200000)
                add r0.w, r0.w, r1.w
                mov r6.x, -r6.y
                add r4.xy, r5.xyxx, r6.xyxx
                mul r1.w, r4.z, l(0.995000)
                sample_c r1.w, r4.xyxx, t6.xxxx, s1, r1.w
                mul r1.w, r1.w, l(0.200000)
                add r0.w, r0.w, r1.w
                mov r6.z, -r6.y
                add r4.xy, r5.xyxx, r6.yzyy
                mul r1.w, r4.z, l(0.995000)
                sample_c r1.w, r4.xyxx, t6.xxxx, s1, r1.w
                mul r1.w, r1.w, l(0.200000)
                add r0.w, r0.w, r1.w
                mov r4.x, -r6.y
                mov r4.y, -r6.y
                add r4.xy, r4.xyxx, r5.xyxx
                mul r1.w, r4.z, l(0.995000)
                sample_c r1.w, r4.xyxx, t6.xxxx, s1, r1.w
                mul r1.w, r1.w, l(0.200000)
                add r0.w, r0.w, r1.w
                itof r1.w, l(0)
                dp3 r2.w, r0.xyzx, r2.xyzx
                max r1.w, r1.w, r2.w
                mul r1.w, r0.w, r1.w
                add r1.w, r1.w, l(0.200000)
                mul r3.xyz, r1.wwww, r3.xyzx
                
                #line 537
                itof r1.w, l(0)
                itof r4.xyz, l(0, 1, 0, 0)
                dp3 r2.w, r4.xyzx, r2.xyzx
                max r1.w, r1.w, r2.w
                mul r1.w, r1.w, l(0.200000)
                add r1.w, r1.w, l(0.000000)
                mul r4.xyz, r1.wwww, l(0.200000, 0.200000, 0.300000, 0.000000)
                add r3.xyz, r3.xyzx, r4.xyzx
                
                #line 540
                itof r1.w, l(0)
                itof r2.w, l(1)
                mul r3.w, v3.y, l(0.500000)
                add r3.w, r3.w, l(0.500000)
                min r2.w, r2.w, r3.w
                max r1.w, r1.w, r2.w
                mul r1.w, r1.w, l(0.800000)
                add r1.w, r1.w, l(0.500000)
                mul r3.xyz, r1.wwww, r3.xyzx
                
                #line 545
                itof r1.w, l(0)
                dp3 r2.x, r0.xyzx, r2.xyzx
                mul r2.x, r2.x, l(0.600000)
                add r2.x, r2.x, l(0.400000)
                max r1.w, r1.w, r2.x
                mul r1.w, r1.w, v5.w
                mul r0.w, r0.w, l(0.600000)
                add r0.w, r0.w, l(0.400000)
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, l(1.000000)
                mul r2.xyz, r0.wwww, r3.xyzx  // r2.x <- color.x; r2.y <- color.y; r2.z <- color.z
                
                #line 548
                nop 
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 183
                mov r1.xyz, -r1.xyzx
                dp3 r0.x, r0.xyzx, r1.xyzx
                mul r0.x, r0.x, l(0.500000)
                add r0.x, r0.x, l(0.500000)
                mov r0.yzw, -cb0[37].xxyz
                add r0.yzw, r0.yyzw, cb0[36].xxyz
                mul r0.xyz, r0.yzwy, r0.xxxx
                add r0.xyz, r0.xyzx, cb0[37].xyzx  // r0.x <- <CalculateFogColor return value>.x; r0.y <- <CalculateFogColor return value>.y; r0.z <- <CalculateFogColor return value>.z
                
                #line 548
                itof r0.w, l(1)
                mov r1.xyz, -v3.xyzx
                add r1.xyz, r1.xyzx, cb0[23].xyzx
                dp3 r1.x, r1.xyzx, r1.xyzx
                sqrt r1.x, r1.x
                mov r1.x, -r1.x
                mul r1.x, r1.x, cb0[37].w
                mul r1.x, r1.x, l(1.442695)
                exp r1.x, r1.x
                min r0.w, r0.w, r1.x
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                mov r1.xyz, -v3.xyzx
                add r1.xyz, r1.xyzx, cb0[23].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- color.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 190 instruction slots used
                            
            };
        }

        pass Wireframe
        {
            RasterizerState = WireframeMS;
            DS_StencilRef = uint(0);
            DepthStencilState = DepthNormal;
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NoBlending;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // PATCH_PARAMETERS         0   xyzw        0     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // ORIGIN                   0   xy          0     NONE   float   xy  
                // SIZE                     0     zw        0     NONE   float     zw
                //
                vs_4_0
                dcl_input v0.xyzw
                dcl_output o0.xy
                dcl_output o0.zw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- PatchParams.x; v0.y <- PatchParams.y; v0.z <- PatchParams.z; v0.w <- PatchParams.w; 
                //   o0.x <- <PassThroughVS return value>.origin.x; o0.y <- <PassThroughVS return value>.origin.y; o0.z <- <PassThroughVS return value>.size.x; o0.w <- <PassThroughVS return value>.size.y
                //
                #line 326 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                mov r0.xy, v0.xyxx  // r0.x <- output.origin.x; r0.y <- output.origin.y
                mov r0.zw, v0.zzzw  // r0.z <- output.size.x; r0.w <- output.size.y
                mov o0.xy, r0.xyxx
                mov o0.zw, r0.zzzw
                ret 
                // Approximately 5 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cb0
                // {
                //
                //   float g_RenderCaustics;            // Offset:    0 Size:     4 [unused]
                //   float g_UseDynamicLOD;             // Offset:    4 Size:     4
                //   float g_FrustumCullInHS;           // Offset:    8 Size:     4
                //   float g_DynamicTessFactor;         // Offset:   12 Size:     4
                //   float g_StaticTessFactor;          // Offset:   16 Size:     4
                //   float g_TerrainBeingRendered;      // Offset:   20 Size:     4
                //   float g_HalfSpaceCullSign;         // Offset:   24 Size:     4 [unused]
                //   float g_HalfSpaceCullPosition;     // Offset:   28 Size:     4 [unused]
                //   float g_SkipCausticsCalculation;   // Offset:   32 Size:     4 [unused]
                //   int g_MSSamples;                   // Offset:   36 Size:     4 [unused]
                //   float4x4 g_ModelViewMatrix;        // Offset:   48 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrix;// Offset:  112 Size:    64
                //   float4x4 g_ModelViewProjectionMatrixInv;// Offset:  176 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrix;// Offset:  240 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrixInv;// Offset:  304 Size:    64 [unused]
                //   float3 g_CameraPosition;           // Offset:  368 Size:    12
                //   float3 g_CameraDirection;          // Offset:  384 Size:    12
                //   float3 g_LightPosition;            // Offset:  400 Size:    12 [unused]
                //   float2 g_WaterBumpTexcoordShift;   // Offset:  416 Size:     8 [unused]
                //   float2 g_ScreenSizeInv;            // Offset:  424 Size:     8 [unused]
                //   float g_MainBufferSizeMultiplier;  // Offset:  432 Size:     4 [unused]
                //   float g_ZNear;                     // Offset:  436 Size:     4 [unused]
                //   float g_ZFar;                      // Offset:  440 Size:     4 [unused]
                //   float2 g_DiffuseTexcoordScale;     // Offset:  448 Size:     8 [unused]
                //      = 0x43020000 0x43020000 
                //   float2 g_RockBumpTexcoordScale;    // Offset:  456 Size:     8 [unused]
                //      = 0x41200000 0x41200000 
                //   float g_RockBumpHeightScale;       // Offset:  464 Size:     4 [unused]
                //      = 0x40400000 
                //   float2 g_SandBumpTexcoordScale;    // Offset:  468 Size:     8 [unused]
                //      = 0x40600000 0x40600000 
                //   float g_SandBumpHeightScale;       // Offset:  476 Size:     4 [unused]
                //      = 0x3f000000 
                //   float g_TerrainSpecularIntensity;  // Offset:  480 Size:     4 [unused]
                //      = 0x3f000000 
                //   float2 g_WaterMicroBumpTexcoordScale;// Offset:  484 Size:     8 [unused]
                //      = 0x43610000 0x43610000 
                //   float2 g_WaterBumpTexcoordScale;   // Offset:  496 Size:     8 [unused]
                //      = 0x40e00000 0x40e00000 
                //   float g_WaterHeightBumpScale;      // Offset:  504 Size:     4 [unused]
                //      = 0x3f800000 
                //   float3 g_WaterDeepColor;           // Offset:  512 Size:    12 [unused]
                //      = 0x3dcccccd 0x3ecccccd 0x3f333333 
                //   float3 g_WaterScatterColor;        // Offset:  528 Size:    12 [unused]
                //      = 0x3e99999a 0x3f333333 0x3f19999a 
                //   float3 g_WaterSpecularColor;       // Offset:  544 Size:    12 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 
                //   float g_WaterSpecularIntensity;    // Offset:  556 Size:     4 [unused]
                //      = 0x43af0000 
                //   float g_WaterSpecularPower;        // Offset:  560 Size:     4 [unused]
                //      = 0x447a0000 
                //   float2 g_WaterColorIntensity;      // Offset:  564 Size:     8 [unused]
                //      = 0x3dcccccd 0x3e4ccccd 
                //   float3 g_AtmosphereBrightColor;    // Offset:  576 Size:    12 [unused]
                //      = 0x3f800000 0x3f8ccccd 0x3fb33333 
                //   float3 g_AtmosphereDarkColor;      // Offset:  592 Size:    12 [unused]
                //      = 0x3f19999a 0x3f19999a 0x3f333333 
                //   float g_FogDensity;                // Offset:  604 Size:     4 [unused]
                //      = 0x3abb3ee7 
                //   float2 g_HeightFieldOrigin;        // Offset:  608 Size:     8 [unused]
                //      = 0x00000000 0x00000000 
                //   float g_HeightFieldSize;           // Offset:  616 Size:     4
                //      = 0x44000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinearWrap                 sampler      NA          NA    0        1
                // g_HeightfieldTexture              texture  float4          2d    0        1
                // cb0                               cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float   x   
                // ORIGIN                   0    yz         0     NONE   float    yz 
                // SV_TessFactor            1   x           1 QUADEDGE   float   x   
                // SIZE                     0    yz         1     NONE   float    yz 
                // SV_TessFactor            2   x           2 QUADEDGE   float   x   
                // SV_TessFactor            3   x           3 QUADEDGE   float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT   float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // ORIGIN                   0   xy          0     NONE   float   xy  
                // SIZE                     0     zw        0     NONE   float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // DUMMY                    0   x           0     NONE   float   x   
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           1
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 1
                dcl_output_control_point_count 1
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                hs_control_point_phase 
                dcl_output o0.x
                //
                // Initial variable locations:
                //   o0.x <- <PatchHS return value>; 
                //   v[0][0].x <- inputPatch[0].origin.x; v[0][0].y <- inputPatch[0].origin.y; v[0][0].z <- inputPatch[0].size.x; v[0][0].w <- inputPatch[0].size.y
                //
                #line 404 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                itof o0.x, l(0)
                ret 
                hs_join_phase 
                dcl_input vicp[1][0].xy
                dcl_input vicp[1][0].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output o0.yz
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output o1.yz
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 5
                
                #line 337
                itof r0.x, l(0)  // r0.x <- inside_tessellation_factor
                itof r0.y, l(0)  // r0.y <- in_frustum
                mov r0.zw, vicp[0][0].xxxy  // r0.z <- output.origin.x; r0.w <- output.origin.y
                mov r1.xy, vicp[0][0].zwzz  // r1.x <- output.size.x; r1.y <- output.size.y
                div r1.zw, vicp[0][0].zzzw, l(0.000000, 0.000000, 2.000000, 2.000000)
                add r1.zw, r1.zzzw, vicp[0][0].xxxy
                div r2.xy, r1.zwzz, cb0[38].zzzz  // r2.x <- texcoord0to1.x; r2.y <- texcoord0to1.y
                itof r1.z, l(1)
                mov r1.w, -r2.y
                add r2.z, r1.w, r1.z  // r2.z <- texcoord0to1.y
                
                #line 347
                mul r1.z, l(0.500000), vicp[0][0].z
                add r3.x, r1.z, vicp[0][0].x  // r3.x <- patch_center.x
                itof r1.z, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r1.z, r2.xzxx, t0.xywz, s0, r1.z
                mul r3.y, r1.z, cb0[1].y  // r3.y <- patch_center.y
                mul r1.z, l(0.500000), vicp[0][0].w
                add r3.z, r1.z, vicp[0][0].y  // r3.z <- patch_center.z
                mov r2.xyz, -cb0[23].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- camera_to_patch_vector.x; r2.y <- camera_to_patch_vector.y; r2.z <- camera_to_patch_vector.z
                dp3 r1.z, r2.xyzx, cb0[24].xyzx
                mul r4.xyz, r1.zzzz, cb0[24].xyzx
                mov r2.xyz, -r2.xyzx
                add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- patch_to_camera_direction_vector.x; r2.y <- patch_to_camera_direction_vector.y; r2.z <- patch_to_camera_direction_vector.z
                dp3 r1.z, r2.xyzx, r2.xyzx
                rsq r1.z, r1.z
                mul r4.xyz, r1.zzzz, r2.xyzx
                itof r1.z, l(2)
                mul r1.z, r1.z, vicp[0][0].z
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w
                min r1.z, r1.w, r1.z
                mul r2.xyz, r1.zzzz, r4.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- patch_center_realigned.x; r2.y <- patch_center_realigned.y; r2.z <- patch_center_realigned.z
                mov r2.w, l(1.000000)
                dp4 r1.z, r2.xyzw, cb0[7].xyzw  // r1.z <- patch_screenspace_center.x
                dp4 r1.w, r2.xyzw, cb0[8].xyzw  // r1.w <- patch_screenspace_center.y
                dp4 r2.x, r2.xyzw, cb0[10].xyzw  // r2.x <- patch_screenspace_center.w
                div r2.y, r1.z, r2.x
                lt r2.y, l(-1.000000), r2.y
                div r1.z, r1.z, r2.x
                lt r1.z, r1.z, l(1.000000)
                and r1.z, r1.z, r2.y
                div r2.y, r1.w, r2.x
                lt r2.y, l(-1.000000), r2.y
                and r1.z, r1.z, r2.y
                div r1.w, r1.w, r2.x
                lt r1.w, r1.w, l(1.000000)
                and r1.z, r1.w, r1.z
                itof r1.w, l(0)
                lt r1.w, r1.w, r2.x
                and r1.z, r1.w, r1.z
                mov r2.xyz, -cb0[23].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w
                itof r2.x, l(2)
                mul r2.x, r2.x, vicp[0][0].z
                lt r1.w, r1.w, r2.x
                or r1.z, r1.w, r1.z
                if_nz r1.z
                
                #line 357
                  itof r0.y, l(1)
                endif 
                ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), r0.y
                itof r1.z, l(0)
                eq r1.z, r1.z, cb0[0].z
                or r0.y, r0.y, r1.z
                if_nz r0.y
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r2.y, l(0.500000), vicp[0][0].w
                  itof r2.x, l(0)
                  mov r2.xy, -r2.xyxx
                  add r1.zw, r1.zzzw, r2.xxxy
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r2.x, r0.y, cb0[1].x  // r2.x <- <CalculateTessellationFactor return value>
                
                #line 363
                  mov r2.x, r2.x  // r2.x <- tesselation_factor
                  mov r2.x, r2.x  // r2.x <- output.Edges[0]
                  add r0.x, r0.x, r2.x
                
                #line 368
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r3.x, l(0.500000), vicp[0][0].z
                  itof r3.y, l(0)
                  mov r2.zw, -r3.xxxy
                  add r1.zw, r1.zzzw, r2.zzzw
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r2.y, r0.y, cb0[1].x  // r2.y <- <CalculateTessellationFactor return value>
                
                #line 369
                  mov r2.y, r2.y  // r2.y <- tesselation_factor
                  mov r2.y, r2.y  // r2.y <- output.Edges[1]
                  add r0.x, r0.x, r2.y
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r3.y, l(0.500000), vicp[0][0].w
                  mov r3.x, vicp[0][0].z
                  mov r2.zw, -r3.xxxy
                  add r1.zw, r1.zzzw, r2.zzzw
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r3.x, r0.y, cb0[1].x  // r3.x <- <CalculateTessellationFactor return value>
                
                #line 374
                  mov r3.x, r3.x  // r3.x <- tesselation_factor
                  mov r3.x, r3.x  // r3.x <- output.Edges[2]
                  add r0.x, r0.x, r3.x
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r4.x, l(0.500000), vicp[0][0].z
                  mov r4.y, vicp[0][0].w
                  mov r2.zw, -r4.xxxy
                  add r1.zw, r1.zzzw, r2.zzzw
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r3.y, r0.y, cb0[1].x  // r3.y <- <CalculateTessellationFactor return value>
                
                #line 379
                  mov r3.y, r3.y  // r3.y <- tesselation_factor
                  mov r3.y, r3.y  // r3.y <- output.Edges[3]
                  add r0.x, r0.x, r3.y
                  mul r3.w, r0.x, l(0.250000)  // r3.w <- output.Inside[1]
                  mov r3.z, r3.w  // r3.z <- output.Inside[0]
                else   // Prior locations: r3.x <- patch_center.x; r3.y <- patch_center.y; r3.z <- patch_center.z
                
                #line 386
                  itof r2.x, l(-1)  // r2.x <- output.Edges[0]
                  itof r2.y, l(-1)  // r2.y <- output.Edges[1]
                  itof r3.x, l(-1)  // r3.x <- output.Edges[2]
                  itof r3.y, l(-1)  // r3.y <- output.Edges[3]
                  itof r3.z, l(-1)  // r3.z <- output.Inside[0]
                  itof r3.w, l(-1)  // r3.w <- output.Inside[1]
                endif 
                mov o0.yz, r0.zzwz
                mov o1.yz, r1.xxyx
                mov o0.x, r2.x
                mov o1.x, r2.y
                mov r3.xyzw, r3.xyzw  // r3.x <- <PatchConstantHS return value>.Edges[2]; r3.y <- <PatchConstantHS return value>.Edges[3]; r3.z <- <PatchConstantHS return value>.Inside[0]; r3.w <- <PatchConstantHS return value>.Inside[1]
                mov o2.x, r3.x
                mov o3.x, r3.y
                mov o4.x, r3.z
                mov o5.x, r3.w
                ret 
                // Approximately 173 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cb0
                // {
                //
                //   float g_RenderCaustics;            // Offset:    0 Size:     4
                //   float g_UseDynamicLOD;             // Offset:    4 Size:     4
                //   float g_FrustumCullInHS;           // Offset:    8 Size:     4 [unused]
                //   float g_DynamicTessFactor;         // Offset:   12 Size:     4
                //   float g_StaticTessFactor;          // Offset:   16 Size:     4
                //   float g_TerrainBeingRendered;      // Offset:   20 Size:     4 [unused]
                //   float g_HalfSpaceCullSign;         // Offset:   24 Size:     4 [unused]
                //   float g_HalfSpaceCullPosition;     // Offset:   28 Size:     4 [unused]
                //   float g_SkipCausticsCalculation;   // Offset:   32 Size:     4
                //   int g_MSSamples;                   // Offset:   36 Size:     4 [unused]
                //   float4x4 g_ModelViewMatrix;        // Offset:   48 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrix;// Offset:  112 Size:    64
                //   float4x4 g_ModelViewProjectionMatrixInv;// Offset:  176 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrix;// Offset:  240 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrixInv;// Offset:  304 Size:    64 [unused]
                //   float3 g_CameraPosition;           // Offset:  368 Size:    12
                //   float3 g_CameraDirection;          // Offset:  384 Size:    12 [unused]
                //   float3 g_LightPosition;            // Offset:  400 Size:    12
                //   float2 g_WaterBumpTexcoordShift;   // Offset:  416 Size:     8 [unused]
                //   float2 g_ScreenSizeInv;            // Offset:  424 Size:     8 [unused]
                //   float g_MainBufferSizeMultiplier;  // Offset:  432 Size:     4 [unused]
                //   float g_ZNear;                     // Offset:  436 Size:     4 [unused]
                //   float g_ZFar;                      // Offset:  440 Size:     4 [unused]
                //   float2 g_DiffuseTexcoordScale;     // Offset:  448 Size:     8
                //      = 0x43020000 0x43020000 
                //   float2 g_RockBumpTexcoordScale;    // Offset:  456 Size:     8
                //      = 0x41200000 0x41200000 
                //   float g_RockBumpHeightScale;       // Offset:  464 Size:     4
                //      = 0x40400000 
                //   float2 g_SandBumpTexcoordScale;    // Offset:  468 Size:     8
                //      = 0x40600000 0x40600000 
                //   float g_SandBumpHeightScale;       // Offset:  476 Size:     4
                //      = 0x3f000000 
                //   float g_TerrainSpecularIntensity;  // Offset:  480 Size:     4 [unused]
                //      = 0x3f000000 
                //   float2 g_WaterMicroBumpTexcoordScale;// Offset:  484 Size:     8 [unused]
                //      = 0x43610000 0x43610000 
                //   float2 g_WaterBumpTexcoordScale;   // Offset:  496 Size:     8 [unused]
                //      = 0x40e00000 0x40e00000 
                //   float g_WaterHeightBumpScale;      // Offset:  504 Size:     4
                //      = 0x3f800000 
                //   float3 g_WaterDeepColor;           // Offset:  512 Size:    12 [unused]
                //      = 0x3dcccccd 0x3ecccccd 0x3f333333 
                //   float3 g_WaterScatterColor;        // Offset:  528 Size:    12 [unused]
                //      = 0x3e99999a 0x3f333333 0x3f19999a 
                //   float3 g_WaterSpecularColor;       // Offset:  544 Size:    12 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 
                //   float g_WaterSpecularIntensity;    // Offset:  556 Size:     4 [unused]
                //      = 0x43af0000 
                //   float g_WaterSpecularPower;        // Offset:  560 Size:     4 [unused]
                //      = 0x447a0000 
                //   float2 g_WaterColorIntensity;      // Offset:  564 Size:     8 [unused]
                //      = 0x3dcccccd 0x3e4ccccd 
                //   float3 g_AtmosphereBrightColor;    // Offset:  576 Size:    12 [unused]
                //      = 0x3f800000 0x3f8ccccd 0x3fb33333 
                //   float3 g_AtmosphereDarkColor;      // Offset:  592 Size:    12 [unused]
                //      = 0x3f19999a 0x3f19999a 0x3f333333 
                //   float g_FogDensity;                // Offset:  604 Size:     4 [unused]
                //      = 0x3abb3ee7 
                //   float2 g_HeightFieldOrigin;        // Offset:  608 Size:     8 [unused]
                //      = 0x00000000 0x00000000 
                //   float g_HeightFieldSize;           // Offset:  616 Size:     4
                //      = 0x44000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinearWrap                 sampler      NA          NA    0        1
                // g_HeightfieldTexture              texture  float4          2d    0        1
                // g_LayerdefTexture                 texture  float4          2d    1        1
                // g_RockBumpTexture                 texture  float4          2d    2        1
                // g_SandBumpTexture                 texture  float4          2d    3        1
                // g_WaterNormalMapTexture           texture  float4          2d    4        1
                // cb0                               cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float       
                // ORIGIN                   0    yz         0     NONE   float    yz 
                // SV_TessFactor            1   x           1 QUADEDGE   float       
                // SIZE                     0    yz         1     NONE   float    yz 
                // SV_TessFactor            2   x           2 QUADEDGE   float       
                // SV_TessFactor            3   x           3 QUADEDGE   float       
                // SV_InsideTessFactor      0   x           4  QUADINT   float       
                // SV_InsideTessFactor      1   x           5  QUADINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // DUMMY                    0   x           0     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 1   xyz         3     NONE   float   xyz 
                // TEXCOORD                 2   xyzw        4     NONE   float   xyzw
                // TEXCOORD                 3   xyzw        5     NONE   float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           1
                //
                ds_5_0
                dcl_input_control_point_count 1
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input vpc0.yz
                dcl_input vpc1.yz
                dcl_input vDomain.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_temps 12
                //
                // Initial variable locations:
                //   vpc0.y <- input.origin.x; vpc0.z <- input.origin.y; 
                //   vpc1.y <- input.size.x; vpc1.z <- input.size.y; 
                //   vpc0.x <- input.Edges[0]; 
                //   vpc1.x <- input.Edges[1]; 
                //   vpc2.x <- input.Edges[2]; 
                //   vpc3.x <- input.Edges[3]; 
                //   vpc4.x <- input.Inside[0]; 
                //   vpc5.x <- input.Inside[1]; 
                //   vDomain.x <- uv.x; vDomain.y <- uv.y; 
                //   o5.x <- <HeightFieldPatchDS return value>.depthmap_scaler.x; o5.y <- <HeightFieldPatchDS return value>.depthmap_scaler.y; o5.z <- <HeightFieldPatchDS return value>.depthmap_scaler.z; o5.w <- <HeightFieldPatchDS return value>.depthmap_scaler.w; 
                //   o4.x <- <HeightFieldPatchDS return value>.layerdef.x; o4.y <- <HeightFieldPatchDS return value>.layerdef.y; o4.z <- <HeightFieldPatchDS return value>.layerdef.z; o4.w <- <HeightFieldPatchDS return value>.layerdef.w; 
                //   o3.x <- <HeightFieldPatchDS return value>.positionWS.x; o3.y <- <HeightFieldPatchDS return value>.positionWS.y; o3.z <- <HeightFieldPatchDS return value>.positionWS.z; 
                //   o2.x <- <HeightFieldPatchDS return value>.normal.x; o2.y <- <HeightFieldPatchDS return value>.normal.y; o2.z <- <HeightFieldPatchDS return value>.normal.z; 
                //   o1.x <- <HeightFieldPatchDS return value>.texcoord.x; o1.y <- <HeightFieldPatchDS return value>.texcoord.y; 
                //   o0.x <- <HeightFieldPatchDS return value>.position.x; o0.y <- <HeightFieldPatchDS return value>.position.y; o0.z <- <HeightFieldPatchDS return value>.position.z; o0.w <- <HeightFieldPatchDS return value>.position.w; 
                //   vicp[0][0].x <- inputPatch
                //
                #line 415 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                mul r0.xy, vpc1.yzyy, vDomain.xyxx
                add r0.xy, r0.xyxx, vpc0.yzyy
                div r0.xy, r0.xyxx, cb0[38].zzzz  // r0.x <- texcoord0to1.x; r0.y <- texcoord0to1.y
                
                #line 425
                itof r0.w, l(1)
                mov r0.y, -r0.y
                add r0.z, r0.y, r0.w  // r0.z <- texcoord0to1.y
                
                #line 428
                itof r0.y, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xzxx, t0.yzxw, s0, r0.y  // r1.z <- base_texvalue.x; r1.x <- base_texvalue.y
                mov r1.xyzw, r1.xyzw  // r1.y <- base_texvalue.z; r1.w <- base_texvalue.w
                mov r2.xyw, r1.zxzy  // r2.x <- base_normal.x; r2.y <- base_normal.y; r2.w <- base_normal.z
                mov r1.y, -r2.w  // r1.y <- base_normal.z
                mov r2.z, r1.y  // r2.z <- base_normal.z
                mul r0.yw, vpc1.yyyz, vDomain.xxxy
                add r3.xz, r0.yywy, vpc0.yyzy  // r3.x <- vertexPosition.x; r3.z <- vertexPosition.z
                mov r3.y, r1.w  // r3.y <- vertexPosition.y
                
                #line 435
                mov r4.xyz, -r3.xyzx
                add r4.xyz, r4.xyzx, cb0[23].xyzx
                dp3 r0.y, r4.xyzx, r4.xyzx
                sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                nop 
                mov r0.y, r0.y
                
                #line 177
                itof r0.w, l(128)
                nop 
                mov r0.y, r0.y
                
                #line 170
                itof r1.w, l(1)
                mul r2.w, r0.y, l(0.015000)
                div r1.w, r1.w, r2.w
                mul r1.w, r1.w, cb0[0].w
                mov r2.w, -cb0[1].x
                add r1.w, r1.w, r2.w
                mul r1.w, r1.w, cb0[0].y
                add r1.w, r1.w, cb0[1].x  // r1.w <- <CalculateTessellationFactor return value>
                
                #line 177
                div r0.w, r0.w, r1.w
                log r0.w, r0.w  // r0.w <- <CalculateMIPLevelForDisplacementTextures return value>
                
                #line 436
                mov r0.w, r0.w  // r0.w <- detailmap_miplevel
                
                #line 439
                itof r1.w, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r0.xzxx, t1.xyzw, s0, r1.w  // r4.x <- layerdef.x; r4.y <- layerdef.y; r4.z <- layerdef.z; r4.w <- layerdef.w
                
                #line 442
                mul r5.xy, r0.xzxx, cb0[29].yzyy
                sample_l_indexable(texture2d)(float,float,float,float) r5.xyzw, r5.xyxx, t3.xzyw, s0, r0.w
                mov r5.xyzw, r5.xyzw  // r5.x <- detail_texvalue.x; r5.y <- detail_texvalue.y; r5.z <- detail_texvalue.z; r5.w <- detail_texvalue.w
                itof r6.xyz, l(2, 2, 2, 0)
                mul r5.xyz, r5.xyzx, r6.xyzx
                itof r6.xyz, l(1, 0, 1, 0)
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- detail_normal.x; r5.y <- detail_normal.y; r5.z <- detail_normal.z
                mov r1.w, l(-0.500000)
                add r1.w, r1.w, r5.w
                mul r1.w, r1.w, cb0[29].w  // r1.w <- detail_height
                
                #line 447
                mul r6.xy, r0.xzxx, cb0[28].zwzz
                sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r6.xyxx, t2.xzyw, s0, r0.w
                mov r6.xyzw, r6.xyzw  // r6.x <- detail_texvalue.x; r6.y <- detail_texvalue.y; r6.z <- detail_texvalue.z; r6.w <- detail_texvalue.w
                itof r7.xyz, l(2, 2, 2, 0)
                mul r6.xyz, r6.xyzx, r7.xyzx
                itof r7.xz, l(1, 0, 1, 0)
                mov r7.y, l(1.400000)
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx
                dp3 r0.w, r6.xyzx, r6.xyzx
                rsq r0.w, r0.w
                mul r6.xyz, r0.wwww, r6.xyzx
                mov r7.xyz, -r5.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx
                mul r6.xyz, r4.wwww, r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                mov r0.w, l(-0.500000)
                add r0.w, r0.w, r6.w
                mul r0.w, r0.w, cb0[29].x
                mov r2.w, -r1.w
                add r0.w, r0.w, r2.w
                mul r0.w, r0.w, r4.w
                add r6.z, r0.w, r1.w  // r6.z <- detail_height
                
                #line 452
                mul r7.xyz, r2.xyzx, r6.zzzz
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 455
                mov r2.xyz, r2.xyzx  // r2.x <- normal_rotation_matrix._m10; r2.y <- normal_rotation_matrix._m11; r2.z <- normal_rotation_matrix._m12
                mul r7.xyz, r1.xyzx, l(-1.000000, 0.000000, 0.000000, 0.000000)
                mul r8.xyz, r1.zxyz, l(0.000000, 0.000000, -1.000000, 0.000000)
                mov r8.xyz, -r8.xyzx
                add r7.xyz, r7.xyzx, r8.xyzx
                dp3 r0.w, r7.xyzx, r7.xyzx
                rsq r0.w, r0.w
                mul r7.xyz, r0.wwww, r7.yzxy  // r7.x <- normal_rotation_matrix._m20; r7.y <- normal_rotation_matrix._m21; r7.z <- normal_rotation_matrix._m22
                mul r8.xyz, r1.yzxy, r7.yzxy
                mul r1.xyz, r1.xyzx, r7.zxyz
                mov r1.xyz, -r1.xyzx
                add r1.xyz, r1.xyzx, r8.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- normal_rotation_matrix._m00; r1.y <- normal_rotation_matrix._m01; r1.z <- normal_rotation_matrix._m02
                
                #line 460
                mul r1.xyz, r1.xyzx, r5.xxxx
                mul r2.xyz, r2.xyzx, r5.yyyy
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, r5.zzzz, r7.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- detail_normal_rotated.x; r1.y <- detail_normal_rotated.y; r1.z <- detail_normal_rotated.z
                
                #line 463
                itof r0.w, l(0)  // r0.w <- cc
                itof r1.w, l(0)
                eq r1.w, r1.w, cb0[2].x
                itof r2.x, l(0)
                lt r2.x, r2.x, cb0[0].x
                and r1.w, r1.w, r2.x
                if_nz r1.w
                  nop 
                  mov r3.xyz, r3.xyzx
                
                #line 254
                  mov r1.w, l(0.200000)  // r1.w <- m
                  itof r2.x, l(0)  // r2.x <- cc
                  mov r2.y, l(0.150000)  // r2.y <- k
                  mov r2.z, -r3.y
                  add r2.z, r2.z, l(0.500000)  // r2.z <- water_depth
                  mov r5.xyz, -r3.xyzx
                  add r5.xyz, r5.xyzx, cb0[25].xyzx
                  dp3 r2.w, r5.xyzx, r5.xyzx
                  rsq r2.w, r2.w
                  mul r5.xyz, r2.wwww, r5.xyzx  // r5.x <- pixel_to_light_vector.x; r5.y <- pixel_to_light_vector.y; r5.z <- pixel_to_light_vector.z
                  mul r7.xy, r3.yyyy, r5.xzxx
                  mov r7.xy, -r7.xyxx
                  add r7.xy, r3.xzxx, r7.xyxx  // r7.x <- worldpos.x; r7.y <- worldpos.z
                  mul r8.xyz, r2.zzzz, r5.xyzx  // r8.x <- pixel_to_water_surface_vector.x; r8.y <- pixel_to_water_surface_vector.y; r8.z <- pixel_to_water_surface_vector.z
                
                #line 266
                  itof r2.w, l(-3)  // r2.w <- i
                  mov r0.w, r2.x  // r0.w <- cc
                  mov r5.w, r2.w  // r5.w <- i
                  loop 
                    itof r7.z, l(3)
                    ge r7.z, r7.z, r5.w
                    breakc_z r7.z
                    itof r7.z, l(-3)  // r7.z <- j
                    mov r9.x, r0.w  // r9.x <- cc
                    mov r9.y, r7.z  // r9.y <- j
                    loop 
                      itof r7.w, l(3)
                      ge r7.w, r7.w, r9.y
                      breakc_z r7.w
                      mov r9.zw, -cb0[23].xxxz
                      add r9.zw, r7.xxxy, r9.zzzw
                      mov r10.xy, l(-200.000000,-200.000000,-0.000000,-0.000000)
                      add r9.zw, r9.zzzw, r10.xxxy
                      mul r10.x, r2.y, r5.w
                      mul r10.y, r2.y, r9.y
                      mul r10.xy, r1.wwww, r10.xyxx
                      mul r10.xy, r2.zzzz, r10.xyxx
                      add r9.zw, r9.zzzw, r10.xxxy
                      div r9.zw, r9.zzzw, l(0.000000, 0.000000, 400.000000, 400.000000)
                      itof r7.w, l(0)
                      sample_l_indexable(texture2d)(float,float,float,float) r9.zw, r9.zwzz, t4.ywxz, s0, r7.w
                      mul r9.zw, r9.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000)
                      mov r10.xy, l(-1.000000,-1.000000,-0.000000,-0.000000)
                      add r9.zw, r9.zzzw, r10.xxxy  // r9.z <- n.x; r9.w <- n.z
                      mul r10.x, r2.y, r5.w
                      mul r10.z, r2.y, r9.y
                      itof r10.y, l(0)
                      add r10.xyz, r8.xyzx, r10.xyzx
                      mul r10.xyz, r1.wwww, r10.xyzx
                      itof r7.w, l(0)
                      mul r11.xz, r9.zzwz, l(0.500000, 0.000000, 0.500000, 0.000000)
                      mul r11.y, r7.w, l(0.500000)
                      mov r11.xyz, -r11.xyzx
                      add r10.xyz, r10.xyzx, r11.xyzx  // r10.x <- refracted_pixel_to_light_vector.x; r10.y <- refracted_pixel_to_light_vector.y; r10.z <- refracted_pixel_to_light_vector.z
                      itof r7.w, l(0)
                      itof r8.w, l(0)
                      dp3 r9.z, r10.xyzx, r10.xyzx
                      rsq r9.z, r9.z
                      mul r10.xyz, r9.zzzz, r10.xyzx
                      dp3 r9.z, r5.xyzx, r5.xyzx
                      rsq r9.z, r9.z
                      mul r11.xyz, r5.xyzx, r9.zzzz
                      dp3 r9.z, r10.xyzx, r11.xyzx
                      max r8.w, r8.w, r9.z
                      log r8.w, r8.w
                      mul r8.w, r8.w, l(500.000000)
                      exp r8.w, r8.w
                      max r7.w, r7.w, r8.w
                      mul r7.w, r7.w, l(0.050000)
                      add r9.x, r7.w, r9.x
                      itof r7.w, l(1)
                      add r9.y, r7.w, r9.y
                    endloop 
                    mov r0.w, r9.x  // r0.w <- cc
                    itof r7.z, l(1)
                    add r5.w, r5.w, r7.z
                  endloop 
                  mov r0.w, r0.w  // r0.w <- <CalculateWaterCausticIntensity return value>
                
                #line 467
                  mov r0.w, r0.w  // r0.w <- cc
                endif 
                
                #line 471
                add r0.y, r0.y, l(200.000000)
                div r0.y, l(200.000000), r0.y
                mul r0.y, r0.y, r0.w  // r0.y <- cc
                
                #line 474
                itof r0.w, l(1)
                itof r1.w, l(0)
                mov r2.x, -cb0[31].z
                mov r2.y, -r3.y
                add r2.x, r2.y, r2.x
                max r1.w, r1.w, r2.x
                min r0.w, r0.w, r1.w
                mul r6.w, r0.w, r0.y  // r6.w <- cc
                
                #line 478
                mov r3.w, l(1.000000)
                dp4 r2.x, r3.xyzw, cb0[7].xyzw  // r2.x <- output.position.x
                dp4 r2.y, r3.xyzw, cb0[8].xyzw  // r2.y <- output.position.y
                dp4 r2.z, r3.xyzw, cb0[9].xyzw  // r2.z <- output.position.z
                dp4 r2.w, r3.xyzw, cb0[10].xyzw  // r2.w <- output.position.w
                mul r0.xy, r0.xzxx, cb0[28].xyxx  // r0.x <- output.texcoord.x; r0.y <- output.texcoord.y
                mov r1.xyz, r1.xyzx  // r1.x <- output.normal.x; r1.y <- output.normal.y; r1.z <- output.normal.z
                mov r3.xyz, r3.xyzx  // r3.x <- output.positionWS.x; r3.y <- output.positionWS.y; r3.z <- output.positionWS.z
                mov r4.xyzw, r4.xyzw  // r4.x <- output.layerdef.x; r4.y <- output.layerdef.y; r4.z <- output.layerdef.z; r4.w <- output.layerdef.w
                mov r6.xy, l(1.000000,1.000000,0,0)
                mov r6.xyzw, r6.xyzw  // r6.x <- output.depthmap_scaler.x; r6.y <- output.depthmap_scaler.y; r6.z <- output.depthmap_scaler.z; r6.w <- output.depthmap_scaler.w
                mov o0.xyzw, r2.xyzw
                mov o4.xyzw, r4.xyzw
                mov o5.xyzw, r6.xyzw
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r3.xyzx
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 213 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_4_0
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   o0.x <- <ColorPS return value>.x; o0.y <- <ColorPS return value>.y; o0.z <- <ColorPS return value>.z; o0.w <- <ColorPS return value>.w
                //
                #line 892 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                mov r0.xyzw, l(1.000000,1.000000,1.000000,0)  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w
                
                #line 209 "D:\Project\GameEngine\media\ocean2\common.fx"
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 3 instruction slots used
                            
            };
        }

        pass DepthOnly
        {
            RasterizerState = CullBackMS;
            DS_StencilRef = uint(0);
            DepthStencilState = DepthNormal;
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NoBlending;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // PATCH_PARAMETERS         0   xyzw        0     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // ORIGIN                   0   xy          0     NONE   float   xy  
                // SIZE                     0     zw        0     NONE   float     zw
                //
                vs_4_0
                dcl_input v0.xyzw
                dcl_output o0.xy
                dcl_output o0.zw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- PatchParams.x; v0.y <- PatchParams.y; v0.z <- PatchParams.z; v0.w <- PatchParams.w; 
                //   o0.x <- <PassThroughVS return value>.origin.x; o0.y <- <PassThroughVS return value>.origin.y; o0.z <- <PassThroughVS return value>.size.x; o0.w <- <PassThroughVS return value>.size.y
                //
                #line 326 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                mov r0.xy, v0.xyxx  // r0.x <- output.origin.x; r0.y <- output.origin.y
                mov r0.zw, v0.zzzw  // r0.z <- output.size.x; r0.w <- output.size.y
                mov o0.xy, r0.xyxx
                mov o0.zw, r0.zzzw
                ret 
                // Approximately 5 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cb0
                // {
                //
                //   float g_RenderCaustics;            // Offset:    0 Size:     4 [unused]
                //   float g_UseDynamicLOD;             // Offset:    4 Size:     4
                //   float g_FrustumCullInHS;           // Offset:    8 Size:     4
                //   float g_DynamicTessFactor;         // Offset:   12 Size:     4
                //   float g_StaticTessFactor;          // Offset:   16 Size:     4
                //   float g_TerrainBeingRendered;      // Offset:   20 Size:     4
                //   float g_HalfSpaceCullSign;         // Offset:   24 Size:     4 [unused]
                //   float g_HalfSpaceCullPosition;     // Offset:   28 Size:     4 [unused]
                //   float g_SkipCausticsCalculation;   // Offset:   32 Size:     4 [unused]
                //   int g_MSSamples;                   // Offset:   36 Size:     4 [unused]
                //   float4x4 g_ModelViewMatrix;        // Offset:   48 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrix;// Offset:  112 Size:    64
                //   float4x4 g_ModelViewProjectionMatrixInv;// Offset:  176 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrix;// Offset:  240 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrixInv;// Offset:  304 Size:    64 [unused]
                //   float3 g_CameraPosition;           // Offset:  368 Size:    12
                //   float3 g_CameraDirection;          // Offset:  384 Size:    12
                //   float3 g_LightPosition;            // Offset:  400 Size:    12 [unused]
                //   float2 g_WaterBumpTexcoordShift;   // Offset:  416 Size:     8 [unused]
                //   float2 g_ScreenSizeInv;            // Offset:  424 Size:     8 [unused]
                //   float g_MainBufferSizeMultiplier;  // Offset:  432 Size:     4 [unused]
                //   float g_ZNear;                     // Offset:  436 Size:     4 [unused]
                //   float g_ZFar;                      // Offset:  440 Size:     4 [unused]
                //   float2 g_DiffuseTexcoordScale;     // Offset:  448 Size:     8 [unused]
                //      = 0x43020000 0x43020000 
                //   float2 g_RockBumpTexcoordScale;    // Offset:  456 Size:     8 [unused]
                //      = 0x41200000 0x41200000 
                //   float g_RockBumpHeightScale;       // Offset:  464 Size:     4 [unused]
                //      = 0x40400000 
                //   float2 g_SandBumpTexcoordScale;    // Offset:  468 Size:     8 [unused]
                //      = 0x40600000 0x40600000 
                //   float g_SandBumpHeightScale;       // Offset:  476 Size:     4 [unused]
                //      = 0x3f000000 
                //   float g_TerrainSpecularIntensity;  // Offset:  480 Size:     4 [unused]
                //      = 0x3f000000 
                //   float2 g_WaterMicroBumpTexcoordScale;// Offset:  484 Size:     8 [unused]
                //      = 0x43610000 0x43610000 
                //   float2 g_WaterBumpTexcoordScale;   // Offset:  496 Size:     8 [unused]
                //      = 0x40e00000 0x40e00000 
                //   float g_WaterHeightBumpScale;      // Offset:  504 Size:     4 [unused]
                //      = 0x3f800000 
                //   float3 g_WaterDeepColor;           // Offset:  512 Size:    12 [unused]
                //      = 0x3dcccccd 0x3ecccccd 0x3f333333 
                //   float3 g_WaterScatterColor;        // Offset:  528 Size:    12 [unused]
                //      = 0x3e99999a 0x3f333333 0x3f19999a 
                //   float3 g_WaterSpecularColor;       // Offset:  544 Size:    12 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 
                //   float g_WaterSpecularIntensity;    // Offset:  556 Size:     4 [unused]
                //      = 0x43af0000 
                //   float g_WaterSpecularPower;        // Offset:  560 Size:     4 [unused]
                //      = 0x447a0000 
                //   float2 g_WaterColorIntensity;      // Offset:  564 Size:     8 [unused]
                //      = 0x3dcccccd 0x3e4ccccd 
                //   float3 g_AtmosphereBrightColor;    // Offset:  576 Size:    12 [unused]
                //      = 0x3f800000 0x3f8ccccd 0x3fb33333 
                //   float3 g_AtmosphereDarkColor;      // Offset:  592 Size:    12 [unused]
                //      = 0x3f19999a 0x3f19999a 0x3f333333 
                //   float g_FogDensity;                // Offset:  604 Size:     4 [unused]
                //      = 0x3abb3ee7 
                //   float2 g_HeightFieldOrigin;        // Offset:  608 Size:     8 [unused]
                //      = 0x00000000 0x00000000 
                //   float g_HeightFieldSize;           // Offset:  616 Size:     4
                //      = 0x44000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinearWrap                 sampler      NA          NA    0        1
                // g_HeightfieldTexture              texture  float4          2d    0        1
                // cb0                               cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float   x   
                // ORIGIN                   0    yz         0     NONE   float    yz 
                // SV_TessFactor            1   x           1 QUADEDGE   float   x   
                // SIZE                     0    yz         1     NONE   float    yz 
                // SV_TessFactor            2   x           2 QUADEDGE   float   x   
                // SV_TessFactor            3   x           3 QUADEDGE   float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT   float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // ORIGIN                   0   xy          0     NONE   float   xy  
                // SIZE                     0     zw        0     NONE   float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // DUMMY                    0   x           0     NONE   float   x   
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           1
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 1
                dcl_output_control_point_count 1
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                hs_control_point_phase 
                dcl_output o0.x
                //
                // Initial variable locations:
                //   o0.x <- <PatchHS return value>; 
                //   v[0][0].x <- inputPatch[0].origin.x; v[0][0].y <- inputPatch[0].origin.y; v[0][0].z <- inputPatch[0].size.x; v[0][0].w <- inputPatch[0].size.y
                //
                #line 404 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                itof o0.x, l(0)
                ret 
                hs_join_phase 
                dcl_input vicp[1][0].xy
                dcl_input vicp[1][0].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output o0.yz
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output o1.yz
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 5
                
                #line 337
                itof r0.x, l(0)  // r0.x <- inside_tessellation_factor
                itof r0.y, l(0)  // r0.y <- in_frustum
                mov r0.zw, vicp[0][0].xxxy  // r0.z <- output.origin.x; r0.w <- output.origin.y
                mov r1.xy, vicp[0][0].zwzz  // r1.x <- output.size.x; r1.y <- output.size.y
                div r1.zw, vicp[0][0].zzzw, l(0.000000, 0.000000, 2.000000, 2.000000)
                add r1.zw, r1.zzzw, vicp[0][0].xxxy
                div r2.xy, r1.zwzz, cb0[38].zzzz  // r2.x <- texcoord0to1.x; r2.y <- texcoord0to1.y
                itof r1.z, l(1)
                mov r1.w, -r2.y
                add r2.z, r1.w, r1.z  // r2.z <- texcoord0to1.y
                
                #line 347
                mul r1.z, l(0.500000), vicp[0][0].z
                add r3.x, r1.z, vicp[0][0].x  // r3.x <- patch_center.x
                itof r1.z, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r1.z, r2.xzxx, t0.xywz, s0, r1.z
                mul r3.y, r1.z, cb0[1].y  // r3.y <- patch_center.y
                mul r1.z, l(0.500000), vicp[0][0].w
                add r3.z, r1.z, vicp[0][0].y  // r3.z <- patch_center.z
                mov r2.xyz, -cb0[23].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- camera_to_patch_vector.x; r2.y <- camera_to_patch_vector.y; r2.z <- camera_to_patch_vector.z
                dp3 r1.z, r2.xyzx, cb0[24].xyzx
                mul r4.xyz, r1.zzzz, cb0[24].xyzx
                mov r2.xyz, -r2.xyzx
                add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- patch_to_camera_direction_vector.x; r2.y <- patch_to_camera_direction_vector.y; r2.z <- patch_to_camera_direction_vector.z
                dp3 r1.z, r2.xyzx, r2.xyzx
                rsq r1.z, r1.z
                mul r4.xyz, r1.zzzz, r2.xyzx
                itof r1.z, l(2)
                mul r1.z, r1.z, vicp[0][0].z
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w
                min r1.z, r1.w, r1.z
                mul r2.xyz, r1.zzzz, r4.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- patch_center_realigned.x; r2.y <- patch_center_realigned.y; r2.z <- patch_center_realigned.z
                mov r2.w, l(1.000000)
                dp4 r1.z, r2.xyzw, cb0[7].xyzw  // r1.z <- patch_screenspace_center.x
                dp4 r1.w, r2.xyzw, cb0[8].xyzw  // r1.w <- patch_screenspace_center.y
                dp4 r2.x, r2.xyzw, cb0[10].xyzw  // r2.x <- patch_screenspace_center.w
                div r2.y, r1.z, r2.x
                lt r2.y, l(-1.000000), r2.y
                div r1.z, r1.z, r2.x
                lt r1.z, r1.z, l(1.000000)
                and r1.z, r1.z, r2.y
                div r2.y, r1.w, r2.x
                lt r2.y, l(-1.000000), r2.y
                and r1.z, r1.z, r2.y
                div r1.w, r1.w, r2.x
                lt r1.w, r1.w, l(1.000000)
                and r1.z, r1.w, r1.z
                itof r1.w, l(0)
                lt r1.w, r1.w, r2.x
                and r1.z, r1.w, r1.z
                mov r2.xyz, -cb0[23].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w
                itof r2.x, l(2)
                mul r2.x, r2.x, vicp[0][0].z
                lt r1.w, r1.w, r2.x
                or r1.z, r1.w, r1.z
                if_nz r1.z
                
                #line 357
                  itof r0.y, l(1)
                endif 
                ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), r0.y
                itof r1.z, l(0)
                eq r1.z, r1.z, cb0[0].z
                or r0.y, r0.y, r1.z
                if_nz r0.y
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r2.y, l(0.500000), vicp[0][0].w
                  itof r2.x, l(0)
                  mov r2.xy, -r2.xyxx
                  add r1.zw, r1.zzzw, r2.xxxy
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r2.x, r0.y, cb0[1].x  // r2.x <- <CalculateTessellationFactor return value>
                
                #line 363
                  mov r2.x, r2.x  // r2.x <- tesselation_factor
                  mov r2.x, r2.x  // r2.x <- output.Edges[0]
                  add r0.x, r0.x, r2.x
                
                #line 368
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r3.x, l(0.500000), vicp[0][0].z
                  itof r3.y, l(0)
                  mov r2.zw, -r3.xxxy
                  add r1.zw, r1.zzzw, r2.zzzw
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r2.y, r0.y, cb0[1].x  // r2.y <- <CalculateTessellationFactor return value>
                
                #line 369
                  mov r2.y, r2.y  // r2.y <- tesselation_factor
                  mov r2.y, r2.y  // r2.y <- output.Edges[1]
                  add r0.x, r0.x, r2.y
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r3.y, l(0.500000), vicp[0][0].w
                  mov r3.x, vicp[0][0].z
                  mov r2.zw, -r3.xxxy
                  add r1.zw, r1.zzzw, r2.zzzw
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r3.x, r0.y, cb0[1].x  // r3.x <- <CalculateTessellationFactor return value>
                
                #line 374
                  mov r3.x, r3.x  // r3.x <- tesselation_factor
                  mov r3.x, r3.x  // r3.x <- output.Edges[2]
                  add r0.x, r0.x, r3.x
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r4.x, l(0.500000), vicp[0][0].z
                  mov r4.y, vicp[0][0].w
                  mov r2.zw, -r4.xxxy
                  add r1.zw, r1.zzzw, r2.zzzw
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r3.y, r0.y, cb0[1].x  // r3.y <- <CalculateTessellationFactor return value>
                
                #line 379
                  mov r3.y, r3.y  // r3.y <- tesselation_factor
                  mov r3.y, r3.y  // r3.y <- output.Edges[3]
                  add r0.x, r0.x, r3.y
                  mul r3.w, r0.x, l(0.250000)  // r3.w <- output.Inside[1]
                  mov r3.z, r3.w  // r3.z <- output.Inside[0]
                else   // Prior locations: r3.x <- patch_center.x; r3.y <- patch_center.y; r3.z <- patch_center.z
                
                #line 386
                  itof r2.x, l(-1)  // r2.x <- output.Edges[0]
                  itof r2.y, l(-1)  // r2.y <- output.Edges[1]
                  itof r3.x, l(-1)  // r3.x <- output.Edges[2]
                  itof r3.y, l(-1)  // r3.y <- output.Edges[3]
                  itof r3.z, l(-1)  // r3.z <- output.Inside[0]
                  itof r3.w, l(-1)  // r3.w <- output.Inside[1]
                endif 
                mov o0.yz, r0.zzwz
                mov o1.yz, r1.xxyx
                mov o0.x, r2.x
                mov o1.x, r2.y
                mov r3.xyzw, r3.xyzw  // r3.x <- <PatchConstantHS return value>.Edges[2]; r3.y <- <PatchConstantHS return value>.Edges[3]; r3.z <- <PatchConstantHS return value>.Inside[0]; r3.w <- <PatchConstantHS return value>.Inside[1]
                mov o2.x, r3.x
                mov o3.x, r3.y
                mov o4.x, r3.z
                mov o5.x, r3.w
                ret 
                // Approximately 173 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cb0
                // {
                //
                //   float g_RenderCaustics;            // Offset:    0 Size:     4
                //   float g_UseDynamicLOD;             // Offset:    4 Size:     4
                //   float g_FrustumCullInHS;           // Offset:    8 Size:     4 [unused]
                //   float g_DynamicTessFactor;         // Offset:   12 Size:     4
                //   float g_StaticTessFactor;          // Offset:   16 Size:     4
                //   float g_TerrainBeingRendered;      // Offset:   20 Size:     4 [unused]
                //   float g_HalfSpaceCullSign;         // Offset:   24 Size:     4 [unused]
                //   float g_HalfSpaceCullPosition;     // Offset:   28 Size:     4 [unused]
                //   float g_SkipCausticsCalculation;   // Offset:   32 Size:     4
                //   int g_MSSamples;                   // Offset:   36 Size:     4 [unused]
                //   float4x4 g_ModelViewMatrix;        // Offset:   48 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrix;// Offset:  112 Size:    64
                //   float4x4 g_ModelViewProjectionMatrixInv;// Offset:  176 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrix;// Offset:  240 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrixInv;// Offset:  304 Size:    64 [unused]
                //   float3 g_CameraPosition;           // Offset:  368 Size:    12
                //   float3 g_CameraDirection;          // Offset:  384 Size:    12 [unused]
                //   float3 g_LightPosition;            // Offset:  400 Size:    12
                //   float2 g_WaterBumpTexcoordShift;   // Offset:  416 Size:     8 [unused]
                //   float2 g_ScreenSizeInv;            // Offset:  424 Size:     8 [unused]
                //   float g_MainBufferSizeMultiplier;  // Offset:  432 Size:     4 [unused]
                //   float g_ZNear;                     // Offset:  436 Size:     4 [unused]
                //   float g_ZFar;                      // Offset:  440 Size:     4 [unused]
                //   float2 g_DiffuseTexcoordScale;     // Offset:  448 Size:     8
                //      = 0x43020000 0x43020000 
                //   float2 g_RockBumpTexcoordScale;    // Offset:  456 Size:     8
                //      = 0x41200000 0x41200000 
                //   float g_RockBumpHeightScale;       // Offset:  464 Size:     4
                //      = 0x40400000 
                //   float2 g_SandBumpTexcoordScale;    // Offset:  468 Size:     8
                //      = 0x40600000 0x40600000 
                //   float g_SandBumpHeightScale;       // Offset:  476 Size:     4
                //      = 0x3f000000 
                //   float g_TerrainSpecularIntensity;  // Offset:  480 Size:     4 [unused]
                //      = 0x3f000000 
                //   float2 g_WaterMicroBumpTexcoordScale;// Offset:  484 Size:     8 [unused]
                //      = 0x43610000 0x43610000 
                //   float2 g_WaterBumpTexcoordScale;   // Offset:  496 Size:     8 [unused]
                //      = 0x40e00000 0x40e00000 
                //   float g_WaterHeightBumpScale;      // Offset:  504 Size:     4
                //      = 0x3f800000 
                //   float3 g_WaterDeepColor;           // Offset:  512 Size:    12 [unused]
                //      = 0x3dcccccd 0x3ecccccd 0x3f333333 
                //   float3 g_WaterScatterColor;        // Offset:  528 Size:    12 [unused]
                //      = 0x3e99999a 0x3f333333 0x3f19999a 
                //   float3 g_WaterSpecularColor;       // Offset:  544 Size:    12 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 
                //   float g_WaterSpecularIntensity;    // Offset:  556 Size:     4 [unused]
                //      = 0x43af0000 
                //   float g_WaterSpecularPower;        // Offset:  560 Size:     4 [unused]
                //      = 0x447a0000 
                //   float2 g_WaterColorIntensity;      // Offset:  564 Size:     8 [unused]
                //      = 0x3dcccccd 0x3e4ccccd 
                //   float3 g_AtmosphereBrightColor;    // Offset:  576 Size:    12 [unused]
                //      = 0x3f800000 0x3f8ccccd 0x3fb33333 
                //   float3 g_AtmosphereDarkColor;      // Offset:  592 Size:    12 [unused]
                //      = 0x3f19999a 0x3f19999a 0x3f333333 
                //   float g_FogDensity;                // Offset:  604 Size:     4 [unused]
                //      = 0x3abb3ee7 
                //   float2 g_HeightFieldOrigin;        // Offset:  608 Size:     8 [unused]
                //      = 0x00000000 0x00000000 
                //   float g_HeightFieldSize;           // Offset:  616 Size:     4
                //      = 0x44000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinearWrap                 sampler      NA          NA    0        1
                // g_HeightfieldTexture              texture  float4          2d    0        1
                // g_LayerdefTexture                 texture  float4          2d    1        1
                // g_RockBumpTexture                 texture  float4          2d    2        1
                // g_SandBumpTexture                 texture  float4          2d    3        1
                // g_WaterNormalMapTexture           texture  float4          2d    4        1
                // cb0                               cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float       
                // ORIGIN                   0    yz         0     NONE   float    yz 
                // SV_TessFactor            1   x           1 QUADEDGE   float       
                // SIZE                     0    yz         1     NONE   float    yz 
                // SV_TessFactor            2   x           2 QUADEDGE   float       
                // SV_TessFactor            3   x           3 QUADEDGE   float       
                // SV_InsideTessFactor      0   x           4  QUADINT   float       
                // SV_InsideTessFactor      1   x           5  QUADINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // DUMMY                    0   x           0     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 1   xyz         3     NONE   float   xyz 
                // TEXCOORD                 2   xyzw        4     NONE   float   xyzw
                // TEXCOORD                 3   xyzw        5     NONE   float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           1
                //
                ds_5_0
                dcl_input_control_point_count 1
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input vpc0.yz
                dcl_input vpc1.yz
                dcl_input vDomain.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_temps 12
                //
                // Initial variable locations:
                //   vpc0.y <- input.origin.x; vpc0.z <- input.origin.y; 
                //   vpc1.y <- input.size.x; vpc1.z <- input.size.y; 
                //   vpc0.x <- input.Edges[0]; 
                //   vpc1.x <- input.Edges[1]; 
                //   vpc2.x <- input.Edges[2]; 
                //   vpc3.x <- input.Edges[3]; 
                //   vpc4.x <- input.Inside[0]; 
                //   vpc5.x <- input.Inside[1]; 
                //   vDomain.x <- uv.x; vDomain.y <- uv.y; 
                //   o5.x <- <HeightFieldPatchDS return value>.depthmap_scaler.x; o5.y <- <HeightFieldPatchDS return value>.depthmap_scaler.y; o5.z <- <HeightFieldPatchDS return value>.depthmap_scaler.z; o5.w <- <HeightFieldPatchDS return value>.depthmap_scaler.w; 
                //   o4.x <- <HeightFieldPatchDS return value>.layerdef.x; o4.y <- <HeightFieldPatchDS return value>.layerdef.y; o4.z <- <HeightFieldPatchDS return value>.layerdef.z; o4.w <- <HeightFieldPatchDS return value>.layerdef.w; 
                //   o3.x <- <HeightFieldPatchDS return value>.positionWS.x; o3.y <- <HeightFieldPatchDS return value>.positionWS.y; o3.z <- <HeightFieldPatchDS return value>.positionWS.z; 
                //   o2.x <- <HeightFieldPatchDS return value>.normal.x; o2.y <- <HeightFieldPatchDS return value>.normal.y; o2.z <- <HeightFieldPatchDS return value>.normal.z; 
                //   o1.x <- <HeightFieldPatchDS return value>.texcoord.x; o1.y <- <HeightFieldPatchDS return value>.texcoord.y; 
                //   o0.x <- <HeightFieldPatchDS return value>.position.x; o0.y <- <HeightFieldPatchDS return value>.position.y; o0.z <- <HeightFieldPatchDS return value>.position.z; o0.w <- <HeightFieldPatchDS return value>.position.w; 
                //   vicp[0][0].x <- inputPatch
                //
                #line 415 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                mul r0.xy, vpc1.yzyy, vDomain.xyxx
                add r0.xy, r0.xyxx, vpc0.yzyy
                div r0.xy, r0.xyxx, cb0[38].zzzz  // r0.x <- texcoord0to1.x; r0.y <- texcoord0to1.y
                
                #line 425
                itof r0.w, l(1)
                mov r0.y, -r0.y
                add r0.z, r0.y, r0.w  // r0.z <- texcoord0to1.y
                
                #line 428
                itof r0.y, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xzxx, t0.yzxw, s0, r0.y  // r1.z <- base_texvalue.x; r1.x <- base_texvalue.y
                mov r1.xyzw, r1.xyzw  // r1.y <- base_texvalue.z; r1.w <- base_texvalue.w
                mov r2.xyw, r1.zxzy  // r2.x <- base_normal.x; r2.y <- base_normal.y; r2.w <- base_normal.z
                mov r1.y, -r2.w  // r1.y <- base_normal.z
                mov r2.z, r1.y  // r2.z <- base_normal.z
                mul r0.yw, vpc1.yyyz, vDomain.xxxy
                add r3.xz, r0.yywy, vpc0.yyzy  // r3.x <- vertexPosition.x; r3.z <- vertexPosition.z
                mov r3.y, r1.w  // r3.y <- vertexPosition.y
                
                #line 435
                mov r4.xyz, -r3.xyzx
                add r4.xyz, r4.xyzx, cb0[23].xyzx
                dp3 r0.y, r4.xyzx, r4.xyzx
                sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                nop 
                mov r0.y, r0.y
                
                #line 177
                itof r0.w, l(128)
                nop 
                mov r0.y, r0.y
                
                #line 170
                itof r1.w, l(1)
                mul r2.w, r0.y, l(0.015000)
                div r1.w, r1.w, r2.w
                mul r1.w, r1.w, cb0[0].w
                mov r2.w, -cb0[1].x
                add r1.w, r1.w, r2.w
                mul r1.w, r1.w, cb0[0].y
                add r1.w, r1.w, cb0[1].x  // r1.w <- <CalculateTessellationFactor return value>
                
                #line 177
                div r0.w, r0.w, r1.w
                log r0.w, r0.w  // r0.w <- <CalculateMIPLevelForDisplacementTextures return value>
                
                #line 436
                mov r0.w, r0.w  // r0.w <- detailmap_miplevel
                
                #line 439
                itof r1.w, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r0.xzxx, t1.xyzw, s0, r1.w  // r4.x <- layerdef.x; r4.y <- layerdef.y; r4.z <- layerdef.z; r4.w <- layerdef.w
                
                #line 442
                mul r5.xy, r0.xzxx, cb0[29].yzyy
                sample_l_indexable(texture2d)(float,float,float,float) r5.xyzw, r5.xyxx, t3.xzyw, s0, r0.w
                mov r5.xyzw, r5.xyzw  // r5.x <- detail_texvalue.x; r5.y <- detail_texvalue.y; r5.z <- detail_texvalue.z; r5.w <- detail_texvalue.w
                itof r6.xyz, l(2, 2, 2, 0)
                mul r5.xyz, r5.xyzx, r6.xyzx
                itof r6.xyz, l(1, 0, 1, 0)
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- detail_normal.x; r5.y <- detail_normal.y; r5.z <- detail_normal.z
                mov r1.w, l(-0.500000)
                add r1.w, r1.w, r5.w
                mul r1.w, r1.w, cb0[29].w  // r1.w <- detail_height
                
                #line 447
                mul r6.xy, r0.xzxx, cb0[28].zwzz
                sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r6.xyxx, t2.xzyw, s0, r0.w
                mov r6.xyzw, r6.xyzw  // r6.x <- detail_texvalue.x; r6.y <- detail_texvalue.y; r6.z <- detail_texvalue.z; r6.w <- detail_texvalue.w
                itof r7.xyz, l(2, 2, 2, 0)
                mul r6.xyz, r6.xyzx, r7.xyzx
                itof r7.xz, l(1, 0, 1, 0)
                mov r7.y, l(1.400000)
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx
                dp3 r0.w, r6.xyzx, r6.xyzx
                rsq r0.w, r0.w
                mul r6.xyz, r0.wwww, r6.xyzx
                mov r7.xyz, -r5.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx
                mul r6.xyz, r4.wwww, r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                mov r0.w, l(-0.500000)
                add r0.w, r0.w, r6.w
                mul r0.w, r0.w, cb0[29].x
                mov r2.w, -r1.w
                add r0.w, r0.w, r2.w
                mul r0.w, r0.w, r4.w
                add r6.z, r0.w, r1.w  // r6.z <- detail_height
                
                #line 452
                mul r7.xyz, r2.xyzx, r6.zzzz
                add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 455
                mov r2.xyz, r2.xyzx  // r2.x <- normal_rotation_matrix._m10; r2.y <- normal_rotation_matrix._m11; r2.z <- normal_rotation_matrix._m12
                mul r7.xyz, r1.xyzx, l(-1.000000, 0.000000, 0.000000, 0.000000)
                mul r8.xyz, r1.zxyz, l(0.000000, 0.000000, -1.000000, 0.000000)
                mov r8.xyz, -r8.xyzx
                add r7.xyz, r7.xyzx, r8.xyzx
                dp3 r0.w, r7.xyzx, r7.xyzx
                rsq r0.w, r0.w
                mul r7.xyz, r0.wwww, r7.yzxy  // r7.x <- normal_rotation_matrix._m20; r7.y <- normal_rotation_matrix._m21; r7.z <- normal_rotation_matrix._m22
                mul r8.xyz, r1.yzxy, r7.yzxy
                mul r1.xyz, r1.xyzx, r7.zxyz
                mov r1.xyz, -r1.xyzx
                add r1.xyz, r1.xyzx, r8.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- normal_rotation_matrix._m00; r1.y <- normal_rotation_matrix._m01; r1.z <- normal_rotation_matrix._m02
                
                #line 460
                mul r1.xyz, r1.xyzx, r5.xxxx
                mul r2.xyz, r2.xyzx, r5.yyyy
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, r5.zzzz, r7.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- detail_normal_rotated.x; r1.y <- detail_normal_rotated.y; r1.z <- detail_normal_rotated.z
                
                #line 463
                itof r0.w, l(0)  // r0.w <- cc
                itof r1.w, l(0)
                eq r1.w, r1.w, cb0[2].x
                itof r2.x, l(0)
                lt r2.x, r2.x, cb0[0].x
                and r1.w, r1.w, r2.x
                if_nz r1.w
                  nop 
                  mov r3.xyz, r3.xyzx
                
                #line 254
                  mov r1.w, l(0.200000)  // r1.w <- m
                  itof r2.x, l(0)  // r2.x <- cc
                  mov r2.y, l(0.150000)  // r2.y <- k
                  mov r2.z, -r3.y
                  add r2.z, r2.z, l(0.500000)  // r2.z <- water_depth
                  mov r5.xyz, -r3.xyzx
                  add r5.xyz, r5.xyzx, cb0[25].xyzx
                  dp3 r2.w, r5.xyzx, r5.xyzx
                  rsq r2.w, r2.w
                  mul r5.xyz, r2.wwww, r5.xyzx  // r5.x <- pixel_to_light_vector.x; r5.y <- pixel_to_light_vector.y; r5.z <- pixel_to_light_vector.z
                  mul r7.xy, r3.yyyy, r5.xzxx
                  mov r7.xy, -r7.xyxx
                  add r7.xy, r3.xzxx, r7.xyxx  // r7.x <- worldpos.x; r7.y <- worldpos.z
                  mul r8.xyz, r2.zzzz, r5.xyzx  // r8.x <- pixel_to_water_surface_vector.x; r8.y <- pixel_to_water_surface_vector.y; r8.z <- pixel_to_water_surface_vector.z
                
                #line 266
                  itof r2.w, l(-3)  // r2.w <- i
                  mov r0.w, r2.x  // r0.w <- cc
                  mov r5.w, r2.w  // r5.w <- i
                  loop 
                    itof r7.z, l(3)
                    ge r7.z, r7.z, r5.w
                    breakc_z r7.z
                    itof r7.z, l(-3)  // r7.z <- j
                    mov r9.x, r0.w  // r9.x <- cc
                    mov r9.y, r7.z  // r9.y <- j
                    loop 
                      itof r7.w, l(3)
                      ge r7.w, r7.w, r9.y
                      breakc_z r7.w
                      mov r9.zw, -cb0[23].xxxz
                      add r9.zw, r7.xxxy, r9.zzzw
                      mov r10.xy, l(-200.000000,-200.000000,-0.000000,-0.000000)
                      add r9.zw, r9.zzzw, r10.xxxy
                      mul r10.x, r2.y, r5.w
                      mul r10.y, r2.y, r9.y
                      mul r10.xy, r1.wwww, r10.xyxx
                      mul r10.xy, r2.zzzz, r10.xyxx
                      add r9.zw, r9.zzzw, r10.xxxy
                      div r9.zw, r9.zzzw, l(0.000000, 0.000000, 400.000000, 400.000000)
                      itof r7.w, l(0)
                      sample_l_indexable(texture2d)(float,float,float,float) r9.zw, r9.zwzz, t4.ywxz, s0, r7.w
                      mul r9.zw, r9.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000)
                      mov r10.xy, l(-1.000000,-1.000000,-0.000000,-0.000000)
                      add r9.zw, r9.zzzw, r10.xxxy  // r9.z <- n.x; r9.w <- n.z
                      mul r10.x, r2.y, r5.w
                      mul r10.z, r2.y, r9.y
                      itof r10.y, l(0)
                      add r10.xyz, r8.xyzx, r10.xyzx
                      mul r10.xyz, r1.wwww, r10.xyzx
                      itof r7.w, l(0)
                      mul r11.xz, r9.zzwz, l(0.500000, 0.000000, 0.500000, 0.000000)
                      mul r11.y, r7.w, l(0.500000)
                      mov r11.xyz, -r11.xyzx
                      add r10.xyz, r10.xyzx, r11.xyzx  // r10.x <- refracted_pixel_to_light_vector.x; r10.y <- refracted_pixel_to_light_vector.y; r10.z <- refracted_pixel_to_light_vector.z
                      itof r7.w, l(0)
                      itof r8.w, l(0)
                      dp3 r9.z, r10.xyzx, r10.xyzx
                      rsq r9.z, r9.z
                      mul r10.xyz, r9.zzzz, r10.xyzx
                      dp3 r9.z, r5.xyzx, r5.xyzx
                      rsq r9.z, r9.z
                      mul r11.xyz, r5.xyzx, r9.zzzz
                      dp3 r9.z, r10.xyzx, r11.xyzx
                      max r8.w, r8.w, r9.z
                      log r8.w, r8.w
                      mul r8.w, r8.w, l(500.000000)
                      exp r8.w, r8.w
                      max r7.w, r7.w, r8.w
                      mul r7.w, r7.w, l(0.050000)
                      add r9.x, r7.w, r9.x
                      itof r7.w, l(1)
                      add r9.y, r7.w, r9.y
                    endloop 
                    mov r0.w, r9.x  // r0.w <- cc
                    itof r7.z, l(1)
                    add r5.w, r5.w, r7.z
                  endloop 
                  mov r0.w, r0.w  // r0.w <- <CalculateWaterCausticIntensity return value>
                
                #line 467
                  mov r0.w, r0.w  // r0.w <- cc
                endif 
                
                #line 471
                add r0.y, r0.y, l(200.000000)
                div r0.y, l(200.000000), r0.y
                mul r0.y, r0.y, r0.w  // r0.y <- cc
                
                #line 474
                itof r0.w, l(1)
                itof r1.w, l(0)
                mov r2.x, -cb0[31].z
                mov r2.y, -r3.y
                add r2.x, r2.y, r2.x
                max r1.w, r1.w, r2.x
                min r0.w, r0.w, r1.w
                mul r6.w, r0.w, r0.y  // r6.w <- cc
                
                #line 478
                mov r3.w, l(1.000000)
                dp4 r2.x, r3.xyzw, cb0[7].xyzw  // r2.x <- output.position.x
                dp4 r2.y, r3.xyzw, cb0[8].xyzw  // r2.y <- output.position.y
                dp4 r2.z, r3.xyzw, cb0[9].xyzw  // r2.z <- output.position.z
                dp4 r2.w, r3.xyzw, cb0[10].xyzw  // r2.w <- output.position.w
                mul r0.xy, r0.xzxx, cb0[28].xyxx  // r0.x <- output.texcoord.x; r0.y <- output.texcoord.y
                mov r1.xyz, r1.xyzx  // r1.x <- output.normal.x; r1.y <- output.normal.y; r1.z <- output.normal.z
                mov r3.xyz, r3.xyzx  // r3.x <- output.positionWS.x; r3.y <- output.positionWS.y; r3.z <- output.positionWS.z
                mov r4.xyzw, r4.xyzw  // r4.x <- output.layerdef.x; r4.y <- output.layerdef.y; r4.z <- output.layerdef.z; r4.w <- output.layerdef.w
                mov r6.xy, l(1.000000,1.000000,0,0)
                mov r6.xyzw, r6.xyzw  // r6.x <- output.depthmap_scaler.x; r6.y <- output.depthmap_scaler.y; r6.z <- output.depthmap_scaler.z; r6.w <- output.depthmap_scaler.w
                mov o0.xyzw, r2.xyzw
                mov o4.xyzw, r4.xyzw
                mov o5.xyzw, r6.xyzw
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r3.xyzx
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 213 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_4_0
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   o0.x <- <ColorPS return value>.x; o0.y <- <ColorPS return value>.y; o0.z <- <ColorPS return value>.z; o0.w <- <ColorPS return value>.w
                //
                #line 905 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                mov r0.xyzw, l(1.000000,1.000000,1.000000,1.000000)  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w
                
                #line 209 "D:\Project\GameEngine\media\ocean2\common.fx"
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 3 instruction slots used
                            
            };
        }

    }

    technique11 RenderWater
    {
        pass Solid
        {
            RasterizerState = CullBackMS;
            DS_StencilRef = uint(0);
            DepthStencilState = DepthNormal;
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NoBlending;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // PATCH_PARAMETERS         0   xyzw        0     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // ORIGIN                   0   xy          0     NONE   float   xy  
                // SIZE                     0     zw        0     NONE   float     zw
                //
                vs_4_0
                dcl_input v0.xyzw
                dcl_output o0.xy
                dcl_output o0.zw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- PatchParams.x; v0.y <- PatchParams.y; v0.z <- PatchParams.z; v0.w <- PatchParams.w; 
                //   o0.x <- <PassThroughVS return value>.origin.x; o0.y <- <PassThroughVS return value>.origin.y; o0.z <- <PassThroughVS return value>.size.x; o0.w <- <PassThroughVS return value>.size.y
                //
                #line 326 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                mov r0.xy, v0.xyxx  // r0.x <- output.origin.x; r0.y <- output.origin.y
                mov r0.zw, v0.zzzw  // r0.z <- output.size.x; r0.w <- output.size.y
                mov o0.xy, r0.xyxx
                mov o0.zw, r0.zzzw
                ret 
                // Approximately 5 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cb0
                // {
                //
                //   float g_RenderCaustics;            // Offset:    0 Size:     4 [unused]
                //   float g_UseDynamicLOD;             // Offset:    4 Size:     4
                //   float g_FrustumCullInHS;           // Offset:    8 Size:     4
                //   float g_DynamicTessFactor;         // Offset:   12 Size:     4
                //   float g_StaticTessFactor;          // Offset:   16 Size:     4
                //   float g_TerrainBeingRendered;      // Offset:   20 Size:     4
                //   float g_HalfSpaceCullSign;         // Offset:   24 Size:     4 [unused]
                //   float g_HalfSpaceCullPosition;     // Offset:   28 Size:     4 [unused]
                //   float g_SkipCausticsCalculation;   // Offset:   32 Size:     4 [unused]
                //   int g_MSSamples;                   // Offset:   36 Size:     4 [unused]
                //   float4x4 g_ModelViewMatrix;        // Offset:   48 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrix;// Offset:  112 Size:    64
                //   float4x4 g_ModelViewProjectionMatrixInv;// Offset:  176 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrix;// Offset:  240 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrixInv;// Offset:  304 Size:    64 [unused]
                //   float3 g_CameraPosition;           // Offset:  368 Size:    12
                //   float3 g_CameraDirection;          // Offset:  384 Size:    12
                //   float3 g_LightPosition;            // Offset:  400 Size:    12 [unused]
                //   float2 g_WaterBumpTexcoordShift;   // Offset:  416 Size:     8 [unused]
                //   float2 g_ScreenSizeInv;            // Offset:  424 Size:     8 [unused]
                //   float g_MainBufferSizeMultiplier;  // Offset:  432 Size:     4 [unused]
                //   float g_ZNear;                     // Offset:  436 Size:     4 [unused]
                //   float g_ZFar;                      // Offset:  440 Size:     4 [unused]
                //   float2 g_DiffuseTexcoordScale;     // Offset:  448 Size:     8 [unused]
                //      = 0x43020000 0x43020000 
                //   float2 g_RockBumpTexcoordScale;    // Offset:  456 Size:     8 [unused]
                //      = 0x41200000 0x41200000 
                //   float g_RockBumpHeightScale;       // Offset:  464 Size:     4 [unused]
                //      = 0x40400000 
                //   float2 g_SandBumpTexcoordScale;    // Offset:  468 Size:     8 [unused]
                //      = 0x40600000 0x40600000 
                //   float g_SandBumpHeightScale;       // Offset:  476 Size:     4 [unused]
                //      = 0x3f000000 
                //   float g_TerrainSpecularIntensity;  // Offset:  480 Size:     4 [unused]
                //      = 0x3f000000 
                //   float2 g_WaterMicroBumpTexcoordScale;// Offset:  484 Size:     8 [unused]
                //      = 0x43610000 0x43610000 
                //   float2 g_WaterBumpTexcoordScale;   // Offset:  496 Size:     8 [unused]
                //      = 0x40e00000 0x40e00000 
                //   float g_WaterHeightBumpScale;      // Offset:  504 Size:     4 [unused]
                //      = 0x3f800000 
                //   float3 g_WaterDeepColor;           // Offset:  512 Size:    12 [unused]
                //      = 0x3dcccccd 0x3ecccccd 0x3f333333 
                //   float3 g_WaterScatterColor;        // Offset:  528 Size:    12 [unused]
                //      = 0x3e99999a 0x3f333333 0x3f19999a 
                //   float3 g_WaterSpecularColor;       // Offset:  544 Size:    12 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 
                //   float g_WaterSpecularIntensity;    // Offset:  556 Size:     4 [unused]
                //      = 0x43af0000 
                //   float g_WaterSpecularPower;        // Offset:  560 Size:     4 [unused]
                //      = 0x447a0000 
                //   float2 g_WaterColorIntensity;      // Offset:  564 Size:     8 [unused]
                //      = 0x3dcccccd 0x3e4ccccd 
                //   float3 g_AtmosphereBrightColor;    // Offset:  576 Size:    12 [unused]
                //      = 0x3f800000 0x3f8ccccd 0x3fb33333 
                //   float3 g_AtmosphereDarkColor;      // Offset:  592 Size:    12 [unused]
                //      = 0x3f19999a 0x3f19999a 0x3f333333 
                //   float g_FogDensity;                // Offset:  604 Size:     4 [unused]
                //      = 0x3abb3ee7 
                //   float2 g_HeightFieldOrigin;        // Offset:  608 Size:     8 [unused]
                //      = 0x00000000 0x00000000 
                //   float g_HeightFieldSize;           // Offset:  616 Size:     4
                //      = 0x44000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinearWrap                 sampler      NA          NA    0        1
                // g_HeightfieldTexture              texture  float4          2d    0        1
                // cb0                               cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float   x   
                // ORIGIN                   0    yz         0     NONE   float    yz 
                // SV_TessFactor            1   x           1 QUADEDGE   float   x   
                // SIZE                     0    yz         1     NONE   float    yz 
                // SV_TessFactor            2   x           2 QUADEDGE   float   x   
                // SV_TessFactor            3   x           3 QUADEDGE   float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT   float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // ORIGIN                   0   xy          0     NONE   float   xy  
                // SIZE                     0     zw        0     NONE   float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // DUMMY                    0   x           0     NONE   float   x   
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           1
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 1
                dcl_output_control_point_count 1
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                hs_control_point_phase 
                dcl_output o0.x
                //
                // Initial variable locations:
                //   o0.x <- <PatchHS return value>; 
                //   v[0][0].x <- inputPatch[0].origin.x; v[0][0].y <- inputPatch[0].origin.y; v[0][0].z <- inputPatch[0].size.x; v[0][0].w <- inputPatch[0].size.y
                //
                #line 404 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                itof o0.x, l(0)
                ret 
                hs_join_phase 
                dcl_input vicp[1][0].xy
                dcl_input vicp[1][0].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output o0.yz
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output o1.yz
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 5
                
                #line 337
                itof r0.x, l(0)  // r0.x <- inside_tessellation_factor
                itof r0.y, l(0)  // r0.y <- in_frustum
                mov r0.zw, vicp[0][0].xxxy  // r0.z <- output.origin.x; r0.w <- output.origin.y
                mov r1.xy, vicp[0][0].zwzz  // r1.x <- output.size.x; r1.y <- output.size.y
                div r1.zw, vicp[0][0].zzzw, l(0.000000, 0.000000, 2.000000, 2.000000)
                add r1.zw, r1.zzzw, vicp[0][0].xxxy
                div r2.xy, r1.zwzz, cb0[38].zzzz  // r2.x <- texcoord0to1.x; r2.y <- texcoord0to1.y
                itof r1.z, l(1)
                mov r1.w, -r2.y
                add r2.z, r1.w, r1.z  // r2.z <- texcoord0to1.y
                
                #line 347
                mul r1.z, l(0.500000), vicp[0][0].z
                add r3.x, r1.z, vicp[0][0].x  // r3.x <- patch_center.x
                itof r1.z, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r1.z, r2.xzxx, t0.xywz, s0, r1.z
                mul r3.y, r1.z, cb0[1].y  // r3.y <- patch_center.y
                mul r1.z, l(0.500000), vicp[0][0].w
                add r3.z, r1.z, vicp[0][0].y  // r3.z <- patch_center.z
                mov r2.xyz, -cb0[23].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- camera_to_patch_vector.x; r2.y <- camera_to_patch_vector.y; r2.z <- camera_to_patch_vector.z
                dp3 r1.z, r2.xyzx, cb0[24].xyzx
                mul r4.xyz, r1.zzzz, cb0[24].xyzx
                mov r2.xyz, -r2.xyzx
                add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- patch_to_camera_direction_vector.x; r2.y <- patch_to_camera_direction_vector.y; r2.z <- patch_to_camera_direction_vector.z
                dp3 r1.z, r2.xyzx, r2.xyzx
                rsq r1.z, r1.z
                mul r4.xyz, r1.zzzz, r2.xyzx
                itof r1.z, l(2)
                mul r1.z, r1.z, vicp[0][0].z
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w
                min r1.z, r1.w, r1.z
                mul r2.xyz, r1.zzzz, r4.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- patch_center_realigned.x; r2.y <- patch_center_realigned.y; r2.z <- patch_center_realigned.z
                mov r2.w, l(1.000000)
                dp4 r1.z, r2.xyzw, cb0[7].xyzw  // r1.z <- patch_screenspace_center.x
                dp4 r1.w, r2.xyzw, cb0[8].xyzw  // r1.w <- patch_screenspace_center.y
                dp4 r2.x, r2.xyzw, cb0[10].xyzw  // r2.x <- patch_screenspace_center.w
                div r2.y, r1.z, r2.x
                lt r2.y, l(-1.000000), r2.y
                div r1.z, r1.z, r2.x
                lt r1.z, r1.z, l(1.000000)
                and r1.z, r1.z, r2.y
                div r2.y, r1.w, r2.x
                lt r2.y, l(-1.000000), r2.y
                and r1.z, r1.z, r2.y
                div r1.w, r1.w, r2.x
                lt r1.w, r1.w, l(1.000000)
                and r1.z, r1.w, r1.z
                itof r1.w, l(0)
                lt r1.w, r1.w, r2.x
                and r1.z, r1.w, r1.z
                mov r2.xyz, -cb0[23].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w
                itof r2.x, l(2)
                mul r2.x, r2.x, vicp[0][0].z
                lt r1.w, r1.w, r2.x
                or r1.z, r1.w, r1.z
                if_nz r1.z
                
                #line 357
                  itof r0.y, l(1)
                endif 
                ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), r0.y
                itof r1.z, l(0)
                eq r1.z, r1.z, cb0[0].z
                or r0.y, r0.y, r1.z
                if_nz r0.y
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r2.y, l(0.500000), vicp[0][0].w
                  itof r2.x, l(0)
                  mov r2.xy, -r2.xyxx
                  add r1.zw, r1.zzzw, r2.xxxy
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r2.x, r0.y, cb0[1].x  // r2.x <- <CalculateTessellationFactor return value>
                
                #line 363
                  mov r2.x, r2.x  // r2.x <- tesselation_factor
                  mov r2.x, r2.x  // r2.x <- output.Edges[0]
                  add r0.x, r0.x, r2.x
                
                #line 368
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r3.x, l(0.500000), vicp[0][0].z
                  itof r3.y, l(0)
                  mov r2.zw, -r3.xxxy
                  add r1.zw, r1.zzzw, r2.zzzw
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r2.y, r0.y, cb0[1].x  // r2.y <- <CalculateTessellationFactor return value>
                
                #line 369
                  mov r2.y, r2.y  // r2.y <- tesselation_factor
                  mov r2.y, r2.y  // r2.y <- output.Edges[1]
                  add r0.x, r0.x, r2.y
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r3.y, l(0.500000), vicp[0][0].w
                  mov r3.x, vicp[0][0].z
                  mov r2.zw, -r3.xxxy
                  add r1.zw, r1.zzzw, r2.zzzw
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r3.x, r0.y, cb0[1].x  // r3.x <- <CalculateTessellationFactor return value>
                
                #line 374
                  mov r3.x, r3.x  // r3.x <- tesselation_factor
                  mov r3.x, r3.x  // r3.x <- output.Edges[2]
                  add r0.x, r0.x, r3.x
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r4.x, l(0.500000), vicp[0][0].z
                  mov r4.y, vicp[0][0].w
                  mov r2.zw, -r4.xxxy
                  add r1.zw, r1.zzzw, r2.zzzw
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r3.y, r0.y, cb0[1].x  // r3.y <- <CalculateTessellationFactor return value>
                
                #line 379
                  mov r3.y, r3.y  // r3.y <- tesselation_factor
                  mov r3.y, r3.y  // r3.y <- output.Edges[3]
                  add r0.x, r0.x, r3.y
                  mul r3.w, r0.x, l(0.250000)  // r3.w <- output.Inside[1]
                  mov r3.z, r3.w  // r3.z <- output.Inside[0]
                else   // Prior locations: r3.x <- patch_center.x; r3.y <- patch_center.y; r3.z <- patch_center.z
                
                #line 386
                  itof r2.x, l(-1)  // r2.x <- output.Edges[0]
                  itof r2.y, l(-1)  // r2.y <- output.Edges[1]
                  itof r3.x, l(-1)  // r3.x <- output.Edges[2]
                  itof r3.y, l(-1)  // r3.y <- output.Edges[3]
                  itof r3.z, l(-1)  // r3.z <- output.Inside[0]
                  itof r3.w, l(-1)  // r3.w <- output.Inside[1]
                endif 
                mov o0.yz, r0.zzwz
                mov o1.yz, r1.xxyx
                mov o0.x, r2.x
                mov o1.x, r2.y
                mov r3.xyzw, r3.xyzw  // r3.x <- <PatchConstantHS return value>.Edges[2]; r3.y <- <PatchConstantHS return value>.Edges[3]; r3.z <- <PatchConstantHS return value>.Inside[0]; r3.w <- <PatchConstantHS return value>.Inside[1]
                mov o2.x, r3.x
                mov o3.x, r3.y
                mov o4.x, r3.z
                mov o5.x, r3.w
                ret 
                // Approximately 173 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cb0
                // {
                //
                //   float g_RenderCaustics;            // Offset:    0 Size:     4 [unused]
                //   float g_UseDynamicLOD;             // Offset:    4 Size:     4
                //   float g_FrustumCullInHS;           // Offset:    8 Size:     4 [unused]
                //   float g_DynamicTessFactor;         // Offset:   12 Size:     4
                //   float g_StaticTessFactor;          // Offset:   16 Size:     4
                //   float g_TerrainBeingRendered;      // Offset:   20 Size:     4 [unused]
                //   float g_HalfSpaceCullSign;         // Offset:   24 Size:     4 [unused]
                //   float g_HalfSpaceCullPosition;     // Offset:   28 Size:     4 [unused]
                //   float g_SkipCausticsCalculation;   // Offset:   32 Size:     4 [unused]
                //   int g_MSSamples;                   // Offset:   36 Size:     4 [unused]
                //   float4x4 g_ModelViewMatrix;        // Offset:   48 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrix;// Offset:  112 Size:    64
                //   float4x4 g_ModelViewProjectionMatrixInv;// Offset:  176 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrix;// Offset:  240 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrixInv;// Offset:  304 Size:    64 [unused]
                //   float3 g_CameraPosition;           // Offset:  368 Size:    12
                //   float3 g_CameraDirection;          // Offset:  384 Size:    12 [unused]
                //   float3 g_LightPosition;            // Offset:  400 Size:    12 [unused]
                //   float2 g_WaterBumpTexcoordShift;   // Offset:  416 Size:     8
                //   float2 g_ScreenSizeInv;            // Offset:  424 Size:     8 [unused]
                //   float g_MainBufferSizeMultiplier;  // Offset:  432 Size:     4 [unused]
                //   float g_ZNear;                     // Offset:  436 Size:     4 [unused]
                //   float g_ZFar;                      // Offset:  440 Size:     4 [unused]
                //   float2 g_DiffuseTexcoordScale;     // Offset:  448 Size:     8 [unused]
                //      = 0x43020000 0x43020000 
                //   float2 g_RockBumpTexcoordScale;    // Offset:  456 Size:     8 [unused]
                //      = 0x41200000 0x41200000 
                //   float g_RockBumpHeightScale;       // Offset:  464 Size:     4 [unused]
                //      = 0x40400000 
                //   float2 g_SandBumpTexcoordScale;    // Offset:  468 Size:     8 [unused]
                //      = 0x40600000 0x40600000 
                //   float g_SandBumpHeightScale;       // Offset:  476 Size:     4 [unused]
                //      = 0x3f000000 
                //   float g_TerrainSpecularIntensity;  // Offset:  480 Size:     4 [unused]
                //      = 0x3f000000 
                //   float2 g_WaterMicroBumpTexcoordScale;// Offset:  484 Size:     8
                //      = 0x43610000 0x43610000 
                //   float2 g_WaterBumpTexcoordScale;   // Offset:  496 Size:     8
                //      = 0x40e00000 0x40e00000 
                //   float g_WaterHeightBumpScale;      // Offset:  504 Size:     4
                //      = 0x3f800000 
                //   float3 g_WaterDeepColor;           // Offset:  512 Size:    12 [unused]
                //      = 0x3dcccccd 0x3ecccccd 0x3f333333 
                //   float3 g_WaterScatterColor;        // Offset:  528 Size:    12 [unused]
                //      = 0x3e99999a 0x3f333333 0x3f19999a 
                //   float3 g_WaterSpecularColor;       // Offset:  544 Size:    12 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 
                //   float g_WaterSpecularIntensity;    // Offset:  556 Size:     4 [unused]
                //      = 0x43af0000 
                //   float g_WaterSpecularPower;        // Offset:  560 Size:     4 [unused]
                //      = 0x447a0000 
                //   float2 g_WaterColorIntensity;      // Offset:  564 Size:     8 [unused]
                //      = 0x3dcccccd 0x3e4ccccd 
                //   float3 g_AtmosphereBrightColor;    // Offset:  576 Size:    12 [unused]
                //      = 0x3f800000 0x3f8ccccd 0x3fb33333 
                //   float3 g_AtmosphereDarkColor;      // Offset:  592 Size:    12 [unused]
                //      = 0x3f19999a 0x3f19999a 0x3f333333 
                //   float g_FogDensity;                // Offset:  604 Size:     4 [unused]
                //      = 0x3abb3ee7 
                //   float2 g_HeightFieldOrigin;        // Offset:  608 Size:     8 [unused]
                //      = 0x00000000 0x00000000 
                //   float g_HeightFieldSize;           // Offset:  616 Size:     4
                //      = 0x44000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinearWrap                 sampler      NA          NA    0        1
                // g_WaterBumpTexture                texture  float4          2d    0        1
                // g_DepthMapTexture                 texture  float4          2d    1        1
                // cb0                               cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float       
                // ORIGIN                   0    yz         0     NONE   float    yz 
                // SV_TessFactor            1   x           1 QUADEDGE   float       
                // SIZE                     0    yz         1     NONE   float    yz 
                // SV_TessFactor            2   x           2 QUADEDGE   float       
                // SV_TessFactor            3   x           3 QUADEDGE   float       
                // SV_InsideTessFactor      0   x           4  QUADINT   float       
                // SV_InsideTessFactor      1   x           5  QUADINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // DUMMY                    0   x           0     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 1   xyz         3     NONE   float   xyz 
                // TEXCOORD                 2   xyzw        4     NONE   float       
                // TEXCOORD                 3   xyzw        5     NONE   float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           1
                //
                ds_5_0
                dcl_input_control_point_count 1
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vpc0.yz
                dcl_input vpc1.yz
                dcl_input vDomain.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o5.xyzw
                dcl_temps 9
                //
                // Initial variable locations:
                //   vpc0.y <- input.origin.x; vpc0.z <- input.origin.y; 
                //   vpc1.y <- input.size.x; vpc1.z <- input.size.y; 
                //   vpc0.x <- input.Edges[0]; 
                //   vpc1.x <- input.Edges[1]; 
                //   vpc2.x <- input.Edges[2]; 
                //   vpc3.x <- input.Edges[3]; 
                //   vpc4.x <- input.Inside[0]; 
                //   vpc5.x <- input.Inside[1]; 
                //   vDomain.x <- uv.x; vDomain.y <- uv.y; 
                //   o4.x <- <WaterPatchDS return value>.layerdef.x; o4.y <- <WaterPatchDS return value>.layerdef.y; o4.z <- <WaterPatchDS return value>.layerdef.z; o4.w <- <WaterPatchDS return value>.layerdef.w; 
                //   o5.x <- <WaterPatchDS return value>.depthmap_scaler.x; o5.y <- <WaterPatchDS return value>.depthmap_scaler.y; o5.z <- <WaterPatchDS return value>.depthmap_scaler.z; o5.w <- <WaterPatchDS return value>.depthmap_scaler.w; 
                //   o3.x <- <WaterPatchDS return value>.positionWS.x; o3.y <- <WaterPatchDS return value>.positionWS.y; o3.z <- <WaterPatchDS return value>.positionWS.z; 
                //   o2.x <- <WaterPatchDS return value>.normal.x; o2.y <- <WaterPatchDS return value>.normal.y; o2.z <- <WaterPatchDS return value>.normal.z; 
                //   o1.x <- <WaterPatchDS return value>.texcoord.x; o1.y <- <WaterPatchDS return value>.texcoord.y; 
                //   o0.x <- <WaterPatchDS return value>.position.x; o0.y <- <WaterPatchDS return value>.position.y; o0.z <- <WaterPatchDS return value>.position.z; o0.w <- <WaterPatchDS return value>.position.w; 
                //   vicp[0][0].x <- inputPatch
                //
                #line 564 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                mul r0.xy, vpc1.yzyy, vDomain.xyxx
                add r0.xy, r0.xyxx, vpc0.yzyy
                div r0.xy, r0.xyxx, cb0[38].zzzz  // r0.x <- texcoord0to1.x; r0.y <- texcoord0to1.y
                
                #line 569
                itof r0.w, l(1)
                mov r1.x, -r0.y
                add r0.z, r0.w, r1.x
                itof r0.w, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xzxx, t1.xyzw, s0, r0.w  // r1.x <- depthmap_scaler.x; r1.y <- depthmap_scaler.y; r1.z <- depthmap_scaler.z; r1.w <- depthmap_scaler.w
                
                #line 572
                mul r0.zw, vpc1.yyyz, vDomain.xxxy
                add r2.xz, r0.zzwz, vpc0.yyzy  // r2.x <- vertexPosition.x; r2.z <- vertexPosition.z
                mov r0.z, -cb0[31].z
                itof r0.w, l(2)
                div r2.y, r0.z, r0.w  // r2.y <- vertexPosition.y
                nop 
                mov r2.xz, r2.xxzx
                mov r2.y, r2.y
                
                #line 189
                mov r3.xyzw, l(0,4.000000,0,0)  // r3.x <- water_normal.x; r3.y <- water_normal.y; r3.z <- water_normal.z; r3.w <- water_normal.w
                
                #line 193
                mov r0.z, l(1.000000)  // r0.z <- texcoord_scale
                mov r0.w, l(1.000000)  // r0.w <- height_disturbance_scale
                mov r2.w, l(1.000000)  // r2.w <- normal_disturbance_scale
                mov r4.xy, l(1.000000,1.000000,0,0)  // r4.x <- variance.x; r4.y <- variance.y
                
                #line 200
                mov r5.xyz, -r2.xyzx
                add r5.xyz, r5.xyzx, cb0[23].xyzx
                dp3 r4.w, r5.xyzx, r5.xyzx
                sqrt r4.w, r4.w  // r4.w <- distance_to_camera
                nop 
                mov r4.w, r4.w
                
                #line 177
                itof r5.x, l(128)
                nop 
                mov r4.w, r4.w
                
                #line 170
                itof r5.y, l(1)
                mul r4.w, r4.w, l(0.015000)
                div r4.w, r5.y, r4.w
                mul r4.w, r4.w, cb0[0].w
                mov r5.y, -cb0[1].x
                add r4.w, r4.w, r5.y
                mul r4.w, r4.w, cb0[0].y
                add r4.w, r4.w, cb0[1].x  // r4.w <- <CalculateTessellationFactor return value>
                
                #line 177
                div r4.w, r5.x, r4.w
                log r4.w, r4.w  // r4.w <- <CalculateMIPLevelForDisplacementTextures return value>
                
                #line 201
                div r4.w, r4.w, l(2.000000)
                mov r5.x, l(-2.000000)
                add r4.w, r4.w, r5.x  // r4.w <- water_miplevel
                mul r5.xy, r2.xzxx, cb0[31].xyxx
                div r5.xy, r5.xyxx, cb0[38].zzzz  // r5.x <- tc.x; r5.y <- tc.y
                
                #line 205
                itof r5.z, l(0)  // r5.z <- i
                mov r6.xy, r3.xzxx  // r6.x <- water_normal.x; r6.y <- water_normal.z
                mov r5.w, r3.w  // r5.w <- water_normal.w
                mov r6.z, r0.z  // r6.z <- texcoord_scale
                mov r6.w, r0.w  // r6.w <- height_disturbance_scale
                mov r7.x, r2.w  // r7.x <- normal_disturbance_scale
                mov r4.z, r4.x  // r4.z <- variance.x
                mov r7.y, r5.z  // r7.y <- i
                loop 
                  itof r7.z, l(5)
                  lt r7.z, r7.y, r7.z
                  breakc_z r7.z
                  mul r7.zw, r5.xxxy, r6.zzzz
                  mul r8.xy, cb0[26].xyxx, l(0.030000, 0.030000, 0.000000, 0.000000)
                  mul r8.xy, r4.zyzz, r8.xyxx
                  add r7.zw, r7.zzzw, r8.xxxy
                  sample_l_indexable(texture2d)(float,float,float,float) r8.xyz, r7.zwzz, t0.xywz, s0, r4.w
                  mov r8.xyz, r8.xyzx  // r8.x <- texvalue.x; r8.y <- texvalue.z; r8.z <- texvalue.w
                  mul r4.z, r4.z, l(-1.000000)
                  itof r7.zw, l(0, 0, 2, 2)
                  mul r7.zw, r8.xxxy, r7.zzzw
                  mov r8.xy, l(-1.000000,-1.000000,-0.000000,-0.000000)
                  add r7.zw, r7.zzzw, r8.xxxy
                  mul r7.zw, r7.xxxx, r7.zzzw
                  add r6.xy, r6.xyxx, r7.zwzz
                  mov r7.z, l(-0.500000)
                  add r7.z, r7.z, r8.z
                  mul r7.z, r6.w, r7.z
                  add r5.w, r5.w, r7.z
                  mul r6.z, r6.z, l(1.400000)
                  mul r6.w, r6.w, l(0.650000)
                  mul r7.x, r7.x, l(0.650000)
                  add r7.y, r7.y, l(1.000000)
                endloop 
                mov r3.xz, r6.xxyx  // r3.x <- water_normal.x; r3.z <- water_normal.z
                mul r4.w, r5.w, cb0[31].z  // r4.w <- water_normal.w
                
                #line 216
                dp3 r0.z, r3.xyzx, r3.xyzx
                rsq r0.z, r0.z
                mul r4.xyz, r0.zzzz, r3.xyzx  // r4.x <- <CombineWaterNormal return value>.x; r4.y <- <CombineWaterNormal return value>.y; r4.z <- <CombineWaterNormal return value>.z
                mov r4.w, r4.w  // r4.w <- <CombineWaterNormal return value>.w
                
                #line 574
                mov r4.xyzw, r4.xyzw  // r4.x <- water_normal.x; r4.y <- water_normal.y; r4.z <- water_normal.z; r4.w <- water_normal.w
                
                #line 577
                itof r3.xyz, l(0, 1, 0, 0)
                dp3 r0.z, r4.xyzx, r4.xyzx
                rsq r0.z, r0.z
                mul r4.xyz, r0.zzzz, r4.xyzx
                mul r0.z, r1.y, l(0.600000)
                add r0.z, r0.z, l(0.400000)
                mov r5.xyz, -r3.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                mul r4.xyz, r0.zzzz, r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- water_normal.x; r3.y <- water_normal.y; r3.z <- water_normal.z
                mul r0.z, r4.w, cb0[31].z
                mul r0.w, r1.y, l(0.600000)
                add r0.w, r0.w, l(0.400000)
                mul r0.z, r0.w, r0.z
                add r4.y, r0.z, r2.y  // r4.y <- vertexPosition.y
                mul r0.zw, r3.xxxz, l(0.000000, 0.000000, 0.500000, 0.500000)
                mul r2.y, r1.y, l(0.600000)
                add r2.y, r2.y, l(0.400000)
                mul r0.zw, r0.zzzw, r2.yyyy
                mov r0.zw, -r0.zzzw
                add r4.xz, r0.zzwz, r2.xxzx  // r4.x <- vertexPosition.x; r4.z <- vertexPosition.z
                
                #line 582
                mov r4.w, l(1.000000)
                dp4 r2.x, r4.xyzw, cb0[7].xyzw  // r2.x <- output.position.x
                dp4 r2.y, r4.xyzw, cb0[8].xyzw  // r2.y <- output.position.y
                dp4 r2.z, r4.xyzw, cb0[9].xyzw  // r2.z <- output.position.z
                dp4 r2.w, r4.xyzw, cb0[10].xyzw  // r2.w <- output.position.w
                mul r0.xy, r0.xyxx, cb0[30].yzyy
                mul r0.zw, cb0[26].xxxy, l(0.000000, 0.000000, 0.070000, 0.070000)
                add r0.xy, r0.zwzz, r0.xyxx  // r0.x <- output.texcoord.x; r0.y <- output.texcoord.y
                dp3 r0.z, r3.xyzx, r3.xyzx
                rsq r0.z, r0.z
                mul r3.xyz, r0.zzzz, r3.xyzx  // r3.x <- output.normal.x; r3.y <- output.normal.y; r3.z <- output.normal.z
                mov r1.xyzw, r1.xyzw  // r1.x <- output.depthmap_scaler.x; r1.y <- output.depthmap_scaler.y; r1.z <- output.depthmap_scaler.z; r1.w <- output.depthmap_scaler.w
                mov r4.xyz, r4.xyzx  // r4.x <- output.positionWS.x; r4.y <- output.positionWS.y; r4.z <- output.positionWS.z
                mov o0.xyzw, r2.xyzw
                mov o5.xyzw, r1.xyzw
                mov o2.xyz, r3.xyzx
                mov o3.xyz, r4.xyzx
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 126 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cb0
                // {
                //
                //   float g_RenderCaustics;            // Offset:    0 Size:     4 [unused]
                //   float g_UseDynamicLOD;             // Offset:    4 Size:     4 [unused]
                //   float g_FrustumCullInHS;           // Offset:    8 Size:     4 [unused]
                //   float g_DynamicTessFactor;         // Offset:   12 Size:     4 [unused]
                //   float g_StaticTessFactor;          // Offset:   16 Size:     4 [unused]
                //   float g_TerrainBeingRendered;      // Offset:   20 Size:     4 [unused]
                //   float g_HalfSpaceCullSign;         // Offset:   24 Size:     4 [unused]
                //   float g_HalfSpaceCullPosition;     // Offset:   28 Size:     4 [unused]
                //   float g_SkipCausticsCalculation;   // Offset:   32 Size:     4 [unused]
                //   int g_MSSamples;                   // Offset:   36 Size:     4 [unused]
                //   float4x4 g_ModelViewMatrix;        // Offset:   48 Size:    64
                //   float4x4 g_ModelViewProjectionMatrix;// Offset:  112 Size:    64
                //   float4x4 g_ModelViewProjectionMatrixInv;// Offset:  176 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrix;// Offset:  240 Size:    64
                //   float4x4 g_LightModelViewProjectionMatrixInv;// Offset:  304 Size:    64 [unused]
                //   float3 g_CameraPosition;           // Offset:  368 Size:    12
                //   float3 g_CameraDirection;          // Offset:  384 Size:    12 [unused]
                //   float3 g_LightPosition;            // Offset:  400 Size:    12
                //   float2 g_WaterBumpTexcoordShift;   // Offset:  416 Size:     8
                //   float2 g_ScreenSizeInv;            // Offset:  424 Size:     8
                //   float g_MainBufferSizeMultiplier;  // Offset:  432 Size:     4 [unused]
                //   float g_ZNear;                     // Offset:  436 Size:     4
                //   float g_ZFar;                      // Offset:  440 Size:     4
                //   float2 g_DiffuseTexcoordScale;     // Offset:  448 Size:     8 [unused]
                //      = 0x43020000 0x43020000 
                //   float2 g_RockBumpTexcoordScale;    // Offset:  456 Size:     8 [unused]
                //      = 0x41200000 0x41200000 
                //   float g_RockBumpHeightScale;       // Offset:  464 Size:     4 [unused]
                //      = 0x40400000 
                //   float2 g_SandBumpTexcoordScale;    // Offset:  468 Size:     8 [unused]
                //      = 0x40600000 0x40600000 
                //   float g_SandBumpHeightScale;       // Offset:  476 Size:     4 [unused]
                //      = 0x3f000000 
                //   float g_TerrainSpecularIntensity;  // Offset:  480 Size:     4 [unused]
                //      = 0x3f000000 
                //   float2 g_WaterMicroBumpTexcoordScale;// Offset:  484 Size:     8 [unused]
                //      = 0x43610000 0x43610000 
                //   float2 g_WaterBumpTexcoordScale;   // Offset:  496 Size:     8 [unused]
                //      = 0x40e00000 0x40e00000 
                //   float g_WaterHeightBumpScale;      // Offset:  504 Size:     4 [unused]
                //      = 0x3f800000 
                //   float3 g_WaterDeepColor;           // Offset:  512 Size:    12
                //      = 0x3dcccccd 0x3ecccccd 0x3f333333 
                //   float3 g_WaterScatterColor;        // Offset:  528 Size:    12
                //      = 0x3e99999a 0x3f333333 0x3f19999a 
                //   float3 g_WaterSpecularColor;       // Offset:  544 Size:    12
                //      = 0x3f800000 0x3f800000 0x3f800000 
                //   float g_WaterSpecularIntensity;    // Offset:  556 Size:     4
                //      = 0x43af0000 
                //   float g_WaterSpecularPower;        // Offset:  560 Size:     4
                //      = 0x447a0000 
                //   float2 g_WaterColorIntensity;      // Offset:  564 Size:     8
                //      = 0x3dcccccd 0x3e4ccccd 
                //   float3 g_AtmosphereBrightColor;    // Offset:  576 Size:    12
                //      = 0x3f800000 0x3f8ccccd 0x3fb33333 
                //   float3 g_AtmosphereDarkColor;      // Offset:  592 Size:    12
                //      = 0x3f19999a 0x3f19999a 0x3f333333 
                //   float g_FogDensity;                // Offset:  604 Size:     4
                //      = 0x3abb3ee7 
                //   float2 g_HeightFieldOrigin;        // Offset:  608 Size:     8 [unused]
                //      = 0x00000000 0x00000000 
                //   float g_HeightFieldSize;           // Offset:  616 Size:     4 [unused]
                //      = 0x44000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerPointClamp                 sampler      NA          NA    0        1
                // SamplerLinearClamp                sampler      NA          NA    1        1
                // SamplerAnisotropicWrap            sampler      NA          NA    2        1
                // SamplerDepthAnisotropic         sampler_c      NA          NA    3        1
                // g_WaterBumpTexture                texture  float4          2d    0        1
                // g_ReflectionTexture               texture  float4          2d    1        1
                // g_RefractionTexture               texture  float4          2d    2        1
                // g_RefractionDepthTextureResolved    texture  float4          2d    3        1
                // g_DepthTexture                    texture  float4          2d    4        1
                // cb0                               cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xy  
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 1   xyz         3     NONE   float   xyz 
                // TEXCOORD                 2   xyzw        4     NONE   float       
                // TEXCOORD                 3   xyzw        5     NONE   float    y  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_4_0
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_default
                dcl_sampler s3, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps_siv linear noperspective v0.xy, position
                dcl_input_ps linear centroid v1.xy
                dcl_input_ps linear centroid v2.xyz
                dcl_input_ps linear centroid v3.xyz
                dcl_input_ps linear centroid v5.y
                dcl_output o0.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
                //   v1.x <- input.texcoord.x; v1.y <- input.texcoord.y; 
                //   v2.x <- input.normal.x; v2.y <- input.normal.y; v2.z <- input.normal.z; 
                //   v3.x <- input.positionWS.x; v3.y <- input.positionWS.y; v3.z <- input.positionWS.z; 
                //   v4.x <- input.layerdef.x; v4.y <- input.layerdef.y; v4.z <- input.layerdef.z; v4.w <- input.layerdef.w; 
                //   v5.x <- input.depthmap_scaler.x; v5.y <- input.depthmap_scaler.y; v5.z <- input.depthmap_scaler.z; v5.w <- input.depthmap_scaler.w; 
                //   o0.x <- <WaterPatchPS return value>.x; o0.y <- <WaterPatchPS return value>.y; o0.z <- <WaterPatchPS return value>.z; o0.w <- <WaterPatchPS return value>.w
                //
                #line 593 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                mov r0.xyz, -v3.xyzx
                add r0.xyz, r0.xyzx, cb0[25].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- pixel_to_light_vector.x; r0.y <- pixel_to_light_vector.y; r0.z <- pixel_to_light_vector.z
                mov r1.xyz, -v3.xyzx
                add r1.xyz, r1.xyzx, cb0[23].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx  // r1.x <- pixel_to_eye_vector.x; r1.y <- pixel_to_eye_vector.y; r1.z <- pixel_to_eye_vector.z
                
                #line 611
                itof r2.w, l(1)
                mov r2.xyz, v3.xyzx
                dp4 r3.x, r2.xyzw, cb0[15].xyzw  // r3.x <- positionLS.x
                dp4 r3.y, r2.xyzw, cb0[16].xyzw  // r3.y <- positionLS.y
                dp4 r3.z, r2.xyzw, cb0[17].xyzw  // r3.z <- positionLS.z
                dp4 r1.w, r2.xyzw, cb0[18].xyzw  // r1.w <- positionLS.w
                div r2.xyz, r3.xyzx, r1.wwww  // r2.x <- positionLS.x; r2.y <- positionLS.y; r2.z <- positionLS.z
                itof r1.w, l(1)
                add r1.w, r1.w, r2.x
                mul r3.x, r1.w, l(0.500000)  // r3.x <- positionLS.x
                itof r1.w, l(1)
                mov r2.x, -r2.y
                add r1.w, r1.w, r2.x
                mul r3.y, r1.w, l(0.500000)  // r3.y <- positionLS.y
                
                #line 617
                mov r4.y, l(0.000244)  // r4.y <- dsf
                mul r1.w, r2.z, l(0.995000)
                sample_c r1.w, r3.xyxx, t4.xxxx, s3, r1.w
                mul r1.w, r1.w, l(0.200000)  // r1.w <- shadow_factor
                add r2.xy, r3.xyxx, r4.yyyy
                mul r2.w, r2.z, l(0.995000)
                sample_c r2.x, r2.xyxx, t4.xxxx, s3, r2.w
                mul r2.x, r2.x, l(0.200000)
                add r1.w, r1.w, r2.x
                mov r4.x, -r4.y
                add r2.xy, r3.xyxx, r4.xyxx
                mul r2.w, r2.z, l(0.995000)
                sample_c r2.x, r2.xyxx, t4.xxxx, s3, r2.w
                mul r2.x, r2.x, l(0.200000)
                add r1.w, r1.w, r2.x
                mov r4.z, -r4.y
                add r2.xy, r3.xyxx, r4.yzyy
                mul r2.w, r2.z, l(0.995000)
                sample_c r2.x, r2.xyxx, t4.xxxx, s3, r2.w
                mul r2.x, r2.x, l(0.200000)
                add r1.w, r1.w, r2.x
                mov r2.x, -r4.y
                mov r2.y, -r4.y
                add r2.xy, r2.xyxx, r3.xyxx
                mul r2.z, r2.z, l(0.995000)
                sample_c r2.x, r2.xyxx, t4.xxxx, s3, r2.z
                mul r2.x, r2.x, l(0.200000)
                add r1.w, r1.w, r2.x
                
                #line 625
                itof r2.xyz, l(2, 2, 2, 0)
                mul r3.xy, cb0[26].xyxx, l(0.200000, 0.200000, 0.000000, 0.000000)
                mov r3.xy, -r3.xyxx
                add r3.xy, r3.xyxx, v1.xyxx
                sample r3.xyzw, r3.xyxx, t0.xyzw, s2
                mul r2.xyz, r2.xyzx, r3.yzxy
                itof r3.xyz, l(1, -8, 1, 0)
                mov r3.xyz, -r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                dp3 r2.w, r2.xyzx, r2.xyzx
                rsq r2.w, r2.w
                mul r2.xyz, r2.wwww, r2.xyzx  // r2.x <- microbump_normal.x; r2.y <- microbump_normal.y; r2.z <- microbump_normal.z
                itof r3.xyz, l(2, 2, 2, 0)
                mul r4.xy, v1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
                mul r4.zw, cb0[26].xxxy, l(0.000000, 0.000000, 0.050000, 0.050000)
                add r4.xy, r4.zwzz, r4.xyxx
                sample r4.xyzw, r4.xyxx, t0.xyzw, s2
                mul r3.xyz, r3.xyzx, r4.yzxy
                itof r4.xyz, l(1, -8, 1, 0)
                mov r4.xyz, -r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                
                #line 629
                mov r3.xyz, v2.xyzx  // r3.x <- normal_rotation_matrix._m10; r3.y <- normal_rotation_matrix._m11; r3.z <- normal_rotation_matrix._m12
                mul r4.xyz, v2.yzxy, l(0.000000, 0.000000, -1.000000, 0.000000)
                mul r5.xyz, v2.xyzx, l(0.000000, -1.000000, 0.000000, 0.000000)
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r2.w, r4.xyzx, r4.xyzx
                rsq r2.w, r2.w
                mul r4.xyz, r2.wwww, r4.yzxy  // r4.x <- normal_rotation_matrix._m20; r4.y <- normal_rotation_matrix._m21; r4.z <- normal_rotation_matrix._m22
                mul r5.xyz, r4.yzxy, v2.zxyz
                mul r6.xyz, r4.zxyz, v2.yzxy
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r2.w, r5.xyzx, r5.xyzx
                rsq r2.w, r2.w
                mul r5.xyz, r2.wwww, r5.xyzx  // r5.x <- normal_rotation_matrix._m00; r5.y <- normal_rotation_matrix._m01; r5.z <- normal_rotation_matrix._m02
                
                #line 634
                dp3 r2.w, r2.xyzx, r2.xyzx
                rsq r2.w, r2.w
                mul r2.xyz, r2.wwww, r2.xyzx
                mul r5.xyz, r5.xyzx, r2.xxxx
                mul r2.xyw, r3.xyxz, r2.yyyy
                add r2.xyw, r2.xyxw, r5.xyxz
                mul r3.xyz, r4.xyzx, r2.zzzz
                add r2.xyz, r2.xywx, r3.xyzx  // r2.x <- microbump_normal.x; r2.y <- microbump_normal.y; r2.z <- microbump_normal.z
                
                #line 641
                itof r3.x, l(0)
                mul r3.y, v3.y, l(0.250000)
                add r3.y, r3.y, l(0.250000)
                max r3.x, r3.y, r3.x
                mul r3.x, r3.x, l(2.500000)  // r3.x <- scatter_factor
                
                #line 644
                mov r0.w, l(0)
                dp3 r3.y, r0.xzwx, r0.xzwx
                rsq r3.y, r3.y
                mul r3.yzw, r0.xxwz, r3.yyyy
                mov r4.xyz, -r1.xyzx
                dp3 r0.w, r3.yzwy, r4.xyzx
                max r0.w, r0.w, l(0.000000)
                mov r3.y, l(1.000000)
                mul r0.w, r0.w, r0.w
                mul r0.w, r0.w, r3.y
                mul r0.w, r0.w, r1.w
                mul r0.w, r0.w, r3.x  // r0.w <- scatter_factor
                
                #line 647
                dp3 r3.x, r0.xyzx, r2.xyzx
                mov r3.x, -r3.x
                add r3.x, r3.x, l(1.000000)
                max r3.x, r3.x, l(0.000000)
                mov r3.y, l(1.000000)
                mul r3.x, r3.x, r3.x
                mul r3.x, r3.x, r3.x
                mul r3.x, r3.x, r3.x
                mul r3.x, r3.x, r3.y
                mul r0.w, r0.w, r3.x
                
                #line 650
                mul r3.x, r1.w, l(1.500000)
                mul r3.x, r3.x, cb0[35].z
                itof r3.y, l(0)
                itof r3.z, l(1)
                add r3.z, r3.z, v3.y
                max r3.y, r3.z, r3.y
                mul r3.x, r3.y, r3.x
                itof r3.y, l(0)
                dp3 r3.z, r1.xyzx, r2.xyzx
                max r3.y, r3.z, r3.y
                mul r3.x, r3.y, r3.x
                itof r3.y, l(0)
                itof r3.z, l(1)
                mov r3.w, -r1.y
                add r3.z, r3.w, r3.z
                max r3.y, r3.z, r3.y
                mul r3.x, r3.y, r3.x
                itof r3.y, l(300)
                mov r4.xyz, -v3.xyzx
                add r4.xyz, r4.xyzx, cb0[23].xyzx
                dp3 r3.z, r4.xyzx, r4.xyzx
                sqrt r3.z, r3.z
                add r3.y, r3.z, r3.y
                div r3.y, l(300.000000), r3.y
                mul r3.x, r3.y, r3.x
                add r0.w, r0.w, r3.x
                
                #line 657
                mul r3.x, v5.y, l(0.900000)
                add r3.x, r3.x, l(0.100000)
                mul r0.w, r0.w, r3.x
                
                #line 660
                mov r3.x, l(0.090909)  // r3.x <- r
                mov r3.y, -r3.x
                add r3.y, r3.y, l(1.000000)
                dp3 r3.z, r2.xyzx, r1.xyzx
                mov r3.z, -r3.z
                add r3.z, r3.z, l(1.000000)
                mov r3.w, l(1.000000)
                mul r3.z, r3.z, r3.z
                mul r3.z, r3.z, r3.z
                mul r3.z, r3.z, r3.w
                mul r3.y, r3.z, r3.y
                add r3.x, r3.y, r3.x
                min r3.x, r3.x, l(1.000000)
                max r3.x, r3.x, l(0.000000)  // r3.x <- fresnel_factor
                
                #line 664
                mov r3.yzw, -r1.xxyz
                itof r4.x, l(2)
                dp3 r4.y, r1.xyzx, r2.xyzx
                mul r4.x, r4.y, r4.x
                mul r4.xyz, r2.xyzx, r4.xxxx
                add r3.yzw, r3.yyzw, r4.xxyz  // r3.y <- reflected_eye_to_pixel_vector.x; r3.z <- reflected_eye_to_pixel_vector.y; r3.w <- reflected_eye_to_pixel_vector.z
                mul r1.w, r1.w, r3.x
                itof r4.x, l(0)
                dp3 r3.y, r0.xyzx, r3.yzwy
                max r3.y, r3.y, r4.x
                log r3.y, r3.y
                mul r3.y, r3.y, cb0[35].x
                exp r3.y, r3.y
                mul r1.w, r1.w, r3.y  // r1.w <- specular_factor
                
                #line 668
                itof r3.y, l(0)
                dp3 r3.z, r0.xyzx, r2.xyzx
                max r3.y, r3.z, r3.y
                mul r3.y, r3.y, cb0[35].z
                add r3.y, r3.y, cb0[35].y  // r3.y <- diffuse_factor
                
                #line 671
                itof r2.yw, l(0, 0, 0, 0)
                dp4 r4.y, r2.xyzw, cb0[3].xyzw  // r4.y <- disturbance_eyespace.x
                dp4 r4.z, r2.xyzw, cb0[4].xyzw  // r4.z <- disturbance_eyespace.y
                dp4 r4.w, r2.xyzw, cb0[5].xyzw  // r4.w <- disturbance_eyespace.z
                mul r2.xy, r4.ywyy, l(0.030000, 0.030000, 0.000000, 0.000000)  // r2.x <- reflection_disturbance.x; r2.y <- reflection_disturbance.y
                mov r4.x, -r4.y
                mul r3.zw, r4.xxxz, l(0.000000, 0.000000, 0.050000, 0.050000)
                itof r2.w, l(20)
                mov r4.xyz, -v3.xyzx
                add r4.xyz, r4.xyzx, cb0[23].xyzx
                dp3 r4.x, r4.xyzx, r4.xyzx
                sqrt r4.x, r4.x
                add r2.w, r2.w, r4.x
                div r2.w, l(20.000000), r2.w
                mul r3.zw, r2.wwww, r3.zzzw  // r3.z <- refraction_disturbance.x; r3.w <- refraction_disturbance.y
                
                #line 679
                itof r4.w, l(1)
                mov r4.xyz, v3.xyzx
                dp4 r2.w, r4.xyzw, cb0[8].xyzw  // r2.w <- projected_waveheight.y
                dp4 r4.x, r4.xyzw, cb0[10].xyzw  // r4.x <- projected_waveheight.w
                mul r2.w, r2.w, l(-0.500000)
                div r2.w, r2.w, r4.x  // r2.w <- waveheight_correction
                itof r4.w, l(1)
                mov r4.xz, v3.xxzx
                mov r4.y, l(-0.800000)
                dp4 r5.x, r4.xyzw, cb0[8].xyzw  // r5.x <- projected_waveheight.y
                dp4 r4.x, r4.xyzw, cb0[10].xyzw  // r4.x <- projected_waveheight.w
                mul r4.y, r5.x, l(0.500000)
                div r4.x, r4.y, r4.x
                add r2.w, r2.w, r4.x
                add r2.y, r2.y, r2.w
                max r2.z, r2.y, l(-0.150000)  // r2.z <- reflection_disturbance.y
                
                #line 686
                nop 
                mul r2.yw, v0.xxxy, cb0[26].zzzw
                
                #line 279
                itof r4.x, l(0)
                sample_l r4.xyzw, r2.ywyy, t3.xyzw, s1, r4.x
                mov r4.x, r4.x  // r4.x <- <GetRefractionDepth return value>
                
                #line 686
                mov r4.x, r4.x  // r4.x <- refraction_depth
                mul r2.y, cb0[27].y, cb0[27].z
                mov r2.w, -cb0[27].y
                add r2.w, r2.w, cb0[27].z
                mul r2.w, r2.w, r4.x
                mov r2.w, -r2.w
                add r2.w, r2.w, cb0[27].z
                div r2.y, r2.y, r2.w  // r2.y <- refraction_depth
                itof r4.w, l(1)
                mov r4.xyz, v3.xyzx
                dp4 r2.w, r4.xyzw, cb0[5].xyzw  // r2.w <- vertex_in_viewspace.z
                mov r2.w, -r2.w
                add r2.y, r2.w, r2.y  // r2.y <- water_depth
                mov r2.y, r2.y  // r2.y <- nondisplaced_water_depth
                
                #line 693
                itof r2.w, l(2)
                min r2.w, r2.y, r2.w
                mul r3.zw, r2.wwww, r3.zzzw
                
                #line 696
                nop 
                mul r4.xy, v0.xyxx, cb0[26].zwzz
                add r4.xy, r3.zwzz, r4.xyxx
                
                #line 279
                itof r2.w, l(0)
                sample_l r4.xyzw, r4.xyxx, t3.xyzw, s1, r2.w
                mov r4.x, r4.x  // r4.x <- <GetRefractionDepth return value>
                
                #line 696
                mov r4.x, r4.x  // r4.x <- refraction_depth
                mul r2.w, cb0[27].y, cb0[27].z
                mov r4.y, -cb0[27].y
                add r4.y, r4.y, cb0[27].z
                mul r4.x, r4.y, r4.x
                mov r4.x, -r4.x
                add r4.x, r4.x, cb0[27].z
                div r2.w, r2.w, r4.x  // r2.w <- refraction_depth
                itof r4.w, l(1)
                mov r4.xyz, v3.xyzx
                dp4 r4.x, r4.xyzw, cb0[5].xyzw  // r4.x <- vertex_in_viewspace.z
                mov r4.x, -r4.x
                add r2.w, r2.w, r4.x  // r2.w <- water_depth
                
                #line 702
                nop 
                mul r4.xy, v0.xyxx, cb0[26].zwzz
                add r4.xy, r3.zwzz, r4.xyxx
                
                #line 284
                mul r4.zw, cb0[26].zzzw, l(0.000000, 0.000000, 2.000000, 2.000000)
                add r4.zw, r4.zzzw, r4.xxxy
                itof r5.x, l(0)
                sample_l r5.xyzw, r4.zwzz, t3.xyzw, s0, r5.x
                mov r5.x, r5.x  // r5.x <- result
                mov r6.y, -cb0[26].w
                mov r6.x, cb0[26].z
                mul r4.zw, r6.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000)
                add r4.zw, r4.zzzw, r4.xxxy
                itof r5.y, l(0)
                sample_l r6.xyzw, r4.zwzz, t3.xyzw, s0, r5.y
                min r4.z, r5.x, r6.x  // r4.z <- result
                mov r5.x, -cb0[26].z
                mov r5.y, cb0[26].w
                mul r5.xy, r5.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                add r5.xy, r4.xyxx, r5.xyxx
                itof r4.w, l(0)
                sample_l r5.xyzw, r5.xyxx, t3.xyzw, s0, r4.w
                min r4.z, r4.z, r5.x
                mov r5.x, -cb0[26].z
                mov r5.y, -cb0[26].w
                mul r5.xy, r5.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                add r4.xy, r4.xyxx, r5.xyxx
                itof r4.w, l(0)
                sample_l r5.xyzw, r4.xyxx, t3.xyzw, s0, r4.w
                min r4.x, r4.z, r5.x  // r4.x <- result
                mov r4.x, r4.x  // r4.x <- <GetConservativeRefractionDepth return value>
                
                #line 702
                mov r4.x, r4.x  // r4.x <- conservative_refraction_depth
                mul r4.y, cb0[27].y, cb0[27].z
                mov r4.z, -cb0[27].y
                add r4.z, r4.z, cb0[27].z
                mul r4.x, r4.z, r4.x
                mov r4.x, -r4.x
                add r4.x, r4.x, cb0[27].z
                div r4.x, r4.y, r4.x  // r4.x <- conservative_refraction_depth
                itof r5.w, l(1)
                mov r5.xyz, v3.xyzx
                dp4 r4.y, r5.xyzw, cb0[5].xyzw  // r4.y <- vertex_in_viewspace.z
                mov r4.y, -r4.y
                add r4.x, r4.y, r4.x  // r4.x <- conservative_water_depth
                itof r4.y, l(0)
                lt r4.x, r4.x, r4.y
                if_nz r4.x
                  itof r3.zw, l(0, 0, 0, 0)
                  mov r2.w, r2.y
                endif 
                itof r2.y, l(0)
                max r2.y, r2.w, r2.y  // r2.y <- water_depth
                
                #line 715
                mul r4.x, v0.x, cb0[26].z
                mul r2.w, v0.y, cb0[26].w
                mov r2.w, -r2.w
                add r4.y, r2.w, l(1.000000)
                add r2.xz, r2.xxzx, r4.xxyx
                itof r2.w, l(0)
                sample_l r4.xyzw, r2.xzxx, t1.xyzw, s1, r2.w
                mov r4.xyz, r4.xyzx  // r4.x <- reflection_color.x; r4.y <- reflection_color.y; r4.z <- reflection_color.z
                mul r2.xz, v0.xxyx, cb0[26].zzwz
                add r2.xz, r3.zzwz, r2.xxzx
                itof r2.w, l(0)
                sample_l r5.xyzw, r2.xzxx, t2.xyzw, s1, r2.w
                mov r5.xyz, r5.xyzx  // r5.x <- refraction_color.x; r5.y <- refraction_color.y; r5.z <- refraction_color.z
                
                #line 719
                mul r2.xzw, r3.yyyy, cb0[32].xxyz  // r2.x <- water_color.x; r2.z <- water_color.y; r2.w <- water_color.z
                nop 
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 183
                mov r1.xyz, -r1.xyzx
                dp3 r0.x, r0.xyzx, r1.xyzx
                mul r0.x, r0.x, l(0.500000)
                add r0.x, r0.x, l(0.500000)
                mov r1.xyz, -cb0[37].xyzx
                add r1.xyz, r1.xyzx, cb0[36].xyzx
                mul r0.xyz, r0.xxxx, r1.xyzx
                add r0.xyz, r0.xyzx, cb0[37].xyzx  // r0.x <- <CalculateFogColor return value>.x; r0.y <- <CalculateFogColor return value>.y; r0.z <- <CalculateFogColor return value>.z
                
                #line 720
                itof r1.x, l(1)
                mov r3.yzw, -v3.xxyz
                add r3.yzw, r3.yyzw, cb0[23].xxyz
                dp3 r1.y, r3.yzwy, r3.yzwy
                sqrt r1.y, r1.y
                mov r1.y, -r1.y
                mul r1.y, r1.y, cb0[37].w
                mul r1.y, r1.y, l(1.442695)
                exp r1.y, r1.y
                min r1.x, r1.y, r1.x
                mov r3.yzw, -r0.xxyz
                add r2.xzw, r2.xxzw, r3.yyzw
                mul r1.xyz, r1.xxxx, r2.xzwx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- water_color.x; r0.y <- water_color.y; r0.z <- water_color.z
                
                #line 723
                itof r1.x, l(1)
                mul r1.y, r2.y, l(5.000000)
                min r1.x, r1.y, r1.x
                mul r1.x, r1.x, r3.x  // r1.x <- fresnel_factor
                
                #line 726
                itof r1.y, l(1)
                mov r1.z, -r2.y
                div r1.z, r1.z, l(8.000000)
                mul r1.z, r1.z, l(1.442695)
                exp r1.z, r1.z
                mul r1.z, r1.z, l(1.000000)
                min r1.y, r1.z, r1.y
                mov r2.xyz, -r0.xyzx
                add r2.xyz, r2.xyzx, r5.xyzx
                mul r2.xyz, r1.yyyy, r2.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- refraction_color.x; r0.y <- refraction_color.y; r0.z <- refraction_color.z
                
                #line 729
                mov r2.xyz, -r0.xyzx
                add r2.xyz, r2.xyzx, r4.xyzx
                mul r2.xyz, r1.xxxx, r2.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                mul r1.y, r1.w, cb0[34].w
                mul r1.yzw, r1.yyyy, cb0[34].xxyz
                mul r1.xyz, r1.xxxx, r1.yzwy
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, r0.wwww, cb0[33].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                itof r0.w, l(1)  // r0.w <- color.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 380 instruction slots used
                            
            };
        }

        pass Wireframe
        {
            RasterizerState = WireframeMS;
            DS_StencilRef = uint(0);
            DepthStencilState = DepthNormal;
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NoBlending;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // PATCH_PARAMETERS         0   xyzw        0     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // ORIGIN                   0   xy          0     NONE   float   xy  
                // SIZE                     0     zw        0     NONE   float     zw
                //
                vs_4_0
                dcl_input v0.xyzw
                dcl_output o0.xy
                dcl_output o0.zw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- PatchParams.x; v0.y <- PatchParams.y; v0.z <- PatchParams.z; v0.w <- PatchParams.w; 
                //   o0.x <- <PassThroughVS return value>.origin.x; o0.y <- <PassThroughVS return value>.origin.y; o0.z <- <PassThroughVS return value>.size.x; o0.w <- <PassThroughVS return value>.size.y
                //
                #line 326 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                mov r0.xy, v0.xyxx  // r0.x <- output.origin.x; r0.y <- output.origin.y
                mov r0.zw, v0.zzzw  // r0.z <- output.size.x; r0.w <- output.size.y
                mov o0.xy, r0.xyxx
                mov o0.zw, r0.zzzw
                ret 
                // Approximately 5 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cb0
                // {
                //
                //   float g_RenderCaustics;            // Offset:    0 Size:     4 [unused]
                //   float g_UseDynamicLOD;             // Offset:    4 Size:     4
                //   float g_FrustumCullInHS;           // Offset:    8 Size:     4
                //   float g_DynamicTessFactor;         // Offset:   12 Size:     4
                //   float g_StaticTessFactor;          // Offset:   16 Size:     4
                //   float g_TerrainBeingRendered;      // Offset:   20 Size:     4
                //   float g_HalfSpaceCullSign;         // Offset:   24 Size:     4 [unused]
                //   float g_HalfSpaceCullPosition;     // Offset:   28 Size:     4 [unused]
                //   float g_SkipCausticsCalculation;   // Offset:   32 Size:     4 [unused]
                //   int g_MSSamples;                   // Offset:   36 Size:     4 [unused]
                //   float4x4 g_ModelViewMatrix;        // Offset:   48 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrix;// Offset:  112 Size:    64
                //   float4x4 g_ModelViewProjectionMatrixInv;// Offset:  176 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrix;// Offset:  240 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrixInv;// Offset:  304 Size:    64 [unused]
                //   float3 g_CameraPosition;           // Offset:  368 Size:    12
                //   float3 g_CameraDirection;          // Offset:  384 Size:    12
                //   float3 g_LightPosition;            // Offset:  400 Size:    12 [unused]
                //   float2 g_WaterBumpTexcoordShift;   // Offset:  416 Size:     8 [unused]
                //   float2 g_ScreenSizeInv;            // Offset:  424 Size:     8 [unused]
                //   float g_MainBufferSizeMultiplier;  // Offset:  432 Size:     4 [unused]
                //   float g_ZNear;                     // Offset:  436 Size:     4 [unused]
                //   float g_ZFar;                      // Offset:  440 Size:     4 [unused]
                //   float2 g_DiffuseTexcoordScale;     // Offset:  448 Size:     8 [unused]
                //      = 0x43020000 0x43020000 
                //   float2 g_RockBumpTexcoordScale;    // Offset:  456 Size:     8 [unused]
                //      = 0x41200000 0x41200000 
                //   float g_RockBumpHeightScale;       // Offset:  464 Size:     4 [unused]
                //      = 0x40400000 
                //   float2 g_SandBumpTexcoordScale;    // Offset:  468 Size:     8 [unused]
                //      = 0x40600000 0x40600000 
                //   float g_SandBumpHeightScale;       // Offset:  476 Size:     4 [unused]
                //      = 0x3f000000 
                //   float g_TerrainSpecularIntensity;  // Offset:  480 Size:     4 [unused]
                //      = 0x3f000000 
                //   float2 g_WaterMicroBumpTexcoordScale;// Offset:  484 Size:     8 [unused]
                //      = 0x43610000 0x43610000 
                //   float2 g_WaterBumpTexcoordScale;   // Offset:  496 Size:     8 [unused]
                //      = 0x40e00000 0x40e00000 
                //   float g_WaterHeightBumpScale;      // Offset:  504 Size:     4 [unused]
                //      = 0x3f800000 
                //   float3 g_WaterDeepColor;           // Offset:  512 Size:    12 [unused]
                //      = 0x3dcccccd 0x3ecccccd 0x3f333333 
                //   float3 g_WaterScatterColor;        // Offset:  528 Size:    12 [unused]
                //      = 0x3e99999a 0x3f333333 0x3f19999a 
                //   float3 g_WaterSpecularColor;       // Offset:  544 Size:    12 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 
                //   float g_WaterSpecularIntensity;    // Offset:  556 Size:     4 [unused]
                //      = 0x43af0000 
                //   float g_WaterSpecularPower;        // Offset:  560 Size:     4 [unused]
                //      = 0x447a0000 
                //   float2 g_WaterColorIntensity;      // Offset:  564 Size:     8 [unused]
                //      = 0x3dcccccd 0x3e4ccccd 
                //   float3 g_AtmosphereBrightColor;    // Offset:  576 Size:    12 [unused]
                //      = 0x3f800000 0x3f8ccccd 0x3fb33333 
                //   float3 g_AtmosphereDarkColor;      // Offset:  592 Size:    12 [unused]
                //      = 0x3f19999a 0x3f19999a 0x3f333333 
                //   float g_FogDensity;                // Offset:  604 Size:     4 [unused]
                //      = 0x3abb3ee7 
                //   float2 g_HeightFieldOrigin;        // Offset:  608 Size:     8 [unused]
                //      = 0x00000000 0x00000000 
                //   float g_HeightFieldSize;           // Offset:  616 Size:     4
                //      = 0x44000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinearWrap                 sampler      NA          NA    0        1
                // g_HeightfieldTexture              texture  float4          2d    0        1
                // cb0                               cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float   x   
                // ORIGIN                   0    yz         0     NONE   float    yz 
                // SV_TessFactor            1   x           1 QUADEDGE   float   x   
                // SIZE                     0    yz         1     NONE   float    yz 
                // SV_TessFactor            2   x           2 QUADEDGE   float   x   
                // SV_TessFactor            3   x           3 QUADEDGE   float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT   float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // ORIGIN                   0   xy          0     NONE   float   xy  
                // SIZE                     0     zw        0     NONE   float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // DUMMY                    0   x           0     NONE   float   x   
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           1
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 1
                dcl_output_control_point_count 1
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                hs_control_point_phase 
                dcl_output o0.x
                //
                // Initial variable locations:
                //   o0.x <- <PatchHS return value>; 
                //   v[0][0].x <- inputPatch[0].origin.x; v[0][0].y <- inputPatch[0].origin.y; v[0][0].z <- inputPatch[0].size.x; v[0][0].w <- inputPatch[0].size.y
                //
                #line 404 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                itof o0.x, l(0)
                ret 
                hs_join_phase 
                dcl_input vicp[1][0].xy
                dcl_input vicp[1][0].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output o0.yz
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output o1.yz
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 5
                
                #line 337
                itof r0.x, l(0)  // r0.x <- inside_tessellation_factor
                itof r0.y, l(0)  // r0.y <- in_frustum
                mov r0.zw, vicp[0][0].xxxy  // r0.z <- output.origin.x; r0.w <- output.origin.y
                mov r1.xy, vicp[0][0].zwzz  // r1.x <- output.size.x; r1.y <- output.size.y
                div r1.zw, vicp[0][0].zzzw, l(0.000000, 0.000000, 2.000000, 2.000000)
                add r1.zw, r1.zzzw, vicp[0][0].xxxy
                div r2.xy, r1.zwzz, cb0[38].zzzz  // r2.x <- texcoord0to1.x; r2.y <- texcoord0to1.y
                itof r1.z, l(1)
                mov r1.w, -r2.y
                add r2.z, r1.w, r1.z  // r2.z <- texcoord0to1.y
                
                #line 347
                mul r1.z, l(0.500000), vicp[0][0].z
                add r3.x, r1.z, vicp[0][0].x  // r3.x <- patch_center.x
                itof r1.z, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r1.z, r2.xzxx, t0.xywz, s0, r1.z
                mul r3.y, r1.z, cb0[1].y  // r3.y <- patch_center.y
                mul r1.z, l(0.500000), vicp[0][0].w
                add r3.z, r1.z, vicp[0][0].y  // r3.z <- patch_center.z
                mov r2.xyz, -cb0[23].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- camera_to_patch_vector.x; r2.y <- camera_to_patch_vector.y; r2.z <- camera_to_patch_vector.z
                dp3 r1.z, r2.xyzx, cb0[24].xyzx
                mul r4.xyz, r1.zzzz, cb0[24].xyzx
                mov r2.xyz, -r2.xyzx
                add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- patch_to_camera_direction_vector.x; r2.y <- patch_to_camera_direction_vector.y; r2.z <- patch_to_camera_direction_vector.z
                dp3 r1.z, r2.xyzx, r2.xyzx
                rsq r1.z, r1.z
                mul r4.xyz, r1.zzzz, r2.xyzx
                itof r1.z, l(2)
                mul r1.z, r1.z, vicp[0][0].z
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w
                min r1.z, r1.w, r1.z
                mul r2.xyz, r1.zzzz, r4.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- patch_center_realigned.x; r2.y <- patch_center_realigned.y; r2.z <- patch_center_realigned.z
                mov r2.w, l(1.000000)
                dp4 r1.z, r2.xyzw, cb0[7].xyzw  // r1.z <- patch_screenspace_center.x
                dp4 r1.w, r2.xyzw, cb0[8].xyzw  // r1.w <- patch_screenspace_center.y
                dp4 r2.x, r2.xyzw, cb0[10].xyzw  // r2.x <- patch_screenspace_center.w
                div r2.y, r1.z, r2.x
                lt r2.y, l(-1.000000), r2.y
                div r1.z, r1.z, r2.x
                lt r1.z, r1.z, l(1.000000)
                and r1.z, r1.z, r2.y
                div r2.y, r1.w, r2.x
                lt r2.y, l(-1.000000), r2.y
                and r1.z, r1.z, r2.y
                div r1.w, r1.w, r2.x
                lt r1.w, r1.w, l(1.000000)
                and r1.z, r1.w, r1.z
                itof r1.w, l(0)
                lt r1.w, r1.w, r2.x
                and r1.z, r1.w, r1.z
                mov r2.xyz, -cb0[23].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w
                itof r2.x, l(2)
                mul r2.x, r2.x, vicp[0][0].z
                lt r1.w, r1.w, r2.x
                or r1.z, r1.w, r1.z
                if_nz r1.z
                
                #line 357
                  itof r0.y, l(1)
                endif 
                ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), r0.y
                itof r1.z, l(0)
                eq r1.z, r1.z, cb0[0].z
                or r0.y, r0.y, r1.z
                if_nz r0.y
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r2.y, l(0.500000), vicp[0][0].w
                  itof r2.x, l(0)
                  mov r2.xy, -r2.xyxx
                  add r1.zw, r1.zzzw, r2.xxxy
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r2.x, r0.y, cb0[1].x  // r2.x <- <CalculateTessellationFactor return value>
                
                #line 363
                  mov r2.x, r2.x  // r2.x <- tesselation_factor
                  mov r2.x, r2.x  // r2.x <- output.Edges[0]
                  add r0.x, r0.x, r2.x
                
                #line 368
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r3.x, l(0.500000), vicp[0][0].z
                  itof r3.y, l(0)
                  mov r2.zw, -r3.xxxy
                  add r1.zw, r1.zzzw, r2.zzzw
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r2.y, r0.y, cb0[1].x  // r2.y <- <CalculateTessellationFactor return value>
                
                #line 369
                  mov r2.y, r2.y  // r2.y <- tesselation_factor
                  mov r2.y, r2.y  // r2.y <- output.Edges[1]
                  add r0.x, r0.x, r2.y
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r3.y, l(0.500000), vicp[0][0].w
                  mov r3.x, vicp[0][0].z
                  mov r2.zw, -r3.xxxy
                  add r1.zw, r1.zzzw, r2.zzzw
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r3.x, r0.y, cb0[1].x  // r3.x <- <CalculateTessellationFactor return value>
                
                #line 374
                  mov r3.x, r3.x  // r3.x <- tesselation_factor
                  mov r3.x, r3.x  // r3.x <- output.Edges[2]
                  add r0.x, r0.x, r3.x
                  mov r1.zw, -vicp[0][0].xxxy
                  add r1.zw, r1.zzzw, cb0[23].xxxz
                  mul r4.x, l(0.500000), vicp[0][0].z
                  mov r4.y, vicp[0][0].w
                  mov r2.zw, -r4.xxxy
                  add r1.zw, r1.zzzw, r2.zzzw
                  dp2 r0.y, r1.zwzz, r1.zwzz
                  sqrt r0.y, r0.y  // r0.y <- distance_to_camera
                  nop 
                  mov r0.y, r0.y
                
                #line 170
                  itof r1.z, l(1)
                  mul r0.y, r0.y, l(0.015000)
                  div r0.y, r1.z, r0.y
                  mul r0.y, r0.y, cb0[0].w
                  mov r1.z, -cb0[1].x
                  add r0.y, r0.y, r1.z
                  mul r0.y, r0.y, cb0[0].y
                  add r3.y, r0.y, cb0[1].x  // r3.y <- <CalculateTessellationFactor return value>
                
                #line 379
                  mov r3.y, r3.y  // r3.y <- tesselation_factor
                  mov r3.y, r3.y  // r3.y <- output.Edges[3]
                  add r0.x, r0.x, r3.y
                  mul r3.w, r0.x, l(0.250000)  // r3.w <- output.Inside[1]
                  mov r3.z, r3.w  // r3.z <- output.Inside[0]
                else   // Prior locations: r3.x <- patch_center.x; r3.y <- patch_center.y; r3.z <- patch_center.z
                
                #line 386
                  itof r2.x, l(-1)  // r2.x <- output.Edges[0]
                  itof r2.y, l(-1)  // r2.y <- output.Edges[1]
                  itof r3.x, l(-1)  // r3.x <- output.Edges[2]
                  itof r3.y, l(-1)  // r3.y <- output.Edges[3]
                  itof r3.z, l(-1)  // r3.z <- output.Inside[0]
                  itof r3.w, l(-1)  // r3.w <- output.Inside[1]
                endif 
                mov o0.yz, r0.zzwz
                mov o1.yz, r1.xxyx
                mov o0.x, r2.x
                mov o1.x, r2.y
                mov r3.xyzw, r3.xyzw  // r3.x <- <PatchConstantHS return value>.Edges[2]; r3.y <- <PatchConstantHS return value>.Edges[3]; r3.z <- <PatchConstantHS return value>.Inside[0]; r3.w <- <PatchConstantHS return value>.Inside[1]
                mov o2.x, r3.x
                mov o3.x, r3.y
                mov o4.x, r3.z
                mov o5.x, r3.w
                ret 
                // Approximately 173 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cb0
                // {
                //
                //   float g_RenderCaustics;            // Offset:    0 Size:     4 [unused]
                //   float g_UseDynamicLOD;             // Offset:    4 Size:     4
                //   float g_FrustumCullInHS;           // Offset:    8 Size:     4 [unused]
                //   float g_DynamicTessFactor;         // Offset:   12 Size:     4
                //   float g_StaticTessFactor;          // Offset:   16 Size:     4
                //   float g_TerrainBeingRendered;      // Offset:   20 Size:     4 [unused]
                //   float g_HalfSpaceCullSign;         // Offset:   24 Size:     4 [unused]
                //   float g_HalfSpaceCullPosition;     // Offset:   28 Size:     4 [unused]
                //   float g_SkipCausticsCalculation;   // Offset:   32 Size:     4 [unused]
                //   int g_MSSamples;                   // Offset:   36 Size:     4 [unused]
                //   float4x4 g_ModelViewMatrix;        // Offset:   48 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrix;// Offset:  112 Size:    64
                //   float4x4 g_ModelViewProjectionMatrixInv;// Offset:  176 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrix;// Offset:  240 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrixInv;// Offset:  304 Size:    64 [unused]
                //   float3 g_CameraPosition;           // Offset:  368 Size:    12
                //   float3 g_CameraDirection;          // Offset:  384 Size:    12 [unused]
                //   float3 g_LightPosition;            // Offset:  400 Size:    12 [unused]
                //   float2 g_WaterBumpTexcoordShift;   // Offset:  416 Size:     8
                //   float2 g_ScreenSizeInv;            // Offset:  424 Size:     8 [unused]
                //   float g_MainBufferSizeMultiplier;  // Offset:  432 Size:     4 [unused]
                //   float g_ZNear;                     // Offset:  436 Size:     4 [unused]
                //   float g_ZFar;                      // Offset:  440 Size:     4 [unused]
                //   float2 g_DiffuseTexcoordScale;     // Offset:  448 Size:     8 [unused]
                //      = 0x43020000 0x43020000 
                //   float2 g_RockBumpTexcoordScale;    // Offset:  456 Size:     8 [unused]
                //      = 0x41200000 0x41200000 
                //   float g_RockBumpHeightScale;       // Offset:  464 Size:     4 [unused]
                //      = 0x40400000 
                //   float2 g_SandBumpTexcoordScale;    // Offset:  468 Size:     8 [unused]
                //      = 0x40600000 0x40600000 
                //   float g_SandBumpHeightScale;       // Offset:  476 Size:     4 [unused]
                //      = 0x3f000000 
                //   float g_TerrainSpecularIntensity;  // Offset:  480 Size:     4 [unused]
                //      = 0x3f000000 
                //   float2 g_WaterMicroBumpTexcoordScale;// Offset:  484 Size:     8
                //      = 0x43610000 0x43610000 
                //   float2 g_WaterBumpTexcoordScale;   // Offset:  496 Size:     8
                //      = 0x40e00000 0x40e00000 
                //   float g_WaterHeightBumpScale;      // Offset:  504 Size:     4
                //      = 0x3f800000 
                //   float3 g_WaterDeepColor;           // Offset:  512 Size:    12 [unused]
                //      = 0x3dcccccd 0x3ecccccd 0x3f333333 
                //   float3 g_WaterScatterColor;        // Offset:  528 Size:    12 [unused]
                //      = 0x3e99999a 0x3f333333 0x3f19999a 
                //   float3 g_WaterSpecularColor;       // Offset:  544 Size:    12 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 
                //   float g_WaterSpecularIntensity;    // Offset:  556 Size:     4 [unused]
                //      = 0x43af0000 
                //   float g_WaterSpecularPower;        // Offset:  560 Size:     4 [unused]
                //      = 0x447a0000 
                //   float2 g_WaterColorIntensity;      // Offset:  564 Size:     8 [unused]
                //      = 0x3dcccccd 0x3e4ccccd 
                //   float3 g_AtmosphereBrightColor;    // Offset:  576 Size:    12 [unused]
                //      = 0x3f800000 0x3f8ccccd 0x3fb33333 
                //   float3 g_AtmosphereDarkColor;      // Offset:  592 Size:    12 [unused]
                //      = 0x3f19999a 0x3f19999a 0x3f333333 
                //   float g_FogDensity;                // Offset:  604 Size:     4 [unused]
                //      = 0x3abb3ee7 
                //   float2 g_HeightFieldOrigin;        // Offset:  608 Size:     8 [unused]
                //      = 0x00000000 0x00000000 
                //   float g_HeightFieldSize;           // Offset:  616 Size:     4
                //      = 0x44000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinearWrap                 sampler      NA          NA    0        1
                // g_WaterBumpTexture                texture  float4          2d    0        1
                // g_DepthMapTexture                 texture  float4          2d    1        1
                // cb0                               cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float       
                // ORIGIN                   0    yz         0     NONE   float    yz 
                // SV_TessFactor            1   x           1 QUADEDGE   float       
                // SIZE                     0    yz         1     NONE   float    yz 
                // SV_TessFactor            2   x           2 QUADEDGE   float       
                // SV_TessFactor            3   x           3 QUADEDGE   float       
                // SV_InsideTessFactor      0   x           4  QUADINT   float       
                // SV_InsideTessFactor      1   x           5  QUADINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // DUMMY                    0   x           0     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 1   xyz         3     NONE   float   xyz 
                // TEXCOORD                 2   xyzw        4     NONE   float       
                // TEXCOORD                 3   xyzw        5     NONE   float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           1
                //
                ds_5_0
                dcl_input_control_point_count 1
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vpc0.yz
                dcl_input vpc1.yz
                dcl_input vDomain.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o5.xyzw
                dcl_temps 9
                //
                // Initial variable locations:
                //   vpc0.y <- input.origin.x; vpc0.z <- input.origin.y; 
                //   vpc1.y <- input.size.x; vpc1.z <- input.size.y; 
                //   vpc0.x <- input.Edges[0]; 
                //   vpc1.x <- input.Edges[1]; 
                //   vpc2.x <- input.Edges[2]; 
                //   vpc3.x <- input.Edges[3]; 
                //   vpc4.x <- input.Inside[0]; 
                //   vpc5.x <- input.Inside[1]; 
                //   vDomain.x <- uv.x; vDomain.y <- uv.y; 
                //   o4.x <- <WaterPatchDS return value>.layerdef.x; o4.y <- <WaterPatchDS return value>.layerdef.y; o4.z <- <WaterPatchDS return value>.layerdef.z; o4.w <- <WaterPatchDS return value>.layerdef.w; 
                //   o5.x <- <WaterPatchDS return value>.depthmap_scaler.x; o5.y <- <WaterPatchDS return value>.depthmap_scaler.y; o5.z <- <WaterPatchDS return value>.depthmap_scaler.z; o5.w <- <WaterPatchDS return value>.depthmap_scaler.w; 
                //   o3.x <- <WaterPatchDS return value>.positionWS.x; o3.y <- <WaterPatchDS return value>.positionWS.y; o3.z <- <WaterPatchDS return value>.positionWS.z; 
                //   o2.x <- <WaterPatchDS return value>.normal.x; o2.y <- <WaterPatchDS return value>.normal.y; o2.z <- <WaterPatchDS return value>.normal.z; 
                //   o1.x <- <WaterPatchDS return value>.texcoord.x; o1.y <- <WaterPatchDS return value>.texcoord.y; 
                //   o0.x <- <WaterPatchDS return value>.position.x; o0.y <- <WaterPatchDS return value>.position.y; o0.z <- <WaterPatchDS return value>.position.z; o0.w <- <WaterPatchDS return value>.position.w; 
                //   vicp[0][0].x <- inputPatch
                //
                #line 564 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                mul r0.xy, vpc1.yzyy, vDomain.xyxx
                add r0.xy, r0.xyxx, vpc0.yzyy
                div r0.xy, r0.xyxx, cb0[38].zzzz  // r0.x <- texcoord0to1.x; r0.y <- texcoord0to1.y
                
                #line 569
                itof r0.w, l(1)
                mov r1.x, -r0.y
                add r0.z, r0.w, r1.x
                itof r0.w, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xzxx, t1.xyzw, s0, r0.w  // r1.x <- depthmap_scaler.x; r1.y <- depthmap_scaler.y; r1.z <- depthmap_scaler.z; r1.w <- depthmap_scaler.w
                
                #line 572
                mul r0.zw, vpc1.yyyz, vDomain.xxxy
                add r2.xz, r0.zzwz, vpc0.yyzy  // r2.x <- vertexPosition.x; r2.z <- vertexPosition.z
                mov r0.z, -cb0[31].z
                itof r0.w, l(2)
                div r2.y, r0.z, r0.w  // r2.y <- vertexPosition.y
                nop 
                mov r2.xz, r2.xxzx
                mov r2.y, r2.y
                
                #line 189
                mov r3.xyzw, l(0,4.000000,0,0)  // r3.x <- water_normal.x; r3.y <- water_normal.y; r3.z <- water_normal.z; r3.w <- water_normal.w
                
                #line 193
                mov r0.z, l(1.000000)  // r0.z <- texcoord_scale
                mov r0.w, l(1.000000)  // r0.w <- height_disturbance_scale
                mov r2.w, l(1.000000)  // r2.w <- normal_disturbance_scale
                mov r4.xy, l(1.000000,1.000000,0,0)  // r4.x <- variance.x; r4.y <- variance.y
                
                #line 200
                mov r5.xyz, -r2.xyzx
                add r5.xyz, r5.xyzx, cb0[23].xyzx
                dp3 r4.w, r5.xyzx, r5.xyzx
                sqrt r4.w, r4.w  // r4.w <- distance_to_camera
                nop 
                mov r4.w, r4.w
                
                #line 177
                itof r5.x, l(128)
                nop 
                mov r4.w, r4.w
                
                #line 170
                itof r5.y, l(1)
                mul r4.w, r4.w, l(0.015000)
                div r4.w, r5.y, r4.w
                mul r4.w, r4.w, cb0[0].w
                mov r5.y, -cb0[1].x
                add r4.w, r4.w, r5.y
                mul r4.w, r4.w, cb0[0].y
                add r4.w, r4.w, cb0[1].x  // r4.w <- <CalculateTessellationFactor return value>
                
                #line 177
                div r4.w, r5.x, r4.w
                log r4.w, r4.w  // r4.w <- <CalculateMIPLevelForDisplacementTextures return value>
                
                #line 201
                div r4.w, r4.w, l(2.000000)
                mov r5.x, l(-2.000000)
                add r4.w, r4.w, r5.x  // r4.w <- water_miplevel
                mul r5.xy, r2.xzxx, cb0[31].xyxx
                div r5.xy, r5.xyxx, cb0[38].zzzz  // r5.x <- tc.x; r5.y <- tc.y
                
                #line 205
                itof r5.z, l(0)  // r5.z <- i
                mov r6.xy, r3.xzxx  // r6.x <- water_normal.x; r6.y <- water_normal.z
                mov r5.w, r3.w  // r5.w <- water_normal.w
                mov r6.z, r0.z  // r6.z <- texcoord_scale
                mov r6.w, r0.w  // r6.w <- height_disturbance_scale
                mov r7.x, r2.w  // r7.x <- normal_disturbance_scale
                mov r4.z, r4.x  // r4.z <- variance.x
                mov r7.y, r5.z  // r7.y <- i
                loop 
                  itof r7.z, l(5)
                  lt r7.z, r7.y, r7.z
                  breakc_z r7.z
                  mul r7.zw, r5.xxxy, r6.zzzz
                  mul r8.xy, cb0[26].xyxx, l(0.030000, 0.030000, 0.000000, 0.000000)
                  mul r8.xy, r4.zyzz, r8.xyxx
                  add r7.zw, r7.zzzw, r8.xxxy
                  sample_l_indexable(texture2d)(float,float,float,float) r8.xyz, r7.zwzz, t0.xywz, s0, r4.w
                  mov r8.xyz, r8.xyzx  // r8.x <- texvalue.x; r8.y <- texvalue.z; r8.z <- texvalue.w
                  mul r4.z, r4.z, l(-1.000000)
                  itof r7.zw, l(0, 0, 2, 2)
                  mul r7.zw, r8.xxxy, r7.zzzw
                  mov r8.xy, l(-1.000000,-1.000000,-0.000000,-0.000000)
                  add r7.zw, r7.zzzw, r8.xxxy
                  mul r7.zw, r7.xxxx, r7.zzzw
                  add r6.xy, r6.xyxx, r7.zwzz
                  mov r7.z, l(-0.500000)
                  add r7.z, r7.z, r8.z
                  mul r7.z, r6.w, r7.z
                  add r5.w, r5.w, r7.z
                  mul r6.z, r6.z, l(1.400000)
                  mul r6.w, r6.w, l(0.650000)
                  mul r7.x, r7.x, l(0.650000)
                  add r7.y, r7.y, l(1.000000)
                endloop 
                mov r3.xz, r6.xxyx  // r3.x <- water_normal.x; r3.z <- water_normal.z
                mul r4.w, r5.w, cb0[31].z  // r4.w <- water_normal.w
                
                #line 216
                dp3 r0.z, r3.xyzx, r3.xyzx
                rsq r0.z, r0.z
                mul r4.xyz, r0.zzzz, r3.xyzx  // r4.x <- <CombineWaterNormal return value>.x; r4.y <- <CombineWaterNormal return value>.y; r4.z <- <CombineWaterNormal return value>.z
                mov r4.w, r4.w  // r4.w <- <CombineWaterNormal return value>.w
                
                #line 574
                mov r4.xyzw, r4.xyzw  // r4.x <- water_normal.x; r4.y <- water_normal.y; r4.z <- water_normal.z; r4.w <- water_normal.w
                
                #line 577
                itof r3.xyz, l(0, 1, 0, 0)
                dp3 r0.z, r4.xyzx, r4.xyzx
                rsq r0.z, r0.z
                mul r4.xyz, r0.zzzz, r4.xyzx
                mul r0.z, r1.y, l(0.600000)
                add r0.z, r0.z, l(0.400000)
                mov r5.xyz, -r3.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx
                mul r4.xyz, r0.zzzz, r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- water_normal.x; r3.y <- water_normal.y; r3.z <- water_normal.z
                mul r0.z, r4.w, cb0[31].z
                mul r0.w, r1.y, l(0.600000)
                add r0.w, r0.w, l(0.400000)
                mul r0.z, r0.w, r0.z
                add r4.y, r0.z, r2.y  // r4.y <- vertexPosition.y
                mul r0.zw, r3.xxxz, l(0.000000, 0.000000, 0.500000, 0.500000)
                mul r2.y, r1.y, l(0.600000)
                add r2.y, r2.y, l(0.400000)
                mul r0.zw, r0.zzzw, r2.yyyy
                mov r0.zw, -r0.zzzw
                add r4.xz, r0.zzwz, r2.xxzx  // r4.x <- vertexPosition.x; r4.z <- vertexPosition.z
                
                #line 582
                mov r4.w, l(1.000000)
                dp4 r2.x, r4.xyzw, cb0[7].xyzw  // r2.x <- output.position.x
                dp4 r2.y, r4.xyzw, cb0[8].xyzw  // r2.y <- output.position.y
                dp4 r2.z, r4.xyzw, cb0[9].xyzw  // r2.z <- output.position.z
                dp4 r2.w, r4.xyzw, cb0[10].xyzw  // r2.w <- output.position.w
                mul r0.xy, r0.xyxx, cb0[30].yzyy
                mul r0.zw, cb0[26].xxxy, l(0.000000, 0.000000, 0.070000, 0.070000)
                add r0.xy, r0.zwzz, r0.xyxx  // r0.x <- output.texcoord.x; r0.y <- output.texcoord.y
                dp3 r0.z, r3.xyzx, r3.xyzx
                rsq r0.z, r0.z
                mul r3.xyz, r0.zzzz, r3.xyzx  // r3.x <- output.normal.x; r3.y <- output.normal.y; r3.z <- output.normal.z
                mov r1.xyzw, r1.xyzw  // r1.x <- output.depthmap_scaler.x; r1.y <- output.depthmap_scaler.y; r1.z <- output.depthmap_scaler.z; r1.w <- output.depthmap_scaler.w
                mov r4.xyz, r4.xyzx  // r4.x <- output.positionWS.x; r4.y <- output.positionWS.y; r4.z <- output.positionWS.z
                mov o0.xyzw, r2.xyzw
                mov o5.xyzw, r1.xyzw
                mov o2.xyz, r3.xyzx
                mov o3.xyz, r4.xyzx
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 126 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_4_0
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   o0.x <- <ColorPS return value>.x; o0.y <- <ColorPS return value>.y; o0.z <- <ColorPS return value>.z; o0.w <- <ColorPS return value>.w
                //
                #line 933 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                mov r0.xyzw, l(1.000000,1.000000,1.000000,0)  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w
                
                #line 209 "D:\Project\GameEngine\media\ocean2\common.fx"
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 3 instruction slots used
                            
            };
        }

    }

    technique11 RenderSky
    {
        pass Solid
        {
            RasterizerState = NoCullMS;
            DS_StencilRef = uint(0);
            DepthStencilState = DepthNormal;
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NoBlending;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cb0
                // {
                //
                //   float g_RenderCaustics;            // Offset:    0 Size:     4 [unused]
                //   float g_UseDynamicLOD;             // Offset:    4 Size:     4 [unused]
                //   float g_FrustumCullInHS;           // Offset:    8 Size:     4 [unused]
                //   float g_DynamicTessFactor;         // Offset:   12 Size:     4 [unused]
                //   float g_StaticTessFactor;          // Offset:   16 Size:     4 [unused]
                //   float g_TerrainBeingRendered;      // Offset:   20 Size:     4 [unused]
                //   float g_HalfSpaceCullSign;         // Offset:   24 Size:     4 [unused]
                //   float g_HalfSpaceCullPosition;     // Offset:   28 Size:     4 [unused]
                //   float g_SkipCausticsCalculation;   // Offset:   32 Size:     4 [unused]
                //   int g_MSSamples;                   // Offset:   36 Size:     4 [unused]
                //   float4x4 g_ModelViewMatrix;        // Offset:   48 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrix;// Offset:  112 Size:    64
                //   float4x4 g_ModelViewProjectionMatrixInv;// Offset:  176 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrix;// Offset:  240 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrixInv;// Offset:  304 Size:    64 [unused]
                //   float3 g_CameraPosition;           // Offset:  368 Size:    12 [unused]
                //   float3 g_CameraDirection;          // Offset:  384 Size:    12 [unused]
                //   float3 g_LightPosition;            // Offset:  400 Size:    12 [unused]
                //   float2 g_WaterBumpTexcoordShift;   // Offset:  416 Size:     8 [unused]
                //   float2 g_ScreenSizeInv;            // Offset:  424 Size:     8 [unused]
                //   float g_MainBufferSizeMultiplier;  // Offset:  432 Size:     4 [unused]
                //   float g_ZNear;                     // Offset:  436 Size:     4 [unused]
                //   float g_ZFar;                      // Offset:  440 Size:     4 [unused]
                //   float2 g_DiffuseTexcoordScale;     // Offset:  448 Size:     8 [unused]
                //      = 0x43020000 0x43020000 
                //   float2 g_RockBumpTexcoordScale;    // Offset:  456 Size:     8 [unused]
                //      = 0x41200000 0x41200000 
                //   float g_RockBumpHeightScale;       // Offset:  464 Size:     4 [unused]
                //      = 0x40400000 
                //   float2 g_SandBumpTexcoordScale;    // Offset:  468 Size:     8 [unused]
                //      = 0x40600000 0x40600000 
                //   float g_SandBumpHeightScale;       // Offset:  476 Size:     4 [unused]
                //      = 0x3f000000 
                //   float g_TerrainSpecularIntensity;  // Offset:  480 Size:     4 [unused]
                //      = 0x3f000000 
                //   float2 g_WaterMicroBumpTexcoordScale;// Offset:  484 Size:     8 [unused]
                //      = 0x43610000 0x43610000 
                //   float2 g_WaterBumpTexcoordScale;   // Offset:  496 Size:     8 [unused]
                //      = 0x40e00000 0x40e00000 
                //   float g_WaterHeightBumpScale;      // Offset:  504 Size:     4 [unused]
                //      = 0x3f800000 
                //   float3 g_WaterDeepColor;           // Offset:  512 Size:    12 [unused]
                //      = 0x3dcccccd 0x3ecccccd 0x3f333333 
                //   float3 g_WaterScatterColor;        // Offset:  528 Size:    12 [unused]
                //      = 0x3e99999a 0x3f333333 0x3f19999a 
                //   float3 g_WaterSpecularColor;       // Offset:  544 Size:    12 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 
                //   float g_WaterSpecularIntensity;    // Offset:  556 Size:     4 [unused]
                //      = 0x43af0000 
                //   float g_WaterSpecularPower;        // Offset:  560 Size:     4 [unused]
                //      = 0x447a0000 
                //   float2 g_WaterColorIntensity;      // Offset:  564 Size:     8 [unused]
                //      = 0x3dcccccd 0x3e4ccccd 
                //   float3 g_AtmosphereBrightColor;    // Offset:  576 Size:    12 [unused]
                //      = 0x3f800000 0x3f8ccccd 0x3fb33333 
                //   float3 g_AtmosphereDarkColor;      // Offset:  592 Size:    12 [unused]
                //      = 0x3f19999a 0x3f19999a 0x3f333333 
                //   float g_FogDensity;                // Offset:  604 Size:     4 [unused]
                //      = 0x3abb3ee7 
                //   float2 g_HeightFieldOrigin;        // Offset:  608 Size:     8 [unused]
                //      = 0x00000000 0x00000000 
                //   float g_HeightFieldSize;           // Offset:  616 Size:     4 [unused]
                //      = 0x44000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cb0                               cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 1   xyz         3     NONE   float   xyz 
                // TEXCOORD                 2   xyzw        4     NONE   float       
                // TEXCOORD                 3   xyzw        5     NONE   float       
                //
                vs_4_0
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_input v0.xyzw
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o3.xyz
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
                //   v1.x <- input.texcoord.x; v1.y <- input.texcoord.y; 
                //   o2.x <- <SkyVS return value>.normal.x; o2.y <- <SkyVS return value>.normal.y; o2.z <- <SkyVS return value>.normal.z; 
                //   o4.x <- <SkyVS return value>.layerdef.x; o4.y <- <SkyVS return value>.layerdef.y; o4.z <- <SkyVS return value>.layerdef.z; o4.w <- <SkyVS return value>.layerdef.w; 
                //   o5.x <- <SkyVS return value>.depthmap_scaler.x; o5.y <- <SkyVS return value>.depthmap_scaler.y; o5.z <- <SkyVS return value>.depthmap_scaler.z; o5.w <- <SkyVS return value>.depthmap_scaler.w; 
                //   o3.x <- <SkyVS return value>.positionWS.x; o3.y <- <SkyVS return value>.positionWS.y; o3.z <- <SkyVS return value>.positionWS.z; 
                //   o1.x <- <SkyVS return value>.texcoord.x; o1.y <- <SkyVS return value>.texcoord.y; 
                //   o0.x <- <SkyVS return value>.position.x; o0.y <- <SkyVS return value>.position.y; o0.z <- <SkyVS return value>.position.z; o0.w <- <SkyVS return value>.position.w
                //
                #line 299 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                dp4 r0.x, v0.xyzw, cb0[7].xyzw  // r0.x <- output.position.x
                dp4 r0.y, v0.xyzw, cb0[8].xyzw  // r0.y <- output.position.y
                dp4 r0.z, v0.xyzw, cb0[9].xyzw  // r0.z <- output.position.z
                dp4 r0.w, v0.xyzw, cb0[10].xyzw  // r0.w <- output.position.w
                mov r1.xyz, v0.xyzx  // r1.x <- output.positionWS.x; r1.y <- output.positionWS.y; r1.z <- output.positionWS.z
                mov r2.xy, v1.xyxx  // r2.x <- output.texcoord.x; r2.y <- output.texcoord.y
                mov o0.xyzw, r0.xyzw
                mov o3.xyz, r1.xyzx
                mov o1.xy, r2.xyxx
                ret 
                // Approximately 10 instruction slots used
                            
            };
            HullShader = NULL;
            DomainShader = NULL;
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cb0
                // {
                //
                //   float g_RenderCaustics;            // Offset:    0 Size:     4 [unused]
                //   float g_UseDynamicLOD;             // Offset:    4 Size:     4 [unused]
                //   float g_FrustumCullInHS;           // Offset:    8 Size:     4 [unused]
                //   float g_DynamicTessFactor;         // Offset:   12 Size:     4 [unused]
                //   float g_StaticTessFactor;          // Offset:   16 Size:     4 [unused]
                //   float g_TerrainBeingRendered;      // Offset:   20 Size:     4 [unused]
                //   float g_HalfSpaceCullSign;         // Offset:   24 Size:     4 [unused]
                //   float g_HalfSpaceCullPosition;     // Offset:   28 Size:     4 [unused]
                //   float g_SkipCausticsCalculation;   // Offset:   32 Size:     4 [unused]
                //   int g_MSSamples;                   // Offset:   36 Size:     4 [unused]
                //   float4x4 g_ModelViewMatrix;        // Offset:   48 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrix;// Offset:  112 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrixInv;// Offset:  176 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrix;// Offset:  240 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrixInv;// Offset:  304 Size:    64 [unused]
                //   float3 g_CameraPosition;           // Offset:  368 Size:    12
                //   float3 g_CameraDirection;          // Offset:  384 Size:    12 [unused]
                //   float3 g_LightPosition;            // Offset:  400 Size:    12
                //   float2 g_WaterBumpTexcoordShift;   // Offset:  416 Size:     8 [unused]
                //   float2 g_ScreenSizeInv;            // Offset:  424 Size:     8 [unused]
                //   float g_MainBufferSizeMultiplier;  // Offset:  432 Size:     4 [unused]
                //   float g_ZNear;                     // Offset:  436 Size:     4 [unused]
                //   float g_ZFar;                      // Offset:  440 Size:     4 [unused]
                //   float2 g_DiffuseTexcoordScale;     // Offset:  448 Size:     8 [unused]
                //      = 0x43020000 0x43020000 
                //   float2 g_RockBumpTexcoordScale;    // Offset:  456 Size:     8 [unused]
                //      = 0x41200000 0x41200000 
                //   float g_RockBumpHeightScale;       // Offset:  464 Size:     4 [unused]
                //      = 0x40400000 
                //   float2 g_SandBumpTexcoordScale;    // Offset:  468 Size:     8 [unused]
                //      = 0x40600000 0x40600000 
                //   float g_SandBumpHeightScale;       // Offset:  476 Size:     4 [unused]
                //      = 0x3f000000 
                //   float g_TerrainSpecularIntensity;  // Offset:  480 Size:     4 [unused]
                //      = 0x3f000000 
                //   float2 g_WaterMicroBumpTexcoordScale;// Offset:  484 Size:     8 [unused]
                //      = 0x43610000 0x43610000 
                //   float2 g_WaterBumpTexcoordScale;   // Offset:  496 Size:     8 [unused]
                //      = 0x40e00000 0x40e00000 
                //   float g_WaterHeightBumpScale;      // Offset:  504 Size:     4 [unused]
                //      = 0x3f800000 
                //   float3 g_WaterDeepColor;           // Offset:  512 Size:    12 [unused]
                //      = 0x3dcccccd 0x3ecccccd 0x3f333333 
                //   float3 g_WaterScatterColor;        // Offset:  528 Size:    12 [unused]
                //      = 0x3e99999a 0x3f333333 0x3f19999a 
                //   float3 g_WaterSpecularColor;       // Offset:  544 Size:    12 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 
                //   float g_WaterSpecularIntensity;    // Offset:  556 Size:     4 [unused]
                //      = 0x43af0000 
                //   float g_WaterSpecularPower;        // Offset:  560 Size:     4 [unused]
                //      = 0x447a0000 
                //   float2 g_WaterColorIntensity;      // Offset:  564 Size:     8 [unused]
                //      = 0x3dcccccd 0x3e4ccccd 
                //   float3 g_AtmosphereBrightColor;    // Offset:  576 Size:    12
                //      = 0x3f800000 0x3f8ccccd 0x3fb33333 
                //   float3 g_AtmosphereDarkColor;      // Offset:  592 Size:    12
                //      = 0x3f19999a 0x3f19999a 0x3f333333 
                //   float g_FogDensity;                // Offset:  604 Size:     4 [unused]
                //      = 0x3abb3ee7 
                //   float2 g_HeightFieldOrigin;        // Offset:  608 Size:     8 [unused]
                //      = 0x00000000 0x00000000 
                //   float g_HeightFieldSize;           // Offset:  616 Size:     4 [unused]
                //      = 0x44000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinearWrap                 sampler      NA          NA    0        1
                // g_SkyTexture                      texture  float4          2d    0        1
                // cb0                               cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 1   xyz         3     NONE   float   xyz 
                // TEXCOORD                 2   xyzw        4     NONE   float       
                // TEXCOORD                 3   xyzw        5     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_4_0
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear centroid v1.xy
                dcl_input_ps linear centroid v3.xyz
                dcl_output o0.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
                //   v1.x <- input.texcoord.x; v1.y <- input.texcoord.y; 
                //   v2.x <- input.normal.x; v2.y <- input.normal.y; v2.z <- input.normal.z; 
                //   v3.x <- input.positionWS.x; v3.y <- input.positionWS.y; v3.z <- input.positionWS.z; 
                //   v4.x <- input.layerdef.x; v4.y <- input.layerdef.y; v4.z <- input.layerdef.z; v4.w <- input.layerdef.w; 
                //   v5.x <- input.depthmap_scaler.x; v5.y <- input.depthmap_scaler.y; v5.z <- input.depthmap_scaler.z; v5.w <- input.depthmap_scaler.w; 
                //   o0.x <- <SkyPS return value>.x; o0.y <- <SkyPS return value>.y; o0.z <- <SkyPS return value>.z; o0.w <- <SkyPS return value>.w
                //
                #line 309 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                mov r0.xyz, -v3.xyzx
                add r0.xyz, r0.xyzx, cb0[25].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- pixel_to_light_vector.x; r0.y <- pixel_to_light_vector.y; r0.z <- pixel_to_light_vector.z
                mov r1.xyz, -v3.xyzx
                add r1.xyz, r1.xyzx, cb0[23].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- pixel_to_eye_vector.x; r1.y <- pixel_to_eye_vector.y; r1.z <- pixel_to_eye_vector.z
                mov r0.w, l(1.000000)
                mov r1.w, v1.y
                mul r1.w, r1.w, r1.w
                mul r2.y, r0.w, r1.w
                mov r2.x, v1.x
                sample r2.xyzw, r2.xyxx, t0.xyzw, s0
                mov r2.xyz, r2.xyzx  // r2.x <- color.x; r2.y <- color.y; r2.z <- color.z
                nop 
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 183
                mov r1.xyz, -r1.xyzx
                dp3 r0.x, r0.xyzx, r1.xyzx
                mul r0.x, r0.x, l(0.500000)
                add r0.x, r0.x, l(0.500000)
                mov r0.yzw, -cb0[37].xxyz
                add r0.yzw, r0.yyzw, cb0[36].xxyz
                mul r0.xyz, r0.yzwy, r0.xxxx
                add r0.xyz, r0.xyzx, cb0[37].xyzx  // r0.x <- <CalculateFogColor return value>.x; r0.y <- <CalculateFogColor return value>.y; r0.z <- <CalculateFogColor return value>.z
                
                #line 313
                mov r0.xyz, r0.xyzx  // r0.x <- acolor.x; r0.y <- acolor.y; r0.z <- acolor.z
                max r0.w, v1.y, l(0.000000)
                min r0.w, r0.w, l(1.000000)
                itof r1.x, l(10)
                log r0.w, r0.w
                mul r0.w, r0.w, r1.x
                exp r0.w, r0.w
                mov r1.xyz, -r2.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                itof r0.w, l(1)  // r0.w <- color.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 43 instruction slots used
                            
            };
        }

        pass Wireframe
        {
            RasterizerState = WireframeMS;
            DS_StencilRef = uint(0);
            DepthStencilState = DepthNormal;
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NoBlending;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cb0
                // {
                //
                //   float g_RenderCaustics;            // Offset:    0 Size:     4 [unused]
                //   float g_UseDynamicLOD;             // Offset:    4 Size:     4 [unused]
                //   float g_FrustumCullInHS;           // Offset:    8 Size:     4 [unused]
                //   float g_DynamicTessFactor;         // Offset:   12 Size:     4 [unused]
                //   float g_StaticTessFactor;          // Offset:   16 Size:     4 [unused]
                //   float g_TerrainBeingRendered;      // Offset:   20 Size:     4 [unused]
                //   float g_HalfSpaceCullSign;         // Offset:   24 Size:     4 [unused]
                //   float g_HalfSpaceCullPosition;     // Offset:   28 Size:     4 [unused]
                //   float g_SkipCausticsCalculation;   // Offset:   32 Size:     4 [unused]
                //   int g_MSSamples;                   // Offset:   36 Size:     4 [unused]
                //   float4x4 g_ModelViewMatrix;        // Offset:   48 Size:    64 [unused]
                //   float4x4 g_ModelViewProjectionMatrix;// Offset:  112 Size:    64
                //   float4x4 g_ModelViewProjectionMatrixInv;// Offset:  176 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrix;// Offset:  240 Size:    64 [unused]
                //   float4x4 g_LightModelViewProjectionMatrixInv;// Offset:  304 Size:    64 [unused]
                //   float3 g_CameraPosition;           // Offset:  368 Size:    12 [unused]
                //   float3 g_CameraDirection;          // Offset:  384 Size:    12 [unused]
                //   float3 g_LightPosition;            // Offset:  400 Size:    12 [unused]
                //   float2 g_WaterBumpTexcoordShift;   // Offset:  416 Size:     8 [unused]
                //   float2 g_ScreenSizeInv;            // Offset:  424 Size:     8 [unused]
                //   float g_MainBufferSizeMultiplier;  // Offset:  432 Size:     4 [unused]
                //   float g_ZNear;                     // Offset:  436 Size:     4 [unused]
                //   float g_ZFar;                      // Offset:  440 Size:     4 [unused]
                //   float2 g_DiffuseTexcoordScale;     // Offset:  448 Size:     8 [unused]
                //      = 0x43020000 0x43020000 
                //   float2 g_RockBumpTexcoordScale;    // Offset:  456 Size:     8 [unused]
                //      = 0x41200000 0x41200000 
                //   float g_RockBumpHeightScale;       // Offset:  464 Size:     4 [unused]
                //      = 0x40400000 
                //   float2 g_SandBumpTexcoordScale;    // Offset:  468 Size:     8 [unused]
                //      = 0x40600000 0x40600000 
                //   float g_SandBumpHeightScale;       // Offset:  476 Size:     4 [unused]
                //      = 0x3f000000 
                //   float g_TerrainSpecularIntensity;  // Offset:  480 Size:     4 [unused]
                //      = 0x3f000000 
                //   float2 g_WaterMicroBumpTexcoordScale;// Offset:  484 Size:     8 [unused]
                //      = 0x43610000 0x43610000 
                //   float2 g_WaterBumpTexcoordScale;   // Offset:  496 Size:     8 [unused]
                //      = 0x40e00000 0x40e00000 
                //   float g_WaterHeightBumpScale;      // Offset:  504 Size:     4 [unused]
                //      = 0x3f800000 
                //   float3 g_WaterDeepColor;           // Offset:  512 Size:    12 [unused]
                //      = 0x3dcccccd 0x3ecccccd 0x3f333333 
                //   float3 g_WaterScatterColor;        // Offset:  528 Size:    12 [unused]
                //      = 0x3e99999a 0x3f333333 0x3f19999a 
                //   float3 g_WaterSpecularColor;       // Offset:  544 Size:    12 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 
                //   float g_WaterSpecularIntensity;    // Offset:  556 Size:     4 [unused]
                //      = 0x43af0000 
                //   float g_WaterSpecularPower;        // Offset:  560 Size:     4 [unused]
                //      = 0x447a0000 
                //   float2 g_WaterColorIntensity;      // Offset:  564 Size:     8 [unused]
                //      = 0x3dcccccd 0x3e4ccccd 
                //   float3 g_AtmosphereBrightColor;    // Offset:  576 Size:    12 [unused]
                //      = 0x3f800000 0x3f8ccccd 0x3fb33333 
                //   float3 g_AtmosphereDarkColor;      // Offset:  592 Size:    12 [unused]
                //      = 0x3f19999a 0x3f19999a 0x3f333333 
                //   float g_FogDensity;                // Offset:  604 Size:     4 [unused]
                //      = 0x3abb3ee7 
                //   float2 g_HeightFieldOrigin;        // Offset:  608 Size:     8 [unused]
                //      = 0x00000000 0x00000000 
                //   float g_HeightFieldSize;           // Offset:  616 Size:     4 [unused]
                //      = 0x44000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cb0                               cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 1   xyz         3     NONE   float   xyz 
                // TEXCOORD                 2   xyzw        4     NONE   float       
                // TEXCOORD                 3   xyzw        5     NONE   float       
                //
                vs_4_0
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_input v0.xyzw
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o3.xyz
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
                //   v1.x <- input.texcoord.x; v1.y <- input.texcoord.y; 
                //   o2.x <- <SkyVS return value>.normal.x; o2.y <- <SkyVS return value>.normal.y; o2.z <- <SkyVS return value>.normal.z; 
                //   o4.x <- <SkyVS return value>.layerdef.x; o4.y <- <SkyVS return value>.layerdef.y; o4.z <- <SkyVS return value>.layerdef.z; o4.w <- <SkyVS return value>.layerdef.w; 
                //   o5.x <- <SkyVS return value>.depthmap_scaler.x; o5.y <- <SkyVS return value>.depthmap_scaler.y; o5.z <- <SkyVS return value>.depthmap_scaler.z; o5.w <- <SkyVS return value>.depthmap_scaler.w; 
                //   o3.x <- <SkyVS return value>.positionWS.x; o3.y <- <SkyVS return value>.positionWS.y; o3.z <- <SkyVS return value>.positionWS.z; 
                //   o1.x <- <SkyVS return value>.texcoord.x; o1.y <- <SkyVS return value>.texcoord.y; 
                //   o0.x <- <SkyVS return value>.position.x; o0.y <- <SkyVS return value>.position.y; o0.z <- <SkyVS return value>.position.z; o0.w <- <SkyVS return value>.position.w
                //
                #line 299 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                dp4 r0.x, v0.xyzw, cb0[7].xyzw  // r0.x <- output.position.x
                dp4 r0.y, v0.xyzw, cb0[8].xyzw  // r0.y <- output.position.y
                dp4 r0.z, v0.xyzw, cb0[9].xyzw  // r0.z <- output.position.z
                dp4 r0.w, v0.xyzw, cb0[10].xyzw  // r0.w <- output.position.w
                mov r1.xyz, v0.xyzx  // r1.x <- output.positionWS.x; r1.y <- output.positionWS.y; r1.z <- output.positionWS.z
                mov r2.xy, v1.xyxx  // r2.x <- output.texcoord.x; r2.y <- output.texcoord.y
                mov o0.xyzw, r0.xyzw
                mov o3.xyz, r1.xyzx
                mov o1.xy, r2.xyxx
                ret 
                // Approximately 10 instruction slots used
                            
            };
            HullShader = NULL;
            DomainShader = NULL;
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_4_0
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   o0.x <- <ColorPS return value>.x; o0.y <- <ColorPS return value>.y; o0.z <- <ColorPS return value>.z; o0.w <- <ColorPS return value>.w
                //
                #line 962 "D:\Project\GameEngine\media\ocean2\Island11.fx"
                mov r0.xyzw, l(1.000000,1.000000,1.000000,0)  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w
                
                #line 209 "D:\Project\GameEngine\media\ocean2\common.fx"
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 3 instruction slots used
                            
            };
        }

    }

}

