//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer MatrixBuffer : register(b0)
{
    float4x4 worldMatrix;               // Offset:    0, size:   64
    float4x4 viewMatrix;                // Offset:   64, size:   64
    float4x4 projectionMatrix;          // Offset:  128, size:   64
}

cbuffer TessellationBuffer : register(b1)
{
    float4  eyePos;                     // Offset:    0, size:   16
    float   tessellationAmount;         // Offset:   16, size:    4
    float3  padding;                    // Offset:   20, size:   12
}

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 Tech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   x z 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // ORIGIN                   0   xy          0     NONE   float   xy  
                // SIZE                     0     zw        0     NONE   float     zw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input v0.xz
                dcl_input v1.xy
                dcl_output o0.xy
                dcl_output o0.zw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
                //   v1.x <- size.x; v1.y <- size.y; 
                //   o0.x <- <main return value>.origin.x; o0.y <- <main return value>.origin.y; o0.z <- <main return value>.size.x; o0.w <- <main return value>.size.y
                //
                #line 68 "D:\Project\GameEngine\media\shader11\Tessellation_Grid.fx"
                mov r0.xy, v0.xzxx  // r0.x <- output.origin.x; r0.y <- output.origin.y
                mov r0.zw, v1.xxxy  // r0.z <- output.size.x; r0.w <- output.size.y
                mov o0.xy, r0.xyxx
                mov o0.zw, r0.zzzw
                ret 
                // Approximately 5 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer TessellationBuffer
                // {
                //
                //   float4 eyePos;                     // Offset:    0 Size:    16
                //   float tessellationAmount;          // Offset:   16 Size:     4 [unused]
                //   float3 padding;                    // Offset:   20 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // TessellationBuffer                cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float   x   
                // ORIGIN                   0    yz         0     NONE   float    yz 
                // SV_TessFactor            1   x           1 QUADEDGE   float   x   
                // SIZE                     0    yz         1     NONE   float    yz 
                // SV_TessFactor            2   x           2 QUADEDGE   float   x   
                // SV_TessFactor            3   x           3 QUADEDGE   float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT   float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // ORIGIN                   0   xy          0     NONE   float   xy  
                // SIZE                     0     zw        0     NONE   float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // DUMMY                    0   x           0     NONE   float   x   
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           1
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 1
                dcl_output_control_point_count 1
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb1[1], immediateIndexed
                hs_control_point_phase 
                dcl_output o0.x
                dcl_temps 1
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- pointId; 
                //   vPrim.x <- patchId; 
                //   o0.x <- <ColorHullShader return value>; 
                //   v[0][0].x <- patch[0].origin.x; v[0][0].y <- patch[0].origin.y; v[0][0].z <- patch[0].size.x; v[0][0].w <- patch[0].size.y
                //
                #line 118 "D:\Project\GameEngine\media\shader11\Tessellation_Grid.fx"
                itof r0.x, l(0)  // r0.x <- output
                mov o0.x, r0.x
                ret 
                hs_join_phase 
                dcl_input vicp[1][0].xy
                dcl_input vicp[1][0].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output o0.yz
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output o1.yz
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 3
                
                #line 83
                mul r0.xy, l(0.500000, 0.500000, 0.000000, 0.000000), vicp[0][0].zwzz
                add r0.xy, r0.xyxx, vicp[0][0].xyxx  // r0.x <- center.x; r0.y <- center.y
                mov r0.zw, -cb1[0].xxxz
                add r0.xy, r0.zwzz, r0.xyxx
                dp2 r0.x, r0.xyxx, r0.xyxx
                sqrt r0.x, r0.x  // r0.x <- distance
                itof r0.y, l(1)
                mul r0.x, r0.x, l(0.005000)
                div r0.x, r0.y, r0.x
                itof r0.y, l(1)
                mov r0.z, l(-1.000000)
                add r0.x, r0.z, r0.x
                mul r0.x, r0.x, r0.y
                add r0.x, r0.x, l(1.000000)  // r0.x <- tessFactor
                
                #line 89
                mov r0.x, r0.x  // r0.x <- output.edges[0]
                mov r0.y, r0.x  // r0.y <- output.edges[1]
                mov r0.z, r0.x  // r0.z <- output.edges[2]
                mov r0.w, r0.x  // r0.w <- output.edges[3]
                
                #line 95
                mov r1.x, r0.x  // r1.x <- output.inside[0]
                mov r0.x, r0.x  // r0.x <- output.inside[1]
                mov r1.yz, vicp[0][0].xxyx  // r1.y <- output.origin.x; r1.z <- output.origin.y
                mov r2.xy, vicp[0][0].zwzz  // r2.x <- output.size.x; r2.y <- output.size.y
                mov o0.yz, r1.yyzy
                mov o1.yz, r2.xxyx
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.w
                mov o4.x, r1.x
                mov o5.x, r0.x
                ret 
                // Approximately 34 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer MatrixBuffer
                // {
                //
                //   float4x4 worldMatrix;              // Offset:    0 Size:    64
                //   float4x4 viewMatrix;               // Offset:   64 Size:    64
                //   float4x4 projectionMatrix;         // Offset:  128 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // MatrixBuffer                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float       
                // ORIGIN                   0    yz         0     NONE   float    yz 
                // SV_TessFactor            1   x           1 QUADEDGE   float       
                // SIZE                     0    yz         1     NONE   float    yz 
                // SV_TessFactor            2   x           2 QUADEDGE   float       
                // SV_TessFactor            3   x           3 QUADEDGE   float       
                // SV_InsideTessFactor      0   x           4  QUADINT   float       
                // SV_InsideTessFactor      1   x           5  QUADINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // DUMMY                    0   x           0     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           1
                //
                ds_5_0
                dcl_input_control_point_count 1
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input vpc0.yz
                dcl_input vpc1.yz
                dcl_input vDomain.xy
                dcl_output_siv o0.xyzw, position
                dcl_temps 2
                //
                // Initial variable locations:
                //   vpc0.y <- input.origin.x; vpc0.z <- input.origin.y; 
                //   vpc1.y <- input.size.x; vpc1.z <- input.size.y; 
                //   vpc0.x <- input.edges[0]; 
                //   vpc1.x <- input.edges[1]; 
                //   vpc2.x <- input.edges[2]; 
                //   vpc3.x <- input.edges[3]; 
                //   vpc4.x <- input.inside[0]; 
                //   vpc5.x <- input.inside[1]; 
                //   vDomain.x <- uv.x; vDomain.y <- uv.y; 
                //   o0.x <- <ColorDomainShader return value>.position.x; o0.y <- <ColorDomainShader return value>.position.y; o0.z <- <ColorDomainShader return value>.position.z; o0.w <- <ColorDomainShader return value>.position.w; 
                //   vicp[0][0].x <- patch
                //
                #line 136 "D:\Project\GameEngine\media\shader11\Tessellation_Grid.fx"
                mul r0.xy, vpc1.yzyy, vDomain.xyxx
                add r0.xz, r0.xxyx, vpc0.yyzy  // r0.x <- vertexPosition.x; r0.z <- vertexPosition.z
                mov r0.y, l(0.100000)  // r0.y <- vertexPosition.y
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- output.position.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- output.position.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- output.position.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- output.position.w
                dp4 r0.x, r1.xyzw, cb0[4].xyzw  // r0.x <- output.position.x
                dp4 r0.y, r1.xyzw, cb0[5].xyzw  // r0.y <- output.position.y
                dp4 r0.z, r1.xyzw, cb0[6].xyzw  // r0.z <- output.position.z
                dp4 r0.w, r1.xyzw, cb0[7].xyzw  // r0.w <- output.position.w
                dp4 r1.x, r0.xyzw, cb0[8].xyzw  // r1.x <- output.position.x
                dp4 r1.y, r0.xyzw, cb0[9].xyzw  // r1.y <- output.position.y
                dp4 r1.z, r0.xyzw, cb0[10].xyzw  // r1.z <- output.position.z
                dp4 r1.w, r0.xyzw, cb0[11].xyzw  // r1.w <- output.position.w
                
                #line 147
                mov o0.xyzw, r1.xyzw
                ret 
                // Approximately 18 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
                //   o0.x <- <ColorPixelShader return value>.x; o0.y <- <ColorPixelShader return value>.y; o0.z <- <ColorPixelShader return value>.z; o0.w <- <ColorPixelShader return value>.w
                //
                #line 156 "D:\Project\GameEngine\media\shader11\Tessellation_Grid.fx"
                itof o0.xyzw, l(0, 0, 0, 1)
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

}

