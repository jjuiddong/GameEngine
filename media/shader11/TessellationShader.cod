//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer MatrixBuffer : register(b0)
{
    float4x4 worldMatrix;               // Offset:    0, size:   64
    float4x4 viewMatrix;                // Offset:   64, size:   64
    float4x4 projectionMatrix;          // Offset:  128, size:   64
}

cbuffer TessellationBuffer : register(b1)
{
    float   tessellationAmount;         // Offset:    0, size:    4
    float3  padding;                    // Offset:    4, size:   12
}

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 Tech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_output o0.xyz
                dcl_output o1.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; 
                //   v1.x <- input.color.x; v1.y <- input.color.y; v1.z <- input.color.z; v1.w <- input.color.w; 
                //   o1.x <- <main return value>.color.x; o1.y <- <main return value>.color.y; o1.z <- <main return value>.color.z; o1.w <- <main return value>.color.w; 
                //   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z
                //
                #line 55 "D:\Project\Media\shader11\TessellationShader.fx"
                mov r0.xyz, v0.xyzx  // r0.x <- output.position.x; r0.y <- output.position.y; r0.z <- output.position.z
                mov r1.xyzw, v1.xyzw  // r1.x <- output.color.x; r1.y <- output.color.y; r1.z <- output.color.z; r1.w <- output.color.w
                mov o1.xyzw, r1.xyzw
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 5 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer TessellationBuffer
                // {
                //
                //   float tessellationAmount;          // Offset:    0 Size:     4
                //   float3 padding;                    // Offset:    4 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // TessellationBuffer                cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Integer           
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_integer
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb1[1], immediateIndexed
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyzw
                dcl_output o0.xyz
                dcl_output o1.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- pointId; 
                //   vPrim.x <- patchId; 
                //   o1.x <- <ColorHullShader return value>.color.x; o1.y <- <ColorHullShader return value>.color.y; o1.z <- <ColorHullShader return value>.color.z; o1.w <- <ColorHullShader return value>.color.w; 
                //   o0.x <- <ColorHullShader return value>.position.x; o0.y <- <ColorHullShader return value>.position.y; o0.z <- <ColorHullShader return value>.position.z; 
                //   v[0][0].x <- patch[0].position.x; v[0][0].y <- patch[0].position.y; v[0][0].z <- patch[0].position.z; 
                //   v[0][1].x <- patch[0].color.x; v[0][1].y <- patch[0].color.y; v[0][1].z <- patch[0].color.z; v[0][1].w <- patch[0].color.w; 
                //   v[1][0].x <- patch[1].position.x; v[1][0].y <- patch[1].position.y; v[1][0].z <- patch[1].position.z; 
                //   v[1][1].x <- patch[1].color.x; v[1][1].y <- patch[1].color.y; v[1][1].z <- patch[1].color.z; v[1][1].w <- patch[1].color.w; 
                //   v[2][0].x <- patch[2].position.x; v[2][0].y <- patch[2].position.y; v[2][0].z <- patch[2].position.z; 
                //   v[2][1].x <- patch[2].color.x; v[2][1].y <- patch[2].color.y; v[2][1].z <- patch[2].color.z; v[2][1].w <- patch[2].color.w
                //
                #line 100 "D:\Project\Media\shader11\TessellationShader.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- output.position.x; r0.z <- output.position.y; r0.w <- output.position.z
                
                #line 103
                mov r1.xyzw, v[r0.x + 0][1].xyzw  // r1.x <- output.color.x; r1.y <- output.color.y; r1.z <- output.color.z; r1.w <- output.color.w
                mov o1.xyzw, r1.xyzw
                mov o0.xyz, r0.yzwy
                ret 
                hs_join_phase 
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 73
                mov r0.x, cb1[0].x  // r0.x <- output.edges[0]
                mov r0.y, cb1[0].x  // r0.y <- output.edges[1]
                mov r0.z, cb1[0].x  // r0.z <- output.edges[2]
                
                #line 78
                mov r0.w, cb1[0].x  // r0.w <- output.inside
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.w
                ret 
                // Approximately 15 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer MatrixBuffer
                // {
                //
                //   float4x4 worldMatrix;              // Offset:    0 Size:    64
                //   float4x4 viewMatrix;               // Offset:   64 Size:    64
                //   float4x4 projectionMatrix;         // Offset:  128 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // MatrixBuffer                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   vpc3.x <- input.inside; 
                //   vpc0.x <- input.edges[0]; 
                //   vpc1.x <- input.edges[1]; 
                //   vpc2.x <- input.edges[2]; 
                //   vDomain.x <- uvwCoord.x; vDomain.y <- uvwCoord.y; vDomain.z <- uvwCoord.z; 
                //   o1.x <- <ColorDomainShader return value>.color.x; o1.y <- <ColorDomainShader return value>.color.y; o1.z <- <ColorDomainShader return value>.color.z; o1.w <- <ColorDomainShader return value>.color.w; 
                //   o0.x <- <ColorDomainShader return value>.position.x; o0.y <- <ColorDomainShader return value>.position.y; o0.z <- <ColorDomainShader return value>.position.z; o0.w <- <ColorDomainShader return value>.position.w; 
                //   vicp[0][0].x <- patch[0].position.x; vicp[0][0].y <- patch[0].position.y; vicp[0][0].z <- patch[0].position.z; 
                //   vicp[0][1].x <- patch[0].color.x; vicp[0][1].y <- patch[0].color.y; vicp[0][1].z <- patch[0].color.z; vicp[0][1].w <- patch[0].color.w; 
                //   vicp[1][0].x <- patch[1].position.x; vicp[1][0].y <- patch[1].position.y; vicp[1][0].z <- patch[1].position.z; 
                //   vicp[1][1].x <- patch[1].color.x; vicp[1][1].y <- patch[1].color.y; vicp[1][1].z <- patch[1].color.z; vicp[1][1].w <- patch[1].color.w; 
                //   vicp[2][0].x <- patch[2].position.x; vicp[2][0].y <- patch[2].position.y; vicp[2][0].z <- patch[2].position.z; 
                //   vicp[2][1].x <- patch[2].color.x; vicp[2][1].y <- patch[2].color.y; vicp[2][1].z <- patch[2].color.z; vicp[2][1].w <- patch[2].color.w
                //
                #line 123 "D:\Project\Media\shader11\TessellationShader.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vertexPosition.x; r0.y <- vertexPosition.y; r0.z <- vertexPosition.z
                
                #line 126
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- output.position.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- output.position.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- output.position.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- output.position.w
                dp4 r0.x, r1.xyzw, cb0[4].xyzw  // r0.x <- output.position.x
                dp4 r0.y, r1.xyzw, cb0[5].xyzw  // r0.y <- output.position.y
                dp4 r0.z, r1.xyzw, cb0[6].xyzw  // r0.z <- output.position.z
                dp4 r0.w, r1.xyzw, cb0[7].xyzw  // r0.w <- output.position.w
                dp4 r1.x, r0.xyzw, cb0[8].xyzw  // r1.x <- output.position.x
                dp4 r1.y, r0.xyzw, cb0[9].xyzw  // r1.y <- output.position.y
                dp4 r1.z, r0.xyzw, cb0[10].xyzw  // r1.z <- output.position.z
                dp4 r1.w, r0.xyzw, cb0[11].xyzw  // r1.w <- output.position.w
                
                #line 131
                mov r0.xyzw, vicp[0][1].xyzw  // r0.x <- output.color.x; r0.y <- output.color.y; r0.z <- output.color.z; r0.w <- output.color.w
                mov o0.xyzw, r1.xyzw
                mov o1.xyzw, r0.xyzw
                ret 
                // Approximately 22 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
                //   v1.x <- input.color.x; v1.y <- input.color.y; v1.z <- input.color.z; v1.w <- input.color.w; 
                //   o0.x <- <ColorPixelShader return value>.x; o0.y <- <ColorPixelShader return value>.y; o0.z <- <ColorPixelShader return value>.z; o0.w <- <ColorPixelShader return value>.w
                //
                #line 142 "D:\Project\Media\shader11\TessellationShader.fx"
                mov o0.xyzw, v1.xyzw
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

}

