//
// FX Version: fx_5_0
//
// 4 local buffer(s)
//
cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gView;                     // Offset:   64, size:   64
    float4x4 gProjection;               // Offset:  128, size:   64
    float4x4 gLightView[3];             // Offset:  192, size:  192
    float4x4 gLightProj[3];             // Offset:  384, size:  192
    float4x4 gLightTT;                  // Offset:  576, size:   64
    float3  gEyePosW;                   // Offset:  640, size:   12
}

cbuffer cbLight : register(b1)
{
    float4  gLight_Ambient;             // Offset:    0, size:   16
    float4  gLight_Diffuse;             // Offset:   16, size:   16
    float4  gLight_Specular;            // Offset:   32, size:   16
    float3  gLight_Direction;           // Offset:   48, size:   12
    float3  gLight_PosW;                // Offset:   64, size:   12
}

cbuffer cbMaetrial : register(b2)
{
    float4  gMtrl_Ambient;              // Offset:    0, size:   16
    float4  gMtrl_Diffuse;              // Offset:   16, size:   16
    float4  gMtrl_Specular;             // Offset:   32, size:   16
    float4  gMtrl_Emissive;             // Offset:   48, size:   16
    float   gMtrl_Pow;                  // Offset:   64, size:    4
}

cbuffer cbPerFrameInstancing : register(b3)
{
    float4x4 gWorldInst[100];           // Offset:    0, size: 6400
}

//
// 6 local object(s)
//
Texture2D txDiffuse;
Texture2D txShadow0;
Texture2D txShadow1;
Texture2D txShadow2;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState samShadow
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    BorderColor = float4(1, 1, 1, 1);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 6 technique(s)
    //
    technique11 Unlit
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // SV_InstanceID            0   x           3   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // TEXCOORD                 2   xyz         3     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyzw
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o3.xyz
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- instID; 
                //   o3.x <- <VS return value>.toEye.x; o3.y <- <VS return value>.toEye.y; o3.z <- <VS return value>.toEye.z; 
                //   o2.x <- <VS return value>.Tex.x; o2.y <- <VS return value>.Tex.y; 
                //   o1.x <- <VS return value>.Normal.x; o1.y <- <VS return value>.Normal.y; o1.z <- <VS return value>.Normal.z; 
                //   o0.x <- <VS return value>.Pos.x; o0.y <- <VS return value>.Pos.y; o0.z <- <VS return value>.Pos.z; o0.w <- <VS return value>.Pos.w
                //
                #line 101 "D:\Project\GameEngine\media\shader11\pos-norm-tex.fx"
                itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- output.toEye.x; r0.y <- output.toEye.y; r0.z <- output.toEye.z
                mov r1.xyzw, cb0[0].xyzw  // r1.x <- mWorld._m00; r1.y <- mWorld._m10; r1.z <- mWorld._m20; r1.w <- mWorld._m30
                mov r2.xyzw, cb0[1].xyzw  // r2.x <- mWorld._m01; r2.y <- mWorld._m11; r2.z <- mWorld._m21; r2.w <- mWorld._m31
                mov r3.xyzw, cb0[2].xyzw  // r3.x <- mWorld._m02; r3.y <- mWorld._m12; r3.z <- mWorld._m22; r3.w <- mWorld._m32
                mov r4.xyzw, cb0[3].xyzw  // r4.x <- mWorld._m03; r4.y <- mWorld._m13; r4.z <- mWorld._m23; r4.w <- mWorld._m33
                dp4 r5.x, v0.xyzw, r1.xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, v0.xyzw, r2.xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, v0.xyzw, r3.xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, v0.xyzw, r4.xyzw  // r5.w <- output.Pos.w
                dp4 r4.x, r5.xyzw, cb0[4].xyzw  // r4.x <- output.Pos.x
                dp4 r4.y, r5.xyzw, cb0[5].xyzw  // r4.y <- output.Pos.y
                dp4 r4.z, r5.xyzw, cb0[6].xyzw  // r4.z <- output.Pos.z
                dp4 r4.w, r5.xyzw, cb0[7].xyzw  // r4.w <- output.Pos.w
                dp4 r5.x, r4.xyzw, cb0[8].xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, r4.xyzw, cb0[9].xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, r4.xyzw, cb0[10].xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, r4.xyzw, cb0[11].xyzw  // r5.w <- output.Pos.w
                dp3 r1.x, v1.xyzx, r1.xyzx
                dp3 r1.y, v1.xyzx, r2.xyzx
                dp3 r1.z, v1.xyzx, r3.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- output.Normal.x; r1.y <- output.Normal.y; r1.z <- output.Normal.z
                mov r2.xy, v2.xyxx  // r2.x <- output.Tex.x; r2.y <- output.Tex.y
                mov o0.xyzw, r5.xyzw
                mov o1.xyz, r1.xyzx
                mov o3.xyz, r0.xyzx
                mov o2.xy, r2.xyxx
                ret 
                // Approximately 29 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64 [unused]
                //   float4x4 gProjection;              // Offset:  128 Size:    64 [unused]
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbLight
                // {
                //
                //   float4 gLight_Ambient;             // Offset:    0 Size:    16
                //   float4 gLight_Diffuse;             // Offset:   16 Size:    16
                //   float4 gLight_Specular;            // Offset:   32 Size:    16
                //   float3 gLight_Direction;           // Offset:   48 Size:    12
                //   float3 gLight_PosW;                // Offset:   64 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbMaetrial
                // {
                //
                //   float4 gMtrl_Ambient;              // Offset:    0 Size:    16
                //   float4 gMtrl_Diffuse;              // Offset:   16 Size:    16
                //   float4 gMtrl_Specular;             // Offset:   32 Size:    16
                //   float4 gMtrl_Emissive;             // Offset:   48 Size:    16 [unused]
                //   float gMtrl_Pow;                   // Offset:   64 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // txDiffuse                         texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbLight                           cbuffer      NA          NA    1        1
                // cbMaetrial                        cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // TEXCOORD                 2   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[5], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v3.xyz
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Normal.x; v1.y <- In.Normal.y; v1.z <- In.Normal.z; 
                //   v2.x <- In.Tex.x; v2.y <- In.Tex.y; 
                //   v3.x <- In.toEye.x; v3.y <- In.toEye.y; v3.z <- In.toEye.z; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 118 "D:\Project\GameEngine\media\shader11\pos-norm-tex.fx"
                mov r0.xyz, -cb1[3].xyzx  // r0.x <- L.x; r0.y <- L.y; r0.z <- L.z
                dp3 r0.w, v3.xyzx, v3.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v3.xyzx
                add r1.xyz, r0.xyzx, r1.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- H.x; r1.y <- H.y; r1.z <- H.z
                dp3 r0.w, v1.xyzx, v1.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, v1.xyzx  // r2.x <- N.x; r2.y <- N.y; r2.z <- N.z
                mul r3.xyzw, cb1[0].xyzw, cb2[0].xyzw
                mul r4.xyzw, cb1[1].xyzw, cb2[1].xyzw
                itof r0.w, l(0)
                dp3 r0.x, r2.xyzx, r0.xyzx
                max r0.x, r0.x, r0.w
                mul r0.xyzw, r0.xxxx, r4.xyzw
                add r0.xyzw, r0.xyzw, r3.xyzw
                mul r3.xyzw, cb1[2].xyzw, cb2[2].xyzw
                itof r1.w, l(0)
                dp3 r1.x, r2.xyzx, r1.xyzx
                max r1.x, r1.x, r1.w
                log r1.x, r1.x
                mul r1.x, r1.x, cb2[4].x
                exp r1.x, r1.x
                mul r1.xyzw, r1.xxxx, r3.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w
                
                #line 126
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0
                mul r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- Out.x; r0.y <- Out.y; r0.z <- Out.z; r0.w <- Out.w
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 31 instruction slots used
                            
            };
        }

    }

    technique11 ShadowMap
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // SV_InstanceID            0   x           3   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // TEXCOORD                 7     zw        2     NONE   float     zw
                // TEXCOORD                 2   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 3   xyzw        4     NONE   float   xyzw
                // TEXCOORD                 4   xyzw        5     NONE   float   xyzw
                // TEXCOORD                 5   xyz         6     NONE   float   xyz 
                // TEXCOORD                 6   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[40], immediateIndexed
                dcl_input v0.xyzw
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_output o3.xyzw
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_output o6.xyz
                dcl_output o7.xyzw
                dcl_temps 11
                dcl_indexableTemp x0[12], 4
                dcl_indexableTemp x1[12], 4
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- instID; 
                //   o7.x <- <VS_ShadowMap return value>.Depth0.x; o7.y <- <VS_ShadowMap return value>.Depth0.y; o7.z <- <VS_ShadowMap return value>.Depth0.z; o7.w <- <VS_ShadowMap return value>.Depth0.w; 
                //   o6.x <- <VS_ShadowMap return value>.toEye.x; o6.y <- <VS_ShadowMap return value>.toEye.y; o6.z <- <VS_ShadowMap return value>.toEye.z; 
                //   o5.x <- <VS_ShadowMap return value>.TexShadow2.x; o5.y <- <VS_ShadowMap return value>.TexShadow2.y; o5.z <- <VS_ShadowMap return value>.TexShadow2.z; o5.w <- <VS_ShadowMap return value>.TexShadow2.w; 
                //   o4.x <- <VS_ShadowMap return value>.TexShadow1.x; o4.y <- <VS_ShadowMap return value>.TexShadow1.y; o4.z <- <VS_ShadowMap return value>.TexShadow1.z; o4.w <- <VS_ShadowMap return value>.TexShadow1.w; 
                //   o3.x <- <VS_ShadowMap return value>.TexShadow0.x; o3.y <- <VS_ShadowMap return value>.TexShadow0.y; o3.z <- <VS_ShadowMap return value>.TexShadow0.z; o3.w <- <VS_ShadowMap return value>.TexShadow0.w; 
                //   o2.x <- <VS_ShadowMap return value>.Tex.x; o2.y <- <VS_ShadowMap return value>.Tex.y; o2.z <- <VS_ShadowMap return value>.Depth1.x; o2.w <- <VS_ShadowMap return value>.Depth1.y; 
                //   o1.x <- <VS_ShadowMap return value>.Normal.x; o1.y <- <VS_ShadowMap return value>.Normal.y; o1.z <- <VS_ShadowMap return value>.Normal.z; 
                //   o0.x <- <VS_ShadowMap return value>.Pos.x; o0.y <- <VS_ShadowMap return value>.Pos.y; o0.z <- <VS_ShadowMap return value>.Pos.z; o0.w <- <VS_ShadowMap return value>.Pos.w; 
                //   x0 <- mLVP; x1 <- mVPT
                //
                #line 155 "D:\Project\GameEngine\media\shader11\pos-norm-tex.fx"
                itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- output.toEye.x; r0.y <- output.toEye.y; r0.z <- output.toEye.z
                mov r1.xyzw, cb0[0].xyzw  // r1.x <- mWorld._m00; r1.y <- mWorld._m10; r1.z <- mWorld._m20; r1.w <- mWorld._m30
                mov r2.xyzw, cb0[1].xyzw  // r2.x <- mWorld._m01; r2.y <- mWorld._m11; r2.z <- mWorld._m21; r2.w <- mWorld._m31
                mov r3.xyzw, cb0[2].xyzw  // r3.x <- mWorld._m02; r3.y <- mWorld._m12; r3.z <- mWorld._m22; r3.w <- mWorld._m32
                mov r4.xyzw, cb0[3].xyzw  // r4.x <- mWorld._m03; r4.y <- mWorld._m13; r4.z <- mWorld._m23; r4.w <- mWorld._m33
                dp4 r5.x, v0.xyzw, r1.xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, v0.xyzw, r2.xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, v0.xyzw, r3.xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, v0.xyzw, r4.xyzw  // r5.w <- output.Pos.w
                dp4 r6.x, r5.xyzw, cb0[4].xyzw  // r6.x <- output.Pos.x
                dp4 r6.y, r5.xyzw, cb0[5].xyzw  // r6.y <- output.Pos.y
                dp4 r6.z, r5.xyzw, cb0[6].xyzw  // r6.z <- output.Pos.z
                dp4 r6.w, r5.xyzw, cb0[7].xyzw  // r6.w <- output.Pos.w
                dp4 r5.x, r6.xyzw, cb0[8].xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, r6.xyzw, cb0[9].xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, r6.xyzw, cb0[10].xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, r6.xyzw, cb0[11].xyzw  // r5.w <- output.Pos.w
                dp3 r6.x, v1.xyzx, r1.xyzx
                dp3 r6.y, v1.xyzx, r2.xyzx
                dp3 r6.z, v1.xyzx, r3.xyzx
                dp3 r0.w, r6.xyzx, r6.xyzx
                rsq r0.w, r0.w
                mul r6.xyz, r0.wwww, r6.xyzx  // r6.x <- output.Normal.x; r6.y <- output.Normal.y; r6.z <- output.Normal.z
                mov r7.xy, v2.xyxx  // r7.x <- output.Tex.x; r7.y <- output.Tex.y
                
                #line 167
                dp4 r1.x, v0.xyzw, r1.xyzw  // r1.x <- wPos.x
                dp4 r1.y, v0.xyzw, r2.xyzw  // r1.y <- wPos.y
                dp4 r1.z, v0.xyzw, r3.xyzw  // r1.z <- wPos.z
                dp4 r1.w, v0.xyzw, r4.xyzw  // r1.w <- wPos.w
                mul r2.xyzw, cb0[12].xyzw, cb0[24].xxxx
                mul r3.xyzw, cb0[13].xyzw, cb0[24].yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[14].xyzw, cb0[24].zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[15].xyzw, cb0[24].wwww
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[12].xyzw, cb0[25].xxxx
                mul r4.xyzw, cb0[13].xyzw, cb0[25].yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[14].xyzw, cb0[25].zzzz
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[15].xyzw, cb0[25].wwww
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[12].xyzw, cb0[26].xxxx
                mul r8.xyzw, cb0[13].xyzw, cb0[26].yyyy
                add r4.xyzw, r4.xyzw, r8.xyzw
                mul r8.xyzw, cb0[14].xyzw, cb0[26].zzzz
                add r4.xyzw, r4.xyzw, r8.xyzw
                mul r8.xyzw, cb0[15].xyzw, cb0[26].wwww
                add r4.xyzw, r4.xyzw, r8.xyzw
                mul r8.xyzw, cb0[12].xyzw, cb0[27].xxxx
                mul r9.xyzw, cb0[13].xyzw, cb0[27].yyyy
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[14].xyzw, cb0[27].zzzz
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[15].xyzw, cb0[27].wwww
                add r8.xyzw, r8.xyzw, r9.xyzw
                mov x0[0].x, r2.x
                mov x0[1].x, r3.x
                mov x0[2].x, r4.x
                mov x0[3].x, r8.x
                mov x0[0].y, r2.y
                mov x0[1].y, r3.y
                mov x0[2].y, r4.y
                mov x0[3].y, r8.y
                mov x0[0].z, r2.z
                mov x0[1].z, r3.z
                mov x0[2].z, r4.z
                mov x0[3].z, r8.z
                mov x0[0].w, r2.w
                mov x0[1].w, r3.w
                mov x0[2].w, r4.w
                mov x0[3].w, r8.w
                mov r2.x, x0[0].x
                mov r2.y, x0[1].x
                mov r2.z, x0[2].x
                mov r2.w, x0[3].x
                mov r3.x, x0[0].y
                mov r3.y, x0[1].y
                mov r3.z, x0[2].y
                mov r3.w, x0[3].y
                mov r4.x, x0[0].z
                mov r4.y, x0[1].z
                mov r4.z, x0[2].z
                mov r4.w, x0[3].z
                mov r8.x, x0[0].w
                mov r8.y, x0[1].w
                mov r8.z, x0[2].w
                mov r8.w, x0[3].w
                dp4 r0.w, r2.xyzw, cb0[36].xyzw
                dp4 r6.w, r2.xyzw, cb0[37].xyzw
                dp4 r7.z, r2.xyzw, cb0[38].xyzw
                dp4 r2.x, r2.xyzw, cb0[39].xyzw
                dp4 r2.y, r3.xyzw, cb0[36].xyzw
                dp4 r2.z, r3.xyzw, cb0[37].xyzw
                dp4 r2.w, r3.xyzw, cb0[38].xyzw
                dp4 r3.x, r3.xyzw, cb0[39].xyzw
                dp4 r3.y, r4.xyzw, cb0[36].xyzw
                dp4 r3.z, r4.xyzw, cb0[37].xyzw
                dp4 r3.w, r4.xyzw, cb0[38].xyzw
                dp4 r4.x, r4.xyzw, cb0[39].xyzw
                dp4 r4.y, r8.xyzw, cb0[36].xyzw
                dp4 r4.z, r8.xyzw, cb0[37].xyzw
                dp4 r4.w, r8.xyzw, cb0[38].xyzw
                dp4 r7.w, r8.xyzw, cb0[39].xyzw
                mov x1[0].x, r0.w
                mov x1[1].x, r6.w
                mov x1[2].x, r7.z
                mov x1[3].x, r2.x
                mov x1[0].y, r2.y
                mov x1[1].y, r2.z
                mov x1[2].y, r2.w
                mov x1[3].y, r3.x
                mov x1[0].z, r3.y
                mov x1[1].z, r3.z
                mov x1[2].z, r3.w
                mov x1[3].z, r4.x
                mov x1[0].w, r4.y
                mov x1[1].w, r4.z
                mov x1[2].w, r4.w
                mov x1[3].w, r7.w
                mul r2.xyzw, cb0[16].xyzw, cb0[28].xxxx
                mul r3.xyzw, cb0[17].xyzw, cb0[28].yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[18].xyzw, cb0[28].zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[19].xyzw, cb0[28].wwww
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[16].xyzw, cb0[29].xxxx
                mul r4.xyzw, cb0[17].xyzw, cb0[29].yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[18].xyzw, cb0[29].zzzz
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[19].xyzw, cb0[29].wwww
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[16].xyzw, cb0[30].xxxx
                mul r8.xyzw, cb0[17].xyzw, cb0[30].yyyy
                add r4.xyzw, r4.xyzw, r8.xyzw
                mul r8.xyzw, cb0[18].xyzw, cb0[30].zzzz
                add r4.xyzw, r4.xyzw, r8.xyzw
                mul r8.xyzw, cb0[19].xyzw, cb0[30].wwww
                add r4.xyzw, r4.xyzw, r8.xyzw
                mul r8.xyzw, cb0[16].xyzw, cb0[31].xxxx
                mul r9.xyzw, cb0[17].xyzw, cb0[31].yyyy
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[18].xyzw, cb0[31].zzzz
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[19].xyzw, cb0[31].wwww
                add r8.xyzw, r8.xyzw, r9.xyzw
                mov x0[4].x, r2.x
                mov x0[5].x, r3.x
                mov x0[6].x, r4.x
                mov x0[7].x, r8.x
                mov x0[4].y, r2.y
                mov x0[5].y, r3.y
                mov x0[6].y, r4.y
                mov x0[7].y, r8.y
                mov x0[4].z, r2.z
                mov x0[5].z, r3.z
                mov x0[6].z, r4.z
                mov x0[7].z, r8.z
                mov x0[4].w, r2.w
                mov x0[5].w, r3.w
                mov x0[6].w, r4.w
                mov x0[7].w, r8.w
                mov r2.x, x0[4].x
                mov r2.y, x0[5].x
                mov r2.z, x0[6].x
                mov r2.w, x0[7].x
                mov r3.x, x0[4].y
                mov r3.y, x0[5].y
                mov r3.z, x0[6].y
                mov r3.w, x0[7].y
                mov r4.x, x0[4].z
                mov r4.y, x0[5].z
                mov r4.z, x0[6].z
                mov r4.w, x0[7].z
                mov r8.x, x0[4].w
                mov r8.y, x0[5].w
                mov r8.z, x0[6].w
                mov r8.w, x0[7].w
                dp4 r0.w, r2.xyzw, cb0[36].xyzw
                dp4 r6.w, r2.xyzw, cb0[37].xyzw
                dp4 r7.z, r2.xyzw, cb0[38].xyzw
                dp4 r2.x, r2.xyzw, cb0[39].xyzw
                dp4 r2.y, r3.xyzw, cb0[36].xyzw
                dp4 r2.z, r3.xyzw, cb0[37].xyzw
                dp4 r2.w, r3.xyzw, cb0[38].xyzw
                dp4 r3.x, r3.xyzw, cb0[39].xyzw
                dp4 r3.y, r4.xyzw, cb0[36].xyzw
                dp4 r3.z, r4.xyzw, cb0[37].xyzw
                dp4 r3.w, r4.xyzw, cb0[38].xyzw
                dp4 r4.x, r4.xyzw, cb0[39].xyzw
                dp4 r4.y, r8.xyzw, cb0[36].xyzw
                dp4 r4.z, r8.xyzw, cb0[37].xyzw
                dp4 r4.w, r8.xyzw, cb0[38].xyzw
                dp4 r7.w, r8.xyzw, cb0[39].xyzw
                mov x1[4].x, r0.w
                mov x1[5].x, r6.w
                mov x1[6].x, r7.z
                mov x1[7].x, r2.x
                mov x1[4].y, r2.y
                mov x1[5].y, r2.z
                mov x1[6].y, r2.w
                mov x1[7].y, r3.x
                mov x1[4].z, r3.y
                mov x1[5].z, r3.z
                mov x1[6].z, r3.w
                mov x1[7].z, r4.x
                mov x1[4].w, r4.y
                mov x1[5].w, r4.z
                mov x1[6].w, r4.w
                mov x1[7].w, r7.w
                mul r2.xyzw, cb0[20].xyzw, cb0[32].xxxx
                mul r3.xyzw, cb0[21].xyzw, cb0[32].yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[22].xyzw, cb0[32].zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[23].xyzw, cb0[32].wwww
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[20].xyzw, cb0[33].xxxx
                mul r4.xyzw, cb0[21].xyzw, cb0[33].yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[22].xyzw, cb0[33].zzzz
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[23].xyzw, cb0[33].wwww
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[20].xyzw, cb0[34].xxxx
                mul r8.xyzw, cb0[21].xyzw, cb0[34].yyyy
                add r4.xyzw, r4.xyzw, r8.xyzw
                mul r8.xyzw, cb0[22].xyzw, cb0[34].zzzz
                add r4.xyzw, r4.xyzw, r8.xyzw
                mul r8.xyzw, cb0[23].xyzw, cb0[34].wwww
                add r4.xyzw, r4.xyzw, r8.xyzw
                mul r8.xyzw, cb0[20].xyzw, cb0[35].xxxx
                mul r9.xyzw, cb0[21].xyzw, cb0[35].yyyy
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[22].xyzw, cb0[35].zzzz
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[23].xyzw, cb0[35].wwww
                add r8.xyzw, r8.xyzw, r9.xyzw
                mov x0[8].x, r2.x
                mov x0[9].x, r3.x
                mov x0[10].x, r4.x
                mov x0[11].x, r8.x
                mov x0[8].y, r2.y
                mov x0[9].y, r3.y
                mov x0[10].y, r4.y
                mov x0[11].y, r8.y
                mov x0[8].z, r2.z
                mov x0[9].z, r3.z
                mov x0[10].z, r4.z
                mov x0[11].z, r8.z
                mov x0[8].w, r2.w
                mov x0[9].w, r3.w
                mov x0[10].w, r4.w
                mov x0[11].w, r8.w
                mov r2.x, x0[8].x
                mov r2.y, x0[9].x
                mov r2.z, x0[10].x
                mov r2.w, x0[11].x
                mov r3.x, x0[8].y
                mov r3.y, x0[9].y
                mov r3.z, x0[10].y
                mov r3.w, x0[11].y
                mov r4.x, x0[8].z
                mov r4.y, x0[9].z
                mov r4.z, x0[10].z
                mov r4.w, x0[11].z
                mov r8.x, x0[8].w
                mov r8.y, x0[9].w
                mov r8.z, x0[10].w
                mov r8.w, x0[11].w
                dp4 r0.w, r2.xyzw, cb0[36].xyzw
                dp4 r6.w, r2.xyzw, cb0[37].xyzw
                dp4 r7.z, r2.xyzw, cb0[38].xyzw
                dp4 r2.x, r2.xyzw, cb0[39].xyzw
                dp4 r2.y, r3.xyzw, cb0[36].xyzw
                dp4 r2.z, r3.xyzw, cb0[37].xyzw
                dp4 r2.w, r3.xyzw, cb0[38].xyzw
                dp4 r3.x, r3.xyzw, cb0[39].xyzw
                dp4 r3.y, r4.xyzw, cb0[36].xyzw
                dp4 r3.z, r4.xyzw, cb0[37].xyzw
                dp4 r3.w, r4.xyzw, cb0[38].xyzw
                dp4 r4.x, r4.xyzw, cb0[39].xyzw
                dp4 r4.y, r8.xyzw, cb0[36].xyzw
                dp4 r4.z, r8.xyzw, cb0[37].xyzw
                dp4 r4.w, r8.xyzw, cb0[38].xyzw
                dp4 r7.w, r8.xyzw, cb0[39].xyzw
                mov x1[8].x, r0.w
                mov x1[9].x, r6.w
                mov x1[10].x, r7.z
                mov x1[11].x, r2.x
                mov x1[8].y, r2.y
                mov x1[9].y, r2.z
                mov x1[10].y, r2.w
                mov x1[11].y, r3.x
                mov x1[8].z, r3.y
                mov x1[9].z, r3.z
                mov x1[10].z, r3.w
                mov x1[11].z, r4.x
                mov x1[8].w, r4.y
                mov x1[9].w, r4.z
                mov x1[10].w, r4.w
                mov x1[11].w, r7.w
                mov r2.x, x1[0].x
                mov r3.x, x1[1].x
                mov r4.x, x1[2].x
                mov r8.x, x1[3].x
                mov r2.y, x1[0].y
                mov r3.y, x1[1].y
                mov r4.y, x1[2].y
                mov r8.y, x1[3].y
                mov r2.z, x1[0].z
                mov r3.z, x1[1].z
                mov r4.z, x1[2].z
                mov r8.z, x1[3].z
                mov r2.w, x1[0].w
                mov r3.w, x1[1].w
                mov r4.w, x1[2].w
                mov r8.w, x1[3].w
                dp4 r2.x, r1.xyzw, r2.xyzw  // r2.x <- output.TexShadow0.x
                dp4 r2.y, r1.xyzw, r3.xyzw  // r2.y <- output.TexShadow0.y
                dp4 r2.z, r1.xyzw, r4.xyzw  // r2.z <- output.TexShadow0.z
                dp4 r2.w, r1.xyzw, r8.xyzw  // r2.w <- output.TexShadow0.w
                mov r3.x, x1[4].x
                mov r4.x, x1[5].x
                mov r8.x, x1[6].x
                mov r9.x, x1[7].x
                mov r3.y, x1[4].y
                mov r4.y, x1[5].y
                mov r8.y, x1[6].y
                mov r9.y, x1[7].y
                mov r3.z, x1[4].z
                mov r4.z, x1[5].z
                mov r8.z, x1[6].z
                mov r9.z, x1[7].z
                mov r3.w, x1[4].w
                mov r4.w, x1[5].w
                mov r8.w, x1[6].w
                mov r9.w, x1[7].w
                dp4 r3.x, r1.xyzw, r3.xyzw  // r3.x <- output.TexShadow1.x
                dp4 r3.y, r1.xyzw, r4.xyzw  // r3.y <- output.TexShadow1.y
                dp4 r3.z, r1.xyzw, r8.xyzw  // r3.z <- output.TexShadow1.z
                dp4 r3.w, r1.xyzw, r9.xyzw  // r3.w <- output.TexShadow1.w
                mov r4.x, x1[8].x
                mov r8.x, x1[9].x
                mov r9.x, x1[10].x
                mov r10.x, x1[11].x
                mov r4.y, x1[8].y
                mov r8.y, x1[9].y
                mov r9.y, x1[10].y
                mov r10.y, x1[11].y
                mov r4.z, x1[8].z
                mov r8.z, x1[9].z
                mov r9.z, x1[10].z
                mov r10.z, x1[11].z
                mov r4.w, x1[8].w
                mov r8.w, x1[9].w
                mov r9.w, x1[10].w
                mov r10.w, x1[11].w
                dp4 r4.x, r1.xyzw, r4.xyzw  // r4.x <- output.TexShadow2.x
                dp4 r4.y, r1.xyzw, r8.xyzw  // r4.y <- output.TexShadow2.y
                dp4 r4.z, r1.xyzw, r9.xyzw  // r4.z <- output.TexShadow2.z
                dp4 r4.w, r1.xyzw, r10.xyzw  // r4.w <- output.TexShadow2.w
                
                #line 179
                mov r8.x, x0[2].x
                mov r9.x, x0[3].x
                mov r8.y, x0[2].y
                mov r9.y, x0[3].y
                mov r8.z, x0[2].z
                mov r9.z, x0[3].z
                mov r8.w, x0[2].w
                mov r9.w, x0[3].w
                dp4 r8.x, r1.xyzw, r8.xyzw  // r8.x <- output.Depth0.x
                dp4 r8.y, r1.xyzw, r9.xyzw  // r8.y <- output.Depth0.y
                mov r9.x, x0[6].x
                mov r10.x, x0[7].x
                mov r9.y, x0[6].y
                mov r10.y, x0[7].y
                mov r9.z, x0[6].z
                mov r10.z, x0[7].z
                mov r9.w, x0[6].w
                mov r10.w, x0[7].w
                dp4 r7.z, r1.xyzw, r9.xyzw  // r7.z <- output.Depth0.z
                dp4 r7.w, r1.xyzw, r10.xyzw  // r7.w <- output.Depth0.w
                mov r9.x, x0[10].x
                mov r10.x, x0[11].x
                mov r9.y, x0[10].y
                mov r10.y, x0[11].y
                mov r9.z, x0[10].z
                mov r10.z, x0[11].z
                mov r9.w, x0[10].w
                mov r10.w, x0[11].w
                dp4 r8.z, r1.xyzw, r9.xyzw  // r8.z <- output.Depth1.x
                dp4 r8.w, r1.xyzw, r10.xyzw  // r8.w <- output.Depth1.y
                mov o0.xyzw, r5.xyzw
                mov o2.xy, r7.xyxx
                mov o2.zw, r8.zzzw
                mov o3.xyzw, r2.xyzw
                mov o4.xyzw, r3.xyzw
                mov o5.xyzw, r4.xyzw
                mov o7.xy, r8.xyxx
                mov o7.zw, r7.zzzw
                mov o1.xyz, r6.xyzx
                mov o6.xyz, r0.xyzx
                ret 
                // Approximately 405 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64 [unused]
                //   float4x4 gProjection;              // Offset:  128 Size:    64 [unused]
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbLight
                // {
                //
                //   float4 gLight_Ambient;             // Offset:    0 Size:    16
                //   float4 gLight_Diffuse;             // Offset:   16 Size:    16
                //   float4 gLight_Specular;            // Offset:   32 Size:    16
                //   float3 gLight_Direction;           // Offset:   48 Size:    12
                //   float3 gLight_PosW;                // Offset:   64 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbMaetrial
                // {
                //
                //   float4 gMtrl_Ambient;              // Offset:    0 Size:    16
                //   float4 gMtrl_Diffuse;              // Offset:   16 Size:    16
                //   float4 gMtrl_Specular;             // Offset:   32 Size:    16
                //   float4 gMtrl_Emissive;             // Offset:   48 Size:    16 [unused]
                //   float gMtrl_Pow;                   // Offset:   64 Size:     4
                //
                // }
                //
                // cbuffer cbPerFrameInstancing
                // {
                //
                //   float4x4 gWorldInst[100];          // Offset:    0 Size:  6400 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samShadow                         sampler      NA          NA    1        1
                // txDiffuse                         texture  float4          2d    0        1
                // txShadow0                         texture  float4          2d    1        1
                // txShadow1                         texture  float4          2d    2        1
                // txShadow2                         texture  float4          2d    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbLight                           cbuffer      NA          NA    1        1
                // cbMaetrial                        cbuffer      NA          NA    2        1
                // cbPerFrameInstancing              cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // TEXCOORD                 7     zw        2     NONE   float     zw
                // TEXCOORD                 2   xyzw        3     NONE   float   xy w
                // TEXCOORD                 3   xyzw        4     NONE   float   xy w
                // TEXCOORD                 4   xyzw        5     NONE   float   xy w
                // TEXCOORD                 5   xyz         6     NONE   float   xyz 
                // TEXCOORD                 6   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[5], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_input_ps linear v3.xyw
                dcl_input_ps linear v4.xyw
                dcl_input_ps linear v5.xyw
                dcl_input_ps linear v6.xyz
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 5
                dcl_indexableTemp x0[27], 4
                dcl_indexableTemp x1[9], 4
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Normal.x; v1.y <- In.Normal.y; v1.z <- In.Normal.z; 
                //   v2.x <- In.Tex.x; v2.y <- In.Tex.y; 
                //   v3.x <- In.TexShadow0.x; v3.y <- In.TexShadow0.y; v3.z <- In.TexShadow0.z; v3.w <- In.TexShadow0.w; 
                //   v4.x <- In.TexShadow1.x; v4.y <- In.TexShadow1.y; v4.z <- In.TexShadow1.z; v4.w <- In.TexShadow1.w; 
                //   v5.x <- In.TexShadow2.x; v5.y <- In.TexShadow2.y; v5.z <- In.TexShadow2.z; v5.w <- In.TexShadow2.w; 
                //   v6.x <- In.toEye.x; v6.y <- In.toEye.y; v6.z <- In.toEye.z; 
                //   v7.x <- In.Depth0.x; v7.y <- In.Depth0.y; v7.z <- In.Depth0.z; v7.w <- In.Depth0.w; 
                //   v2.z <- In.Depth1.x; v2.w <- In.Depth1.y; 
                //   o0.x <- <PS_ShadowMap return value>.x; o0.y <- <PS_ShadowMap return value>.y; o0.z <- <PS_ShadowMap return value>.z; o0.w <- <PS_ShadowMap return value>.w; 
                //   x0 <- vTexCoords; x1 <- fShadowTerms
                //
                #line 193 "D:\Project\GameEngine\media\shader11\pos-norm-tex.fx"
                mov r0.y, l(0.000977)  // r0.y <- fTexelSize
                div r1.x, v7.x, v7.y
                min r1.x, r1.x, l(1.000000)  // r1.x <- depth0
                div r1.y, v7.z, v7.w
                min r1.y, r1.y, l(1.000000)  // r1.y <- depth1
                div r1.z, v2.z, v2.w
                min r1.z, r1.z, l(1.000000)  // r1.z <- depth2
                
                #line 202
                mov x0[0].xyw, v3.xyxw
                mov r2.x, -r0.y
                mov r2.yz, l(0,0,0,0)
                add r2.xyz, r2.xyzx, v3.xywx
                mov x0[1].xyw, r2.xyxz
                mov r0.z, l(0)
                add r2.xyz, r0.yzzy, v3.xywx
                mov x0[2].xyw, r2.xyxz
                mov r2.y, -r0.y
                mov r2.xz, l(0,0,0,0)
                add r2.xyz, r2.xyzx, v3.xywx
                mov x0[3].xyw, r2.xyxz
                add r2.xyz, r0.zyzz, v3.xywx
                mov x0[6].xyw, r2.xyxz
                mov r2.x, -r0.y
                mov r2.y, -r0.y
                mov r2.z, l(0)
                add r2.xyz, r2.xyzx, v3.xywx
                mov x0[4].xyw, r2.xyxz
                mov r0.w, -r0.y
                add r2.xyz, r0.ywzy, v3.xywx
                mov x0[5].xyw, r2.xyxz
                mov r0.x, -r0.y
                add r2.xyz, r0.xyzx, v3.xywx
                mov x0[7].xyw, r2.xyxz
                add r2.xyz, r0.yyzy, v3.xywx
                mov x0[8].xyw, r2.xyxz
                mov x0[9].xyw, v4.xyxw
                
                #line 213
                mov r2.x, -r0.y
                mov r2.yz, l(0,0,0,0)
                add r2.xyz, r2.xyzx, v4.xywx
                mov x0[10].xyw, r2.xyxz
                add r2.xyz, r0.yzzy, v4.xywx
                mov x0[11].xyw, r2.xyxz
                mov r2.y, -r0.y
                mov r2.xz, l(0,0,0,0)
                add r2.xyz, r2.xyzx, v4.xywx
                mov x0[12].xyw, r2.xyxz
                add r2.xyz, r0.zyzz, v4.xywx
                mov x0[15].xyw, r2.xyxz
                mov r2.x, -r0.y
                mov r2.y, -r0.y
                mov r2.z, l(0)
                add r2.xyz, r2.xyzx, v4.xywx
                mov x0[13].xyw, r2.xyxz
                mov r2.y, -r0.y
                mov r2.zw, r0.yyyz
                add r0.xzw, r2.zzyw, v4.xxyw
                mov x0[14].xyw, r0.xzxw
                mov r2.x, -r0.y
                add r0.xzw, r2.xxzw, v4.xxyw
                mov x0[16].xyw, r0.xzxw
                add r0.xzw, r2.zzzw, v4.xxyw
                mov x0[17].xyw, r0.xzxw
                mov x0[18].xyw, v5.xyxw
                mov r3.x, -r0.y
                mov r3.yz, l(0,0,0,0)
                add r0.xzw, r3.xxyz, v5.xxyw
                mov x0[19].xyw, r0.xzxw
                
                #line 224
                add r0.xzw, r2.zzww, v5.xxyw
                mov x0[20].xyw, r0.xzxw
                mov r3.y, -r0.y
                mov r3.xz, l(0,0,0,0)
                add r0.xzw, r3.xxyz, v5.xxyw
                mov x0[21].xyw, r0.xzxw
                add r0.xzw, r2.wwzw, v5.xxyw
                mov x0[24].xyw, r0.xzxw
                mov r3.x, -r0.y
                mov r3.y, -r0.y
                mov r3.z, l(0)
                add r0.xzw, r3.xxyz, v5.xxyw
                mov x0[22].xyw, r0.xzxw
                mov r2.y, -r0.y
                add r0.xzw, r2.zzyw, v5.xxyw
                mov x0[23].xyw, r0.xzxw
                mov r2.x, -r0.y
                add r0.xyz, r2.xzwx, v5.xywx
                mov x0[25].xyw, r0.xyxz
                add r0.xyz, r2.zzwz, v5.xywx
                mov x0[26].xyw, r0.xyxz
                mov r0.x, l(-0.001000)
                add r0.x, r0.x, r1.x  // r0.x <- S0
                mov r0.y, l(-0.001000)
                add r0.y, r0.y, r1.y  // r0.y <- S1
                mov r0.z, l(-0.001000)
                add r0.z, r0.z, r1.z  // r0.z <- S2
                
                #line 237
                mov r0.w, l(0)  // r0.w <- fShadowTerm
                mov r1.x, l(0)  // r1.x <- i
                mov r1.y, r0.w  // r1.y <- fShadowTerm
                mov r1.z, r1.x  // r1.z <- i
                loop 
                  ilt r1.w, r1.z, l(9)
                  breakc_z r1.w
                  mov r2.xy, x0[r1.z + 0].xyxx
                  mov r1.w, x0[r1.z + 0].w
                  div r2.xy, r2.xyxx, r1.wwww  // r2.x <- uv0.x; r2.y <- uv0.y
                  mov r2.zw, x0[r1.z + 9].xxxy
                  mov r1.w, x0[r1.z + 9].w
                  div r2.zw, r2.zzzw, r1.wwww  // r2.z <- uv1.x; r2.w <- uv1.y
                  mov r3.xy, x0[r1.z + 18].xyxx
                  mov r1.w, x0[r1.z + 18].w
                  div r3.xy, r3.xyxx, r1.wwww  // r3.x <- uv2.x; r3.y <- uv2.y
                  sample_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t1.yzwx, s1
                  mov r1.w, r1.w  // r1.w <- D0
                  sample_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t2.xyzw, s1
                  mov r2.x, r2.x  // r2.x <- D1
                  sample_indexable(texture2d)(float,float,float,float) r2.y, r3.xyxx, t3.yxzw, s1
                  mov r2.y, r2.y  // r2.y <- D2
                
                #line 248
                  lt r1.w, r1.w, r0.x
                  lt r2.x, r2.x, r0.y
                  or r1.w, r1.w, r2.x
                  lt r2.x, r2.y, r0.z
                  or r1.w, r1.w, r2.x
                  movc r1.w, r1.w, l(0.100000), l(1.000000)
                  mov x1[r1.z + 0].x, r1.w
                  mov r1.w, x1[r1.z + 0].x
                  add r1.y, r1.w, r1.y
                  iadd r1.z, r1.z, l(1)
                endloop 
                
                #line 294
                div r0.x, r1.y, l(9.000000)  // r0.x <- fShadowTerm
                mov r0.yzw, -cb1[3].xxyz  // r0.y <- L.x; r0.z <- L.y; r0.w <- L.z
                dp3 r1.x, v6.xyzx, v6.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v6.xyzx
                add r1.xyz, r0.yzwy, r1.xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx  // r1.x <- H.x; r1.y <- H.y; r1.z <- H.z
                dp3 r1.w, v1.xyzx, v1.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, v1.xyzx  // r2.x <- N.x; r2.y <- N.y; r2.z <- N.z
                mul r3.xyz, cb1[0].xyzx, cb2[0].xyzx
                mul r4.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r4.xyz, r4.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r4.xyz, cb1[1].xyzx, cb2[1].xyzx
                itof r1.w, l(0)
                dp3 r0.y, r2.xyzx, r0.yzwy
                max r0.y, r0.y, r1.w
                mul r0.yzw, r0.yyyy, r4.xxyz
                mul r0.xyz, r0.xxxx, r0.yzwy
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r3.xyz, cb1[2].xyzx, cb2[2].xyzx
                itof r0.w, l(0)
                dp3 r1.x, r2.xyzx, r1.xyzx
                max r0.w, r0.w, r1.x
                log r0.w, r0.w
                mul r0.w, r0.w, cb2[4].x
                exp r0.w, r0.w
                mul r1.xyz, r0.wwww, r3.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                
                #line 305
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0
                mul r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- Out.x; r0.y <- Out.y; r0.z <- Out.z
                mul r0.w, r1.w, cb2[1].w  // r0.w <- Out.w
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 163 instruction slots used
                            
            };
        }

    }

    technique11 BuildShadowMap
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float       
                // SV_InstanceID            0   x           3   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- instID; 
                //   o1.x <- <VS_BuildShadowMap return value>.Depth.x; o1.y <- <VS_BuildShadowMap return value>.Depth.y; 
                //   o0.x <- <VS_BuildShadowMap return value>.Pos.x; o0.y <- <VS_BuildShadowMap return value>.Pos.y; o0.z <- <VS_BuildShadowMap return value>.Pos.z; o0.w <- <VS_BuildShadowMap return value>.Pos.w
                //
                #line 328 "D:\Project\GameEngine\media\shader11\pos-norm-tex.fx"
                mov r0.xyzw, cb0[0].xyzw  // r0.x <- mWorld._m00; r0.y <- mWorld._m10; r0.z <- mWorld._m20; r0.w <- mWorld._m30
                mov r1.xyzw, cb0[1].xyzw  // r1.x <- mWorld._m01; r1.y <- mWorld._m11; r1.z <- mWorld._m21; r1.w <- mWorld._m31
                mov r2.xyzw, cb0[2].xyzw  // r2.x <- mWorld._m02; r2.y <- mWorld._m12; r2.z <- mWorld._m22; r2.w <- mWorld._m32
                mov r3.xyzw, cb0[3].xyzw  // r3.x <- mWorld._m03; r3.y <- mWorld._m13; r3.z <- mWorld._m23; r3.w <- mWorld._m33
                dp4 r0.x, v0.xyzw, r0.xyzw  // r0.x <- output.Pos.x
                dp4 r0.y, v0.xyzw, r1.xyzw  // r0.y <- output.Pos.y
                dp4 r0.z, v0.xyzw, r2.xyzw  // r0.z <- output.Pos.z
                dp4 r0.w, v0.xyzw, r3.xyzw  // r0.w <- output.Pos.w
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- output.Pos.x
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- output.Pos.y
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- output.Pos.z
                dp4 r1.w, r0.xyzw, cb0[7].xyzw  // r1.w <- output.Pos.w
                dp4 r0.z, r1.xyzw, cb0[8].xyzw  // r0.z <- output.Pos.x
                dp4 r0.w, r1.xyzw, cb0[9].xyzw  // r0.w <- output.Pos.y
                dp4 r0.x, r1.xyzw, cb0[10].xyzw  // r0.x <- output.Pos.z
                dp4 r0.y, r1.xyzw, cb0[11].xyzw  // r0.y <- output.Pos.w
                mov r0.xy, r0.xyxx  // r0.x <- output.Depth.x; r0.y <- output.Depth.y
                mov o0.xyzw, r0.zwxy
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 20 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Depth.x; v1.y <- In.Depth.y; 
                //   o0.x <- <PS_BuildShadowMap return value>.x; o0.y <- <PS_BuildShadowMap return value>.y; o0.z <- <PS_BuildShadowMap return value>.z; o0.w <- <PS_BuildShadowMap return value>.w
                //
                #line 346 "D:\Project\GameEngine\media\shader11\pos-norm-tex.fx"
                div o0.xyzw, v1.xxxx, v1.yyyy
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

    technique11 Unlit_Instancing
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbPerFrameInstancing
                // {
                //
                //   float4x4 gWorldInst[100];          // Offset:    0 Size:  6400
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerFrameInstancing              cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // SV_InstanceID            0   x           3   INSTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // TEXCOORD                 2   xyz         3     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb3[400], dynamicIndexed
                dcl_input v0.xyzw
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input_sgv v3.x, instance_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o3.xyz
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- instID; 
                //   o3.x <- <VS return value>.toEye.x; o3.y <- <VS return value>.toEye.y; o3.z <- <VS return value>.toEye.z; 
                //   o2.x <- <VS return value>.Tex.x; o2.y <- <VS return value>.Tex.y; 
                //   o1.x <- <VS return value>.Normal.x; o1.y <- <VS return value>.Normal.y; o1.z <- <VS return value>.Normal.z; 
                //   o0.x <- <VS return value>.Pos.x; o0.y <- <VS return value>.Pos.y; o0.z <- <VS return value>.Pos.z; o0.w <- <VS return value>.Pos.w
                //
                #line 101 "D:\Project\GameEngine\media\shader11\pos-norm-tex.fx"
                itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- output.toEye.x; r0.y <- output.toEye.y; r0.z <- output.toEye.z
                imul null, r0.w, v3.x, l(4)
                mov r1.xyzw, cb3[r0.w + 0].xyzw  // r1.x <- mWorld._m00; r1.y <- mWorld._m10; r1.z <- mWorld._m20; r1.w <- mWorld._m30
                mov r2.xyzw, cb3[r0.w + 1].xyzw  // r2.x <- mWorld._m01; r2.y <- mWorld._m11; r2.z <- mWorld._m21; r2.w <- mWorld._m31
                mov r3.xyzw, cb3[r0.w + 2].xyzw  // r3.x <- mWorld._m02; r3.y <- mWorld._m12; r3.z <- mWorld._m22; r3.w <- mWorld._m32
                mov r4.xyzw, cb3[r0.w + 3].xyzw  // r4.x <- mWorld._m03; r4.y <- mWorld._m13; r4.z <- mWorld._m23; r4.w <- mWorld._m33
                dp4 r5.x, v0.xyzw, r1.xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, v0.xyzw, r2.xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, v0.xyzw, r3.xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, v0.xyzw, r4.xyzw  // r5.w <- output.Pos.w
                dp4 r4.x, r5.xyzw, cb0[4].xyzw  // r4.x <- output.Pos.x
                dp4 r4.y, r5.xyzw, cb0[5].xyzw  // r4.y <- output.Pos.y
                dp4 r4.z, r5.xyzw, cb0[6].xyzw  // r4.z <- output.Pos.z
                dp4 r4.w, r5.xyzw, cb0[7].xyzw  // r4.w <- output.Pos.w
                dp4 r5.x, r4.xyzw, cb0[8].xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, r4.xyzw, cb0[9].xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, r4.xyzw, cb0[10].xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, r4.xyzw, cb0[11].xyzw  // r5.w <- output.Pos.w
                dp3 r1.x, v1.xyzx, r1.xyzx
                dp3 r1.y, v1.xyzx, r2.xyzx
                dp3 r1.z, v1.xyzx, r3.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- output.Normal.x; r1.y <- output.Normal.y; r1.z <- output.Normal.z
                mov r2.xy, v2.xyxx  // r2.x <- output.Tex.x; r2.y <- output.Tex.y
                mov o0.xyzw, r5.xyzw
                mov o1.xyz, r1.xyzx
                mov o3.xyz, r0.xyzx
                mov o2.xy, r2.xyxx
                ret 
                // Approximately 30 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64 [unused]
                //   float4x4 gProjection;              // Offset:  128 Size:    64 [unused]
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbLight
                // {
                //
                //   float4 gLight_Ambient;             // Offset:    0 Size:    16
                //   float4 gLight_Diffuse;             // Offset:   16 Size:    16
                //   float4 gLight_Specular;            // Offset:   32 Size:    16
                //   float3 gLight_Direction;           // Offset:   48 Size:    12
                //   float3 gLight_PosW;                // Offset:   64 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbMaetrial
                // {
                //
                //   float4 gMtrl_Ambient;              // Offset:    0 Size:    16
                //   float4 gMtrl_Diffuse;              // Offset:   16 Size:    16
                //   float4 gMtrl_Specular;             // Offset:   32 Size:    16
                //   float4 gMtrl_Emissive;             // Offset:   48 Size:    16 [unused]
                //   float gMtrl_Pow;                   // Offset:   64 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // txDiffuse                         texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbLight                           cbuffer      NA          NA    1        1
                // cbMaetrial                        cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // TEXCOORD                 2   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[5], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v3.xyz
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Normal.x; v1.y <- In.Normal.y; v1.z <- In.Normal.z; 
                //   v2.x <- In.Tex.x; v2.y <- In.Tex.y; 
                //   v3.x <- In.toEye.x; v3.y <- In.toEye.y; v3.z <- In.toEye.z; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 118 "D:\Project\GameEngine\media\shader11\pos-norm-tex.fx"
                mov r0.xyz, -cb1[3].xyzx  // r0.x <- L.x; r0.y <- L.y; r0.z <- L.z
                dp3 r0.w, v3.xyzx, v3.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v3.xyzx
                add r1.xyz, r0.xyzx, r1.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- H.x; r1.y <- H.y; r1.z <- H.z
                dp3 r0.w, v1.xyzx, v1.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, v1.xyzx  // r2.x <- N.x; r2.y <- N.y; r2.z <- N.z
                mul r3.xyzw, cb1[0].xyzw, cb2[0].xyzw
                mul r4.xyzw, cb1[1].xyzw, cb2[1].xyzw
                itof r0.w, l(0)
                dp3 r0.x, r2.xyzx, r0.xyzx
                max r0.x, r0.x, r0.w
                mul r0.xyzw, r0.xxxx, r4.xyzw
                add r0.xyzw, r0.xyzw, r3.xyzw
                mul r3.xyzw, cb1[2].xyzw, cb2[2].xyzw
                itof r1.w, l(0)
                dp3 r1.x, r2.xyzx, r1.xyzx
                max r1.x, r1.x, r1.w
                log r1.x, r1.x
                mul r1.x, r1.x, cb2[4].x
                exp r1.x, r1.x
                mul r1.xyzw, r1.xxxx, r3.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w
                
                #line 126
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0
                mul r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- Out.x; r0.y <- Out.y; r0.z <- Out.z; r0.w <- Out.w
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 31 instruction slots used
                            
            };
        }

    }

    technique11 ShadowMap_Instancing
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbPerFrameInstancing
                // {
                //
                //   float4x4 gWorldInst[100];          // Offset:    0 Size:  6400
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerFrameInstancing              cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // SV_InstanceID            0   x           3   INSTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // TEXCOORD                 7     zw        2     NONE   float     zw
                // TEXCOORD                 2   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 3   xyzw        4     NONE   float   xyzw
                // TEXCOORD                 4   xyzw        5     NONE   float   xyzw
                // TEXCOORD                 5   xyz         6     NONE   float   xyz 
                // TEXCOORD                 6   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[40], immediateIndexed
                dcl_constantbuffer cb3[400], dynamicIndexed
                dcl_input v0.xyzw
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input_sgv v3.x, instance_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_output o3.xyzw
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_output o6.xyz
                dcl_output o7.xyzw
                dcl_temps 11
                dcl_indexableTemp x0[12], 4
                dcl_indexableTemp x1[12], 4
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- instID; 
                //   o7.x <- <VS_ShadowMap return value>.Depth0.x; o7.y <- <VS_ShadowMap return value>.Depth0.y; o7.z <- <VS_ShadowMap return value>.Depth0.z; o7.w <- <VS_ShadowMap return value>.Depth0.w; 
                //   o6.x <- <VS_ShadowMap return value>.toEye.x; o6.y <- <VS_ShadowMap return value>.toEye.y; o6.z <- <VS_ShadowMap return value>.toEye.z; 
                //   o5.x <- <VS_ShadowMap return value>.TexShadow2.x; o5.y <- <VS_ShadowMap return value>.TexShadow2.y; o5.z <- <VS_ShadowMap return value>.TexShadow2.z; o5.w <- <VS_ShadowMap return value>.TexShadow2.w; 
                //   o4.x <- <VS_ShadowMap return value>.TexShadow1.x; o4.y <- <VS_ShadowMap return value>.TexShadow1.y; o4.z <- <VS_ShadowMap return value>.TexShadow1.z; o4.w <- <VS_ShadowMap return value>.TexShadow1.w; 
                //   o3.x <- <VS_ShadowMap return value>.TexShadow0.x; o3.y <- <VS_ShadowMap return value>.TexShadow0.y; o3.z <- <VS_ShadowMap return value>.TexShadow0.z; o3.w <- <VS_ShadowMap return value>.TexShadow0.w; 
                //   o2.x <- <VS_ShadowMap return value>.Tex.x; o2.y <- <VS_ShadowMap return value>.Tex.y; o2.z <- <VS_ShadowMap return value>.Depth1.x; o2.w <- <VS_ShadowMap return value>.Depth1.y; 
                //   o1.x <- <VS_ShadowMap return value>.Normal.x; o1.y <- <VS_ShadowMap return value>.Normal.y; o1.z <- <VS_ShadowMap return value>.Normal.z; 
                //   o0.x <- <VS_ShadowMap return value>.Pos.x; o0.y <- <VS_ShadowMap return value>.Pos.y; o0.z <- <VS_ShadowMap return value>.Pos.z; o0.w <- <VS_ShadowMap return value>.Pos.w; 
                //   x0 <- mLVP; x1 <- mVPT
                //
                #line 155 "D:\Project\GameEngine\media\shader11\pos-norm-tex.fx"
                itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- output.toEye.x; r0.y <- output.toEye.y; r0.z <- output.toEye.z
                imul null, r0.w, v3.x, l(4)
                mov r1.xyzw, cb3[r0.w + 0].xyzw  // r1.x <- mWorld._m00; r1.y <- mWorld._m10; r1.z <- mWorld._m20; r1.w <- mWorld._m30
                mov r2.xyzw, cb3[r0.w + 1].xyzw  // r2.x <- mWorld._m01; r2.y <- mWorld._m11; r2.z <- mWorld._m21; r2.w <- mWorld._m31
                mov r3.xyzw, cb3[r0.w + 2].xyzw  // r3.x <- mWorld._m02; r3.y <- mWorld._m12; r3.z <- mWorld._m22; r3.w <- mWorld._m32
                mov r4.xyzw, cb3[r0.w + 3].xyzw  // r4.x <- mWorld._m03; r4.y <- mWorld._m13; r4.z <- mWorld._m23; r4.w <- mWorld._m33
                dp4 r5.x, v0.xyzw, r1.xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, v0.xyzw, r2.xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, v0.xyzw, r3.xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, v0.xyzw, r4.xyzw  // r5.w <- output.Pos.w
                dp4 r6.x, r5.xyzw, cb0[4].xyzw  // r6.x <- output.Pos.x
                dp4 r6.y, r5.xyzw, cb0[5].xyzw  // r6.y <- output.Pos.y
                dp4 r6.z, r5.xyzw, cb0[6].xyzw  // r6.z <- output.Pos.z
                dp4 r6.w, r5.xyzw, cb0[7].xyzw  // r6.w <- output.Pos.w
                dp4 r5.x, r6.xyzw, cb0[8].xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, r6.xyzw, cb0[9].xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, r6.xyzw, cb0[10].xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, r6.xyzw, cb0[11].xyzw  // r5.w <- output.Pos.w
                dp3 r6.x, v1.xyzx, r1.xyzx
                dp3 r6.y, v1.xyzx, r2.xyzx
                dp3 r6.z, v1.xyzx, r3.xyzx
                dp3 r0.w, r6.xyzx, r6.xyzx
                rsq r0.w, r0.w
                mul r6.xyz, r0.wwww, r6.xyzx  // r6.x <- output.Normal.x; r6.y <- output.Normal.y; r6.z <- output.Normal.z
                mov r7.xy, v2.xyxx  // r7.x <- output.Tex.x; r7.y <- output.Tex.y
                
                #line 167
                dp4 r1.x, v0.xyzw, r1.xyzw  // r1.x <- wPos.x
                dp4 r1.y, v0.xyzw, r2.xyzw  // r1.y <- wPos.y
                dp4 r1.z, v0.xyzw, r3.xyzw  // r1.z <- wPos.z
                dp4 r1.w, v0.xyzw, r4.xyzw  // r1.w <- wPos.w
                mul r2.xyzw, cb0[12].xyzw, cb0[24].xxxx
                mul r3.xyzw, cb0[13].xyzw, cb0[24].yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[14].xyzw, cb0[24].zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[15].xyzw, cb0[24].wwww
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[12].xyzw, cb0[25].xxxx
                mul r4.xyzw, cb0[13].xyzw, cb0[25].yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[14].xyzw, cb0[25].zzzz
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[15].xyzw, cb0[25].wwww
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[12].xyzw, cb0[26].xxxx
                mul r8.xyzw, cb0[13].xyzw, cb0[26].yyyy
                add r4.xyzw, r4.xyzw, r8.xyzw
                mul r8.xyzw, cb0[14].xyzw, cb0[26].zzzz
                add r4.xyzw, r4.xyzw, r8.xyzw
                mul r8.xyzw, cb0[15].xyzw, cb0[26].wwww
                add r4.xyzw, r4.xyzw, r8.xyzw
                mul r8.xyzw, cb0[12].xyzw, cb0[27].xxxx
                mul r9.xyzw, cb0[13].xyzw, cb0[27].yyyy
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[14].xyzw, cb0[27].zzzz
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[15].xyzw, cb0[27].wwww
                add r8.xyzw, r8.xyzw, r9.xyzw
                mov x0[0].x, r2.x
                mov x0[1].x, r3.x
                mov x0[2].x, r4.x
                mov x0[3].x, r8.x
                mov x0[0].y, r2.y
                mov x0[1].y, r3.y
                mov x0[2].y, r4.y
                mov x0[3].y, r8.y
                mov x0[0].z, r2.z
                mov x0[1].z, r3.z
                mov x0[2].z, r4.z
                mov x0[3].z, r8.z
                mov x0[0].w, r2.w
                mov x0[1].w, r3.w
                mov x0[2].w, r4.w
                mov x0[3].w, r8.w
                mov r2.x, x0[0].x
                mov r2.y, x0[1].x
                mov r2.z, x0[2].x
                mov r2.w, x0[3].x
                mov r3.x, x0[0].y
                mov r3.y, x0[1].y
                mov r3.z, x0[2].y
                mov r3.w, x0[3].y
                mov r4.x, x0[0].z
                mov r4.y, x0[1].z
                mov r4.z, x0[2].z
                mov r4.w, x0[3].z
                mov r8.x, x0[0].w
                mov r8.y, x0[1].w
                mov r8.z, x0[2].w
                mov r8.w, x0[3].w
                dp4 r0.w, r2.xyzw, cb0[36].xyzw
                dp4 r6.w, r2.xyzw, cb0[37].xyzw
                dp4 r7.z, r2.xyzw, cb0[38].xyzw
                dp4 r2.x, r2.xyzw, cb0[39].xyzw
                dp4 r2.y, r3.xyzw, cb0[36].xyzw
                dp4 r2.z, r3.xyzw, cb0[37].xyzw
                dp4 r2.w, r3.xyzw, cb0[38].xyzw
                dp4 r3.x, r3.xyzw, cb0[39].xyzw
                dp4 r3.y, r4.xyzw, cb0[36].xyzw
                dp4 r3.z, r4.xyzw, cb0[37].xyzw
                dp4 r3.w, r4.xyzw, cb0[38].xyzw
                dp4 r4.x, r4.xyzw, cb0[39].xyzw
                dp4 r4.y, r8.xyzw, cb0[36].xyzw
                dp4 r4.z, r8.xyzw, cb0[37].xyzw
                dp4 r4.w, r8.xyzw, cb0[38].xyzw
                dp4 r7.w, r8.xyzw, cb0[39].xyzw
                mov x1[0].x, r0.w
                mov x1[1].x, r6.w
                mov x1[2].x, r7.z
                mov x1[3].x, r2.x
                mov x1[0].y, r2.y
                mov x1[1].y, r2.z
                mov x1[2].y, r2.w
                mov x1[3].y, r3.x
                mov x1[0].z, r3.y
                mov x1[1].z, r3.z
                mov x1[2].z, r3.w
                mov x1[3].z, r4.x
                mov x1[0].w, r4.y
                mov x1[1].w, r4.z
                mov x1[2].w, r4.w
                mov x1[3].w, r7.w
                mul r2.xyzw, cb0[16].xyzw, cb0[28].xxxx
                mul r3.xyzw, cb0[17].xyzw, cb0[28].yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[18].xyzw, cb0[28].zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[19].xyzw, cb0[28].wwww
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[16].xyzw, cb0[29].xxxx
                mul r4.xyzw, cb0[17].xyzw, cb0[29].yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[18].xyzw, cb0[29].zzzz
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[19].xyzw, cb0[29].wwww
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[16].xyzw, cb0[30].xxxx
                mul r8.xyzw, cb0[17].xyzw, cb0[30].yyyy
                add r4.xyzw, r4.xyzw, r8.xyzw
                mul r8.xyzw, cb0[18].xyzw, cb0[30].zzzz
                add r4.xyzw, r4.xyzw, r8.xyzw
                mul r8.xyzw, cb0[19].xyzw, cb0[30].wwww
                add r4.xyzw, r4.xyzw, r8.xyzw
                mul r8.xyzw, cb0[16].xyzw, cb0[31].xxxx
                mul r9.xyzw, cb0[17].xyzw, cb0[31].yyyy
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[18].xyzw, cb0[31].zzzz
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[19].xyzw, cb0[31].wwww
                add r8.xyzw, r8.xyzw, r9.xyzw
                mov x0[4].x, r2.x
                mov x0[5].x, r3.x
                mov x0[6].x, r4.x
                mov x0[7].x, r8.x
                mov x0[4].y, r2.y
                mov x0[5].y, r3.y
                mov x0[6].y, r4.y
                mov x0[7].y, r8.y
                mov x0[4].z, r2.z
                mov x0[5].z, r3.z
                mov x0[6].z, r4.z
                mov x0[7].z, r8.z
                mov x0[4].w, r2.w
                mov x0[5].w, r3.w
                mov x0[6].w, r4.w
                mov x0[7].w, r8.w
                mov r2.x, x0[4].x
                mov r2.y, x0[5].x
                mov r2.z, x0[6].x
                mov r2.w, x0[7].x
                mov r3.x, x0[4].y
                mov r3.y, x0[5].y
                mov r3.z, x0[6].y
                mov r3.w, x0[7].y
                mov r4.x, x0[4].z
                mov r4.y, x0[5].z
                mov r4.z, x0[6].z
                mov r4.w, x0[7].z
                mov r8.x, x0[4].w
                mov r8.y, x0[5].w
                mov r8.z, x0[6].w
                mov r8.w, x0[7].w
                dp4 r0.w, r2.xyzw, cb0[36].xyzw
                dp4 r6.w, r2.xyzw, cb0[37].xyzw
                dp4 r7.z, r2.xyzw, cb0[38].xyzw
                dp4 r2.x, r2.xyzw, cb0[39].xyzw
                dp4 r2.y, r3.xyzw, cb0[36].xyzw
                dp4 r2.z, r3.xyzw, cb0[37].xyzw
                dp4 r2.w, r3.xyzw, cb0[38].xyzw
                dp4 r3.x, r3.xyzw, cb0[39].xyzw
                dp4 r3.y, r4.xyzw, cb0[36].xyzw
                dp4 r3.z, r4.xyzw, cb0[37].xyzw
                dp4 r3.w, r4.xyzw, cb0[38].xyzw
                dp4 r4.x, r4.xyzw, cb0[39].xyzw
                dp4 r4.y, r8.xyzw, cb0[36].xyzw
                dp4 r4.z, r8.xyzw, cb0[37].xyzw
                dp4 r4.w, r8.xyzw, cb0[38].xyzw
                dp4 r7.w, r8.xyzw, cb0[39].xyzw
                mov x1[4].x, r0.w
                mov x1[5].x, r6.w
                mov x1[6].x, r7.z
                mov x1[7].x, r2.x
                mov x1[4].y, r2.y
                mov x1[5].y, r2.z
                mov x1[6].y, r2.w
                mov x1[7].y, r3.x
                mov x1[4].z, r3.y
                mov x1[5].z, r3.z
                mov x1[6].z, r3.w
                mov x1[7].z, r4.x
                mov x1[4].w, r4.y
                mov x1[5].w, r4.z
                mov x1[6].w, r4.w
                mov x1[7].w, r7.w
                mul r2.xyzw, cb0[20].xyzw, cb0[32].xxxx
                mul r3.xyzw, cb0[21].xyzw, cb0[32].yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[22].xyzw, cb0[32].zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[23].xyzw, cb0[32].wwww
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[20].xyzw, cb0[33].xxxx
                mul r4.xyzw, cb0[21].xyzw, cb0[33].yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[22].xyzw, cb0[33].zzzz
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[23].xyzw, cb0[33].wwww
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[20].xyzw, cb0[34].xxxx
                mul r8.xyzw, cb0[21].xyzw, cb0[34].yyyy
                add r4.xyzw, r4.xyzw, r8.xyzw
                mul r8.xyzw, cb0[22].xyzw, cb0[34].zzzz
                add r4.xyzw, r4.xyzw, r8.xyzw
                mul r8.xyzw, cb0[23].xyzw, cb0[34].wwww
                add r4.xyzw, r4.xyzw, r8.xyzw
                mul r8.xyzw, cb0[20].xyzw, cb0[35].xxxx
                mul r9.xyzw, cb0[21].xyzw, cb0[35].yyyy
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[22].xyzw, cb0[35].zzzz
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[23].xyzw, cb0[35].wwww
                add r8.xyzw, r8.xyzw, r9.xyzw
                mov x0[8].x, r2.x
                mov x0[9].x, r3.x
                mov x0[10].x, r4.x
                mov x0[11].x, r8.x
                mov x0[8].y, r2.y
                mov x0[9].y, r3.y
                mov x0[10].y, r4.y
                mov x0[11].y, r8.y
                mov x0[8].z, r2.z
                mov x0[9].z, r3.z
                mov x0[10].z, r4.z
                mov x0[11].z, r8.z
                mov x0[8].w, r2.w
                mov x0[9].w, r3.w
                mov x0[10].w, r4.w
                mov x0[11].w, r8.w
                mov r2.x, x0[8].x
                mov r2.y, x0[9].x
                mov r2.z, x0[10].x
                mov r2.w, x0[11].x
                mov r3.x, x0[8].y
                mov r3.y, x0[9].y
                mov r3.z, x0[10].y
                mov r3.w, x0[11].y
                mov r4.x, x0[8].z
                mov r4.y, x0[9].z
                mov r4.z, x0[10].z
                mov r4.w, x0[11].z
                mov r8.x, x0[8].w
                mov r8.y, x0[9].w
                mov r8.z, x0[10].w
                mov r8.w, x0[11].w
                dp4 r0.w, r2.xyzw, cb0[36].xyzw
                dp4 r6.w, r2.xyzw, cb0[37].xyzw
                dp4 r7.z, r2.xyzw, cb0[38].xyzw
                dp4 r2.x, r2.xyzw, cb0[39].xyzw
                dp4 r2.y, r3.xyzw, cb0[36].xyzw
                dp4 r2.z, r3.xyzw, cb0[37].xyzw
                dp4 r2.w, r3.xyzw, cb0[38].xyzw
                dp4 r3.x, r3.xyzw, cb0[39].xyzw
                dp4 r3.y, r4.xyzw, cb0[36].xyzw
                dp4 r3.z, r4.xyzw, cb0[37].xyzw
                dp4 r3.w, r4.xyzw, cb0[38].xyzw
                dp4 r4.x, r4.xyzw, cb0[39].xyzw
                dp4 r4.y, r8.xyzw, cb0[36].xyzw
                dp4 r4.z, r8.xyzw, cb0[37].xyzw
                dp4 r4.w, r8.xyzw, cb0[38].xyzw
                dp4 r7.w, r8.xyzw, cb0[39].xyzw
                mov x1[8].x, r0.w
                mov x1[9].x, r6.w
                mov x1[10].x, r7.z
                mov x1[11].x, r2.x
                mov x1[8].y, r2.y
                mov x1[9].y, r2.z
                mov x1[10].y, r2.w
                mov x1[11].y, r3.x
                mov x1[8].z, r3.y
                mov x1[9].z, r3.z
                mov x1[10].z, r3.w
                mov x1[11].z, r4.x
                mov x1[8].w, r4.y
                mov x1[9].w, r4.z
                mov x1[10].w, r4.w
                mov x1[11].w, r7.w
                mov r2.x, x1[0].x
                mov r3.x, x1[1].x
                mov r4.x, x1[2].x
                mov r8.x, x1[3].x
                mov r2.y, x1[0].y
                mov r3.y, x1[1].y
                mov r4.y, x1[2].y
                mov r8.y, x1[3].y
                mov r2.z, x1[0].z
                mov r3.z, x1[1].z
                mov r4.z, x1[2].z
                mov r8.z, x1[3].z
                mov r2.w, x1[0].w
                mov r3.w, x1[1].w
                mov r4.w, x1[2].w
                mov r8.w, x1[3].w
                dp4 r2.x, r1.xyzw, r2.xyzw  // r2.x <- output.TexShadow0.x
                dp4 r2.y, r1.xyzw, r3.xyzw  // r2.y <- output.TexShadow0.y
                dp4 r2.z, r1.xyzw, r4.xyzw  // r2.z <- output.TexShadow0.z
                dp4 r2.w, r1.xyzw, r8.xyzw  // r2.w <- output.TexShadow0.w
                mov r3.x, x1[4].x
                mov r4.x, x1[5].x
                mov r8.x, x1[6].x
                mov r9.x, x1[7].x
                mov r3.y, x1[4].y
                mov r4.y, x1[5].y
                mov r8.y, x1[6].y
                mov r9.y, x1[7].y
                mov r3.z, x1[4].z
                mov r4.z, x1[5].z
                mov r8.z, x1[6].z
                mov r9.z, x1[7].z
                mov r3.w, x1[4].w
                mov r4.w, x1[5].w
                mov r8.w, x1[6].w
                mov r9.w, x1[7].w
                dp4 r3.x, r1.xyzw, r3.xyzw  // r3.x <- output.TexShadow1.x
                dp4 r3.y, r1.xyzw, r4.xyzw  // r3.y <- output.TexShadow1.y
                dp4 r3.z, r1.xyzw, r8.xyzw  // r3.z <- output.TexShadow1.z
                dp4 r3.w, r1.xyzw, r9.xyzw  // r3.w <- output.TexShadow1.w
                mov r4.x, x1[8].x
                mov r8.x, x1[9].x
                mov r9.x, x1[10].x
                mov r10.x, x1[11].x
                mov r4.y, x1[8].y
                mov r8.y, x1[9].y
                mov r9.y, x1[10].y
                mov r10.y, x1[11].y
                mov r4.z, x1[8].z
                mov r8.z, x1[9].z
                mov r9.z, x1[10].z
                mov r10.z, x1[11].z
                mov r4.w, x1[8].w
                mov r8.w, x1[9].w
                mov r9.w, x1[10].w
                mov r10.w, x1[11].w
                dp4 r4.x, r1.xyzw, r4.xyzw  // r4.x <- output.TexShadow2.x
                dp4 r4.y, r1.xyzw, r8.xyzw  // r4.y <- output.TexShadow2.y
                dp4 r4.z, r1.xyzw, r9.xyzw  // r4.z <- output.TexShadow2.z
                dp4 r4.w, r1.xyzw, r10.xyzw  // r4.w <- output.TexShadow2.w
                
                #line 179
                mov r8.x, x0[2].x
                mov r9.x, x0[3].x
                mov r8.y, x0[2].y
                mov r9.y, x0[3].y
                mov r8.z, x0[2].z
                mov r9.z, x0[3].z
                mov r8.w, x0[2].w
                mov r9.w, x0[3].w
                dp4 r8.x, r1.xyzw, r8.xyzw  // r8.x <- output.Depth0.x
                dp4 r8.y, r1.xyzw, r9.xyzw  // r8.y <- output.Depth0.y
                mov r9.x, x0[6].x
                mov r10.x, x0[7].x
                mov r9.y, x0[6].y
                mov r10.y, x0[7].y
                mov r9.z, x0[6].z
                mov r10.z, x0[7].z
                mov r9.w, x0[6].w
                mov r10.w, x0[7].w
                dp4 r7.z, r1.xyzw, r9.xyzw  // r7.z <- output.Depth0.z
                dp4 r7.w, r1.xyzw, r10.xyzw  // r7.w <- output.Depth0.w
                mov r9.x, x0[10].x
                mov r10.x, x0[11].x
                mov r9.y, x0[10].y
                mov r10.y, x0[11].y
                mov r9.z, x0[10].z
                mov r10.z, x0[11].z
                mov r9.w, x0[10].w
                mov r10.w, x0[11].w
                dp4 r8.z, r1.xyzw, r9.xyzw  // r8.z <- output.Depth1.x
                dp4 r8.w, r1.xyzw, r10.xyzw  // r8.w <- output.Depth1.y
                mov o0.xyzw, r5.xyzw
                mov o2.xy, r7.xyxx
                mov o2.zw, r8.zzzw
                mov o3.xyzw, r2.xyzw
                mov o4.xyzw, r3.xyzw
                mov o5.xyzw, r4.xyzw
                mov o7.xy, r8.xyxx
                mov o7.zw, r7.zzzw
                mov o1.xyz, r6.xyzx
                mov o6.xyz, r0.xyzx
                ret 
                // Approximately 406 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64 [unused]
                //   float4x4 gProjection;              // Offset:  128 Size:    64 [unused]
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbLight
                // {
                //
                //   float4 gLight_Ambient;             // Offset:    0 Size:    16
                //   float4 gLight_Diffuse;             // Offset:   16 Size:    16
                //   float4 gLight_Specular;            // Offset:   32 Size:    16
                //   float3 gLight_Direction;           // Offset:   48 Size:    12
                //   float3 gLight_PosW;                // Offset:   64 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbMaetrial
                // {
                //
                //   float4 gMtrl_Ambient;              // Offset:    0 Size:    16
                //   float4 gMtrl_Diffuse;              // Offset:   16 Size:    16
                //   float4 gMtrl_Specular;             // Offset:   32 Size:    16
                //   float4 gMtrl_Emissive;             // Offset:   48 Size:    16 [unused]
                //   float gMtrl_Pow;                   // Offset:   64 Size:     4
                //
                // }
                //
                // cbuffer cbPerFrameInstancing
                // {
                //
                //   float4x4 gWorldInst[100];          // Offset:    0 Size:  6400 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samShadow                         sampler      NA          NA    1        1
                // txDiffuse                         texture  float4          2d    0        1
                // txShadow0                         texture  float4          2d    1        1
                // txShadow1                         texture  float4          2d    2        1
                // txShadow2                         texture  float4          2d    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbLight                           cbuffer      NA          NA    1        1
                // cbMaetrial                        cbuffer      NA          NA    2        1
                // cbPerFrameInstancing              cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // TEXCOORD                 7     zw        2     NONE   float     zw
                // TEXCOORD                 2   xyzw        3     NONE   float   xy w
                // TEXCOORD                 3   xyzw        4     NONE   float   xy w
                // TEXCOORD                 4   xyzw        5     NONE   float   xy w
                // TEXCOORD                 5   xyz         6     NONE   float   xyz 
                // TEXCOORD                 6   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[5], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_input_ps linear v3.xyw
                dcl_input_ps linear v4.xyw
                dcl_input_ps linear v5.xyw
                dcl_input_ps linear v6.xyz
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 5
                dcl_indexableTemp x0[27], 4
                dcl_indexableTemp x1[9], 4
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Normal.x; v1.y <- In.Normal.y; v1.z <- In.Normal.z; 
                //   v2.x <- In.Tex.x; v2.y <- In.Tex.y; 
                //   v3.x <- In.TexShadow0.x; v3.y <- In.TexShadow0.y; v3.z <- In.TexShadow0.z; v3.w <- In.TexShadow0.w; 
                //   v4.x <- In.TexShadow1.x; v4.y <- In.TexShadow1.y; v4.z <- In.TexShadow1.z; v4.w <- In.TexShadow1.w; 
                //   v5.x <- In.TexShadow2.x; v5.y <- In.TexShadow2.y; v5.z <- In.TexShadow2.z; v5.w <- In.TexShadow2.w; 
                //   v6.x <- In.toEye.x; v6.y <- In.toEye.y; v6.z <- In.toEye.z; 
                //   v7.x <- In.Depth0.x; v7.y <- In.Depth0.y; v7.z <- In.Depth0.z; v7.w <- In.Depth0.w; 
                //   v2.z <- In.Depth1.x; v2.w <- In.Depth1.y; 
                //   o0.x <- <PS_ShadowMap return value>.x; o0.y <- <PS_ShadowMap return value>.y; o0.z <- <PS_ShadowMap return value>.z; o0.w <- <PS_ShadowMap return value>.w; 
                //   x0 <- vTexCoords; x1 <- fShadowTerms
                //
                #line 193 "D:\Project\GameEngine\media\shader11\pos-norm-tex.fx"
                mov r0.y, l(0.000977)  // r0.y <- fTexelSize
                div r1.x, v7.x, v7.y
                min r1.x, r1.x, l(1.000000)  // r1.x <- depth0
                div r1.y, v7.z, v7.w
                min r1.y, r1.y, l(1.000000)  // r1.y <- depth1
                div r1.z, v2.z, v2.w
                min r1.z, r1.z, l(1.000000)  // r1.z <- depth2
                
                #line 202
                mov x0[0].xyw, v3.xyxw
                mov r2.x, -r0.y
                mov r2.yz, l(0,0,0,0)
                add r2.xyz, r2.xyzx, v3.xywx
                mov x0[1].xyw, r2.xyxz
                mov r0.z, l(0)
                add r2.xyz, r0.yzzy, v3.xywx
                mov x0[2].xyw, r2.xyxz
                mov r2.y, -r0.y
                mov r2.xz, l(0,0,0,0)
                add r2.xyz, r2.xyzx, v3.xywx
                mov x0[3].xyw, r2.xyxz
                add r2.xyz, r0.zyzz, v3.xywx
                mov x0[6].xyw, r2.xyxz
                mov r2.x, -r0.y
                mov r2.y, -r0.y
                mov r2.z, l(0)
                add r2.xyz, r2.xyzx, v3.xywx
                mov x0[4].xyw, r2.xyxz
                mov r0.w, -r0.y
                add r2.xyz, r0.ywzy, v3.xywx
                mov x0[5].xyw, r2.xyxz
                mov r0.x, -r0.y
                add r2.xyz, r0.xyzx, v3.xywx
                mov x0[7].xyw, r2.xyxz
                add r2.xyz, r0.yyzy, v3.xywx
                mov x0[8].xyw, r2.xyxz
                mov x0[9].xyw, v4.xyxw
                
                #line 213
                mov r2.x, -r0.y
                mov r2.yz, l(0,0,0,0)
                add r2.xyz, r2.xyzx, v4.xywx
                mov x0[10].xyw, r2.xyxz
                add r2.xyz, r0.yzzy, v4.xywx
                mov x0[11].xyw, r2.xyxz
                mov r2.y, -r0.y
                mov r2.xz, l(0,0,0,0)
                add r2.xyz, r2.xyzx, v4.xywx
                mov x0[12].xyw, r2.xyxz
                add r2.xyz, r0.zyzz, v4.xywx
                mov x0[15].xyw, r2.xyxz
                mov r2.x, -r0.y
                mov r2.y, -r0.y
                mov r2.z, l(0)
                add r2.xyz, r2.xyzx, v4.xywx
                mov x0[13].xyw, r2.xyxz
                mov r2.y, -r0.y
                mov r2.zw, r0.yyyz
                add r0.xzw, r2.zzyw, v4.xxyw
                mov x0[14].xyw, r0.xzxw
                mov r2.x, -r0.y
                add r0.xzw, r2.xxzw, v4.xxyw
                mov x0[16].xyw, r0.xzxw
                add r0.xzw, r2.zzzw, v4.xxyw
                mov x0[17].xyw, r0.xzxw
                mov x0[18].xyw, v5.xyxw
                mov r3.x, -r0.y
                mov r3.yz, l(0,0,0,0)
                add r0.xzw, r3.xxyz, v5.xxyw
                mov x0[19].xyw, r0.xzxw
                
                #line 224
                add r0.xzw, r2.zzww, v5.xxyw
                mov x0[20].xyw, r0.xzxw
                mov r3.y, -r0.y
                mov r3.xz, l(0,0,0,0)
                add r0.xzw, r3.xxyz, v5.xxyw
                mov x0[21].xyw, r0.xzxw
                add r0.xzw, r2.wwzw, v5.xxyw
                mov x0[24].xyw, r0.xzxw
                mov r3.x, -r0.y
                mov r3.y, -r0.y
                mov r3.z, l(0)
                add r0.xzw, r3.xxyz, v5.xxyw
                mov x0[22].xyw, r0.xzxw
                mov r2.y, -r0.y
                add r0.xzw, r2.zzyw, v5.xxyw
                mov x0[23].xyw, r0.xzxw
                mov r2.x, -r0.y
                add r0.xyz, r2.xzwx, v5.xywx
                mov x0[25].xyw, r0.xyxz
                add r0.xyz, r2.zzwz, v5.xywx
                mov x0[26].xyw, r0.xyxz
                mov r0.x, l(-0.001000)
                add r0.x, r0.x, r1.x  // r0.x <- S0
                mov r0.y, l(-0.001000)
                add r0.y, r0.y, r1.y  // r0.y <- S1
                mov r0.z, l(-0.001000)
                add r0.z, r0.z, r1.z  // r0.z <- S2
                
                #line 237
                mov r0.w, l(0)  // r0.w <- fShadowTerm
                mov r1.x, l(0)  // r1.x <- i
                mov r1.y, r0.w  // r1.y <- fShadowTerm
                mov r1.z, r1.x  // r1.z <- i
                loop 
                  ilt r1.w, r1.z, l(9)
                  breakc_z r1.w
                  mov r2.xy, x0[r1.z + 0].xyxx
                  mov r1.w, x0[r1.z + 0].w
                  div r2.xy, r2.xyxx, r1.wwww  // r2.x <- uv0.x; r2.y <- uv0.y
                  mov r2.zw, x0[r1.z + 9].xxxy
                  mov r1.w, x0[r1.z + 9].w
                  div r2.zw, r2.zzzw, r1.wwww  // r2.z <- uv1.x; r2.w <- uv1.y
                  mov r3.xy, x0[r1.z + 18].xyxx
                  mov r1.w, x0[r1.z + 18].w
                  div r3.xy, r3.xyxx, r1.wwww  // r3.x <- uv2.x; r3.y <- uv2.y
                  sample_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t1.yzwx, s1
                  mov r1.w, r1.w  // r1.w <- D0
                  sample_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t2.xyzw, s1
                  mov r2.x, r2.x  // r2.x <- D1
                  sample_indexable(texture2d)(float,float,float,float) r2.y, r3.xyxx, t3.yxzw, s1
                  mov r2.y, r2.y  // r2.y <- D2
                
                #line 248
                  lt r1.w, r1.w, r0.x
                  lt r2.x, r2.x, r0.y
                  or r1.w, r1.w, r2.x
                  lt r2.x, r2.y, r0.z
                  or r1.w, r1.w, r2.x
                  movc r1.w, r1.w, l(0.100000), l(1.000000)
                  mov x1[r1.z + 0].x, r1.w
                  mov r1.w, x1[r1.z + 0].x
                  add r1.y, r1.w, r1.y
                  iadd r1.z, r1.z, l(1)
                endloop 
                
                #line 294
                div r0.x, r1.y, l(9.000000)  // r0.x <- fShadowTerm
                mov r0.yzw, -cb1[3].xxyz  // r0.y <- L.x; r0.z <- L.y; r0.w <- L.z
                dp3 r1.x, v6.xyzx, v6.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v6.xyzx
                add r1.xyz, r0.yzwy, r1.xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx  // r1.x <- H.x; r1.y <- H.y; r1.z <- H.z
                dp3 r1.w, v1.xyzx, v1.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, v1.xyzx  // r2.x <- N.x; r2.y <- N.y; r2.z <- N.z
                mul r3.xyz, cb1[0].xyzx, cb2[0].xyzx
                mul r4.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r4.xyz, r4.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r4.xyz, cb1[1].xyzx, cb2[1].xyzx
                itof r1.w, l(0)
                dp3 r0.y, r2.xyzx, r0.yzwy
                max r0.y, r0.y, r1.w
                mul r0.yzw, r0.yyyy, r4.xxyz
                mul r0.xyz, r0.xxxx, r0.yzwy
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r3.xyz, cb1[2].xyzx, cb2[2].xyzx
                itof r0.w, l(0)
                dp3 r1.x, r2.xyzx, r1.xyzx
                max r0.w, r0.w, r1.x
                log r0.w, r0.w
                mul r0.w, r0.w, cb2[4].x
                exp r0.w, r0.w
                mul r1.xyz, r0.wwww, r3.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                
                #line 305
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0
                mul r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- Out.x; r0.y <- Out.y; r0.z <- Out.z
                mul r0.w, r1.w, cb2[1].w  // r0.w <- Out.w
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 163 instruction slots used
                            
            };
        }

    }

    technique11 BuildShadowMap_Instancing
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbPerFrameInstancing
                // {
                //
                //   float4x4 gWorldInst[100];          // Offset:    0 Size:  6400
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerFrameInstancing              cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float       
                // SV_InstanceID            0   x           3   INSTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb3[400], dynamicIndexed
                dcl_input v0.xyzw
                dcl_input_sgv v3.x, instance_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- instID; 
                //   o1.x <- <VS_BuildShadowMap return value>.Depth.x; o1.y <- <VS_BuildShadowMap return value>.Depth.y; 
                //   o0.x <- <VS_BuildShadowMap return value>.Pos.x; o0.y <- <VS_BuildShadowMap return value>.Pos.y; o0.z <- <VS_BuildShadowMap return value>.Pos.z; o0.w <- <VS_BuildShadowMap return value>.Pos.w
                //
                #line 328 "D:\Project\GameEngine\media\shader11\pos-norm-tex.fx"
                imul null, r0.x, v3.x, l(4)
                mov r1.xyzw, cb3[r0.x + 0].xyzw  // r1.x <- mWorld._m00; r1.y <- mWorld._m10; r1.z <- mWorld._m20; r1.w <- mWorld._m30
                mov r2.xyzw, cb3[r0.x + 1].xyzw  // r2.x <- mWorld._m01; r2.y <- mWorld._m11; r2.z <- mWorld._m21; r2.w <- mWorld._m31
                mov r3.xyzw, cb3[r0.x + 2].xyzw  // r3.x <- mWorld._m02; r3.y <- mWorld._m12; r3.z <- mWorld._m22; r3.w <- mWorld._m32
                mov r0.xyzw, cb3[r0.x + 3].xyzw  // r0.x <- mWorld._m03; r0.y <- mWorld._m13; r0.z <- mWorld._m23; r0.w <- mWorld._m33
                dp4 r1.x, v0.xyzw, r1.xyzw  // r1.x <- output.Pos.x
                dp4 r1.y, v0.xyzw, r2.xyzw  // r1.y <- output.Pos.y
                dp4 r1.z, v0.xyzw, r3.xyzw  // r1.z <- output.Pos.z
                dp4 r1.w, v0.xyzw, r0.xyzw  // r1.w <- output.Pos.w
                dp4 r0.x, r1.xyzw, cb0[4].xyzw  // r0.x <- output.Pos.x
                dp4 r0.y, r1.xyzw, cb0[5].xyzw  // r0.y <- output.Pos.y
                dp4 r0.z, r1.xyzw, cb0[6].xyzw  // r0.z <- output.Pos.z
                dp4 r0.w, r1.xyzw, cb0[7].xyzw  // r0.w <- output.Pos.w
                dp4 r1.z, r0.xyzw, cb0[8].xyzw  // r1.z <- output.Pos.x
                dp4 r1.w, r0.xyzw, cb0[9].xyzw  // r1.w <- output.Pos.y
                dp4 r1.x, r0.xyzw, cb0[10].xyzw  // r1.x <- output.Pos.z
                dp4 r1.y, r0.xyzw, cb0[11].xyzw  // r1.y <- output.Pos.w
                mov r1.xy, r1.xyxx  // r1.x <- output.Depth.x; r1.y <- output.Depth.y
                mov o0.xyzw, r1.zwxy
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Depth.x; v1.y <- In.Depth.y; 
                //   o0.x <- <PS_BuildShadowMap return value>.x; o0.y <- <PS_BuildShadowMap return value>.y; o0.z <- <PS_BuildShadowMap return value>.z; o0.w <- <PS_BuildShadowMap return value>.w
                //
                #line 346 "D:\Project\GameEngine\media\shader11\pos-norm-tex.fx"
                div o0.xyzw, v1.xxxx, v1.yyyy
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

}

