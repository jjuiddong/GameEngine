//
// FX Version: fx_5_0
//
// 5 local buffer(s)
//
cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gView;                     // Offset:   64, size:   64
    float4x4 gProjection;               // Offset:  128, size:   64
    float4x4 gLightView[3];             // Offset:  192, size:  192
    float4x4 gLightProj[3];             // Offset:  384, size:  192
    float4x4 gLightTT;                  // Offset:  576, size:   64
    float3  gEyePosW;                   // Offset:  640, size:   12
}

cbuffer cbLight : register(b1)
{
    float4  gLight_Ambient;             // Offset:    0, size:   16
    float4  gLight_Diffuse;             // Offset:   16, size:   16
    float4  gLight_Specular;            // Offset:   32, size:   16
    float3  gLight_Direction;           // Offset:   48, size:   12
    float3  gLight_PosW;                // Offset:   64, size:   12
}

cbuffer cbMaterial : register(b2)
{
    float4  gMtrl_Ambient;              // Offset:    0, size:   16
    float4  gMtrl_Diffuse;              // Offset:   16, size:   16
    float4  gMtrl_Specular;             // Offset:   32, size:   16
    float4  gMtrl_Emissive;             // Offset:   48, size:   16
    float   gMtrl_Pow;                  // Offset:   64, size:    4
}

cbuffer cbPerFrameInstancing : register(b3)
{
    float4x4 gWorldInst[100];           // Offset:    0, size: 6400
}

cbuffer cbClipPlane : register(b4)
{
    float4  gClipPlane;                 // Offset:    0, size:   16
}

//
// 10 local object(s)
//
Texture2D txDiffuse;
Texture2D txBump;
Texture2D txSpecular;
Texture2D txShadow0;
Texture2D txShadow1;
Texture2D txShadow2;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState samAnis
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerComparisonState samShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(1, 1, 1, 1);
    ComparisonFunc = uint(GREATER_EQUAL /* 7 */);
};
RasterizerState Depth
{
    DepthBias = uint(10000);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 6 technique(s)
    //
    technique11 Unlit
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbClipPlane
                // {
                //
                //   float4 gClipPlane;                 // Offset:    0 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbClipPlane                       cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // BINORMAL                 0   xyz         4     NONE   float   xyz 
                // SV_InstanceID            0   x           5   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // BINORMAL                 0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1   xyz         5     NONE   float   xyz 
                // SV_ClipDistance          0   x           6  CLIPDST   float   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb4[1], immediateIndexed
                dcl_input v0.xyzw
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output_siv o6.x, clip_distance
                dcl_temps 10
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- Tangent.x; v3.y <- Tangent.y; v3.z <- Tangent.z; 
                //   v4.x <- Binormal.x; v4.y <- Binormal.y; v4.z <- Binormal.z; 
                //   v5.x <- instID; 
                //   o6.x <- <VS return value>.clip; 
                //   o5.x <- <VS return value>.toEye.x; o5.y <- <VS return value>.toEye.y; o5.z <- <VS return value>.toEye.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.Binormal.x; o3.y <- <VS return value>.Binormal.y; o3.z <- <VS return value>.Binormal.z; 
                //   o2.x <- <VS return value>.Tangent.x; o2.y <- <VS return value>.Tangent.y; o2.z <- <VS return value>.Tangent.z; 
                //   o1.x <- <VS return value>.Normal.x; o1.y <- <VS return value>.Normal.y; o1.z <- <VS return value>.Normal.z; 
                //   o0.x <- <VS return value>.Pos.x; o0.y <- <VS return value>.Pos.y; o0.z <- <VS return value>.Pos.z; o0.w <- <VS return value>.Pos.w
                //
                #line 123 "D:\Project\Media\shader11\pos-norm-tex-bump.fx"
                itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- output.toEye.x; r0.y <- output.toEye.y; r0.z <- output.toEye.z
                mov r1.xyzw, cb0[0].xyzw  // r1.x <- mWorld._m00; r1.y <- mWorld._m10; r1.z <- mWorld._m20; r1.w <- mWorld._m30
                mov r2.xyzw, cb0[1].xyzw  // r2.x <- mWorld._m01; r2.y <- mWorld._m11; r2.z <- mWorld._m21; r2.w <- mWorld._m31
                mov r3.xyzw, cb0[2].xyzw  // r3.x <- mWorld._m02; r3.y <- mWorld._m12; r3.z <- mWorld._m22; r3.w <- mWorld._m32
                mov r4.xyzw, cb0[3].xyzw  // r4.x <- mWorld._m03; r4.y <- mWorld._m13; r4.z <- mWorld._m23; r4.w <- mWorld._m33
                dp4 r5.x, v0.xyzw, r1.xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, v0.xyzw, r2.xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, v0.xyzw, r3.xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, v0.xyzw, r4.xyzw  // r5.w <- output.Pos.w
                dp4 r6.x, r5.xyzw, cb0[4].xyzw  // r6.x <- output.Pos.x
                dp4 r6.y, r5.xyzw, cb0[5].xyzw  // r6.y <- output.Pos.y
                dp4 r6.z, r5.xyzw, cb0[6].xyzw  // r6.z <- output.Pos.z
                dp4 r6.w, r5.xyzw, cb0[7].xyzw  // r6.w <- output.Pos.w
                dp4 r5.x, r6.xyzw, cb0[8].xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, r6.xyzw, cb0[9].xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, r6.xyzw, cb0[10].xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, r6.xyzw, cb0[11].xyzw  // r5.w <- output.Pos.w
                dp3 r6.x, v1.xyzx, r1.xyzx
                dp3 r6.y, v1.xyzx, r2.xyzx
                dp3 r6.z, v1.xyzx, r3.xyzx
                dp3 r0.w, r6.xyzx, r6.xyzx
                rsq r0.w, r0.w
                mul r6.xyz, r0.wwww, r6.xyzx  // r6.x <- output.Normal.x; r6.y <- output.Normal.y; r6.z <- output.Normal.z
                dp3 r7.x, v3.xyzx, r1.xyzx
                dp3 r7.y, v3.xyzx, r2.xyzx
                dp3 r7.z, v3.xyzx, r3.xyzx
                dp3 r0.w, r7.xyzx, r7.xyzx
                rsq r0.w, r0.w
                mul r7.xyz, r0.wwww, r7.xyzx  // r7.x <- output.Tangent.x; r7.y <- output.Tangent.y; r7.z <- output.Tangent.z
                dp3 r8.x, v4.xyzx, r1.xyzx
                dp3 r8.y, v4.xyzx, r2.xyzx
                dp3 r8.z, v4.xyzx, r3.xyzx
                dp3 r0.w, r8.xyzx, r8.xyzx
                rsq r0.w, r0.w
                mul r8.xyz, r0.wwww, r8.xyzx  // r8.x <- output.Binormal.x; r8.y <- output.Binormal.y; r8.z <- output.Binormal.z
                mov r9.xy, v2.xyxx  // r9.x <- output.Tex.x; r9.y <- output.Tex.y
                dp4 r1.x, v0.xyzw, r1.xyzw
                dp4 r1.y, v0.xyzw, r2.xyzw
                dp4 r1.z, v0.xyzw, r3.xyzw
                dp4 r1.w, v0.xyzw, r4.xyzw
                dp4 r0.w, r1.xyzw, cb4[0].xyzw  // r0.w <- output.clip
                
                #line 135
                mov o0.xyzw, r5.xyzw
                mov o1.xyz, r6.xyzx
                mov o2.xyz, r7.xyzx
                mov o3.xyz, r8.xyzx
                mov o5.xyz, r0.xyzx
                mov o4.xy, r9.xyxx
                mov o6.x, r0.w
                ret 
                // Approximately 49 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64 [unused]
                //   float4x4 gProjection;              // Offset:  128 Size:    64 [unused]
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbLight
                // {
                //
                //   float4 gLight_Ambient;             // Offset:    0 Size:    16
                //   float4 gLight_Diffuse;             // Offset:   16 Size:    16
                //   float4 gLight_Specular;            // Offset:   32 Size:    16
                //   float3 gLight_Direction;           // Offset:   48 Size:    12
                //   float3 gLight_PosW;                // Offset:   64 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbMaterial
                // {
                //
                //   float4 gMtrl_Ambient;              // Offset:    0 Size:    16
                //   float4 gMtrl_Diffuse;              // Offset:   16 Size:    16
                //   float4 gMtrl_Specular;             // Offset:   32 Size:    16
                //   float4 gMtrl_Emissive;             // Offset:   48 Size:    16 [unused]
                //   float gMtrl_Pow;                   // Offset:   64 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // txDiffuse                         texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbLight                           cbuffer      NA          NA    1        1
                // cbMaterial                        cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float       
                // BINORMAL                 0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1   xyz         5     NONE   float   xyz 
                // SV_ClipDistance          0   x           6  CLIPDST   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[5], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Normal.x; v1.y <- In.Normal.y; v1.z <- In.Normal.z; 
                //   v2.x <- In.Tangent.x; v2.y <- In.Tangent.y; v2.z <- In.Tangent.z; 
                //   v3.x <- In.Binormal.x; v3.y <- In.Binormal.y; v3.z <- In.Binormal.z; 
                //   v4.x <- In.Tex.x; v4.y <- In.Tex.y; 
                //   v5.x <- In.toEye.x; v5.y <- In.toEye.y; v5.z <- In.toEye.z; 
                //   v6.x <- In.clip; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 144 "D:\Project\Media\shader11\pos-norm-tex-bump.fx"
                mov r0.xyz, -cb1[3].xyzx  // r0.x <- L.x; r0.y <- L.y; r0.z <- L.z
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.xyzx
                add r1.xyz, r0.xyzx, r1.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- H.x; r1.y <- H.y; r1.z <- H.z
                dp3 r0.w, v1.xyzx, v1.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, v1.xyzx  // r2.x <- N.x; r2.y <- N.y; r2.z <- N.z
                mul r3.xyz, cb1[0].xyzx, cb2[0].xyzx
                mul r4.xyz, cb1[1].xyzx, cb2[1].xyzx
                itof r0.w, l(0)
                dp3 r0.x, r2.xyzx, r0.xyzx
                max r0.x, r0.x, r0.w
                mul r0.xyz, r0.xxxx, r4.xyzx
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r3.xyz, cb1[2].xyzx, cb2[2].xyzx
                itof r0.w, l(0)
                dp3 r1.x, r2.xyzx, r1.xyzx
                max r0.w, r0.w, r1.x
                log r0.w, r0.w
                mul r0.w, r0.w, cb2[4].x
                exp r0.w, r0.w
                mul r1.xyz, r0.wwww, r3.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                
                #line 152
                sample_indexable(texture2d)(float,float,float,float) r1.xyz, v4.xyxx, t0.xyzw, s0
                mul r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- Out.x; r0.y <- Out.y; r0.z <- Out.z
                mov o0.xyz, r0.xyzx
                mov o0.w, cb2[1].w
                ret 
                // Approximately 32 instruction slots used
                            
            };
        }

    }

    technique11 ShadowMap
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbClipPlane
                // {
                //
                //   float4 gClipPlane;                 // Offset:    0 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbClipPlane                       cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // BINORMAL                 0   xyz         4     NONE   float   xyz 
                // SV_InstanceID            0   x           5   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // BINORMAL                 0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 6     zw        4     NONE   float     zw
                // TEXCOORD                 1   xyzw        5     NONE   float   xyzw
                // TEXCOORD                 2   xyzw        6     NONE   float   xyzw
                // TEXCOORD                 3   xyzw        7     NONE   float   xyzw
                // TEXCOORD                 4   xyz         8     NONE   float   xyz 
                // TEXCOORD                 5   xyzw        9     NONE   float   xyzw
                // SV_ClipDistance          0   x          10  CLIPDST   float   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[40], immediateIndexed
                dcl_constantbuffer cb4[1], immediateIndexed
                dcl_input v0.xyzw
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xyzw
                dcl_output o6.xyzw
                dcl_output o7.xyzw
                dcl_output o8.xyz
                dcl_output o9.xyzw
                dcl_output_siv o10.x, clip_distance
                dcl_temps 17
                dcl_indexableTemp x0[12], 4
                dcl_indexableTemp x1[12], 4
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- Tangent.x; v3.y <- Tangent.y; v3.z <- Tangent.z; 
                //   v4.x <- Binormal.x; v4.y <- Binormal.y; v4.z <- Binormal.z; 
                //   v5.x <- instID; 
                //   o10.x <- <VS_ShadowMap return value>.clip; 
                //   o9.x <- <VS_ShadowMap return value>.Depth0.x; o9.y <- <VS_ShadowMap return value>.Depth0.y; o9.z <- <VS_ShadowMap return value>.Depth0.z; o9.w <- <VS_ShadowMap return value>.Depth0.w; 
                //   o8.x <- <VS_ShadowMap return value>.toEye.x; o8.y <- <VS_ShadowMap return value>.toEye.y; o8.z <- <VS_ShadowMap return value>.toEye.z; 
                //   o7.x <- <VS_ShadowMap return value>.TexShadow2.x; o7.y <- <VS_ShadowMap return value>.TexShadow2.y; o7.z <- <VS_ShadowMap return value>.TexShadow2.z; o7.w <- <VS_ShadowMap return value>.TexShadow2.w; 
                //   o6.x <- <VS_ShadowMap return value>.TexShadow1.x; o6.y <- <VS_ShadowMap return value>.TexShadow1.y; o6.z <- <VS_ShadowMap return value>.TexShadow1.z; o6.w <- <VS_ShadowMap return value>.TexShadow1.w; 
                //   o5.x <- <VS_ShadowMap return value>.TexShadow0.x; o5.y <- <VS_ShadowMap return value>.TexShadow0.y; o5.z <- <VS_ShadowMap return value>.TexShadow0.z; o5.w <- <VS_ShadowMap return value>.TexShadow0.w; 
                //   o4.x <- <VS_ShadowMap return value>.Tex.x; o4.y <- <VS_ShadowMap return value>.Tex.y; o4.z <- <VS_ShadowMap return value>.Depth1.x; o4.w <- <VS_ShadowMap return value>.Depth1.y; 
                //   o3.x <- <VS_ShadowMap return value>.Binormal.x; o3.y <- <VS_ShadowMap return value>.Binormal.y; o3.z <- <VS_ShadowMap return value>.Binormal.z; 
                //   o2.x <- <VS_ShadowMap return value>.Tangent.x; o2.y <- <VS_ShadowMap return value>.Tangent.y; o2.z <- <VS_ShadowMap return value>.Tangent.z; 
                //   o1.x <- <VS_ShadowMap return value>.Normal.x; o1.y <- <VS_ShadowMap return value>.Normal.y; o1.z <- <VS_ShadowMap return value>.Normal.z; 
                //   o0.x <- <VS_ShadowMap return value>.Pos.x; o0.y <- <VS_ShadowMap return value>.Pos.y; o0.z <- <VS_ShadowMap return value>.Pos.z; o0.w <- <VS_ShadowMap return value>.Pos.w; 
                //   x0 <- mLVP; x1 <- mVPT
                //
                #line 186 "D:\Project\Media\shader11\pos-norm-tex-bump.fx"
                itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- output.toEye.x; r0.y <- output.toEye.y; r0.z <- output.toEye.z
                mov r1.xyzw, cb0[0].xyzw  // r1.x <- mWorld._m00; r1.y <- mWorld._m10; r1.z <- mWorld._m20; r1.w <- mWorld._m30
                mov r2.xyzw, cb0[1].xyzw  // r2.x <- mWorld._m01; r2.y <- mWorld._m11; r2.z <- mWorld._m21; r2.w <- mWorld._m31
                mov r3.xyzw, cb0[2].xyzw  // r3.x <- mWorld._m02; r3.y <- mWorld._m12; r3.z <- mWorld._m22; r3.w <- mWorld._m32
                mov r4.xyzw, cb0[3].xyzw  // r4.x <- mWorld._m03; r4.y <- mWorld._m13; r4.z <- mWorld._m23; r4.w <- mWorld._m33
                dp4 r5.x, v0.xyzw, r1.xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, v0.xyzw, r2.xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, v0.xyzw, r3.xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, v0.xyzw, r4.xyzw  // r5.w <- output.Pos.w
                dp4 r6.x, r5.xyzw, cb0[4].xyzw  // r6.x <- output.Pos.x
                dp4 r6.y, r5.xyzw, cb0[5].xyzw  // r6.y <- output.Pos.y
                dp4 r6.z, r5.xyzw, cb0[6].xyzw  // r6.z <- output.Pos.z
                dp4 r6.w, r5.xyzw, cb0[7].xyzw  // r6.w <- output.Pos.w
                dp4 r5.x, r6.xyzw, cb0[8].xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, r6.xyzw, cb0[9].xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, r6.xyzw, cb0[10].xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, r6.xyzw, cb0[11].xyzw  // r5.w <- output.Pos.w
                dp3 r6.x, v1.xyzx, r1.xyzx
                dp3 r6.y, v1.xyzx, r2.xyzx
                dp3 r6.z, v1.xyzx, r3.xyzx
                dp3 r0.w, r6.xyzx, r6.xyzx
                rsq r0.w, r0.w
                mul r6.xyz, r0.wwww, r6.xyzx  // r6.x <- output.Normal.x; r6.y <- output.Normal.y; r6.z <- output.Normal.z
                dp3 r7.x, v3.xyzx, r1.xyzx
                dp3 r7.y, v3.xyzx, r2.xyzx
                dp3 r7.z, v3.xyzx, r3.xyzx
                dp3 r0.w, r7.xyzx, r7.xyzx
                rsq r0.w, r0.w
                mul r7.xyz, r0.wwww, r7.xyzx  // r7.x <- output.Tangent.x; r7.y <- output.Tangent.y; r7.z <- output.Tangent.z
                dp3 r8.x, v4.xyzx, r1.xyzx
                dp3 r8.y, v4.xyzx, r2.xyzx
                dp3 r8.z, v4.xyzx, r3.xyzx
                dp3 r0.w, r8.xyzx, r8.xyzx
                rsq r0.w, r0.w
                mul r8.xyz, r0.wwww, r8.xyzx  // r8.x <- output.Binormal.x; r8.y <- output.Binormal.y; r8.z <- output.Binormal.z
                mov r9.xy, v2.xyxx  // r9.x <- output.Tex.x; r9.y <- output.Tex.y
                
                #line 200
                dp4 r10.x, v0.xyzw, r1.xyzw  // r10.x <- wPos.x
                dp4 r10.y, v0.xyzw, r2.xyzw  // r10.y <- wPos.y
                dp4 r10.z, v0.xyzw, r3.xyzw  // r10.z <- wPos.z
                dp4 r10.w, v0.xyzw, r4.xyzw  // r10.w <- wPos.w
                mul r11.xyzw, cb0[12].xyzw, cb0[24].xxxx
                mul r12.xyzw, cb0[13].xyzw, cb0[24].yyyy
                add r11.xyzw, r11.xyzw, r12.xyzw
                mul r12.xyzw, cb0[14].xyzw, cb0[24].zzzz
                add r11.xyzw, r11.xyzw, r12.xyzw
                mul r12.xyzw, cb0[15].xyzw, cb0[24].wwww
                add r11.xyzw, r11.xyzw, r12.xyzw
                mul r12.xyzw, cb0[12].xyzw, cb0[25].xxxx
                mul r13.xyzw, cb0[13].xyzw, cb0[25].yyyy
                add r12.xyzw, r12.xyzw, r13.xyzw
                mul r13.xyzw, cb0[14].xyzw, cb0[25].zzzz
                add r12.xyzw, r12.xyzw, r13.xyzw
                mul r13.xyzw, cb0[15].xyzw, cb0[25].wwww
                add r12.xyzw, r12.xyzw, r13.xyzw
                mul r13.xyzw, cb0[12].xyzw, cb0[26].xxxx
                mul r14.xyzw, cb0[13].xyzw, cb0[26].yyyy
                add r13.xyzw, r13.xyzw, r14.xyzw
                mul r14.xyzw, cb0[14].xyzw, cb0[26].zzzz
                add r13.xyzw, r13.xyzw, r14.xyzw
                mul r14.xyzw, cb0[15].xyzw, cb0[26].wwww
                add r13.xyzw, r13.xyzw, r14.xyzw
                mul r14.xyzw, cb0[12].xyzw, cb0[27].xxxx
                mul r15.xyzw, cb0[13].xyzw, cb0[27].yyyy
                add r14.xyzw, r14.xyzw, r15.xyzw
                mul r15.xyzw, cb0[14].xyzw, cb0[27].zzzz
                add r14.xyzw, r14.xyzw, r15.xyzw
                mul r15.xyzw, cb0[15].xyzw, cb0[27].wwww
                add r14.xyzw, r14.xyzw, r15.xyzw
                mov x0[0].x, r11.x
                mov x0[1].x, r12.x
                mov x0[2].x, r13.x
                mov x0[3].x, r14.x
                mov x0[0].y, r11.y
                mov x0[1].y, r12.y
                mov x0[2].y, r13.y
                mov x0[3].y, r14.y
                mov x0[0].z, r11.z
                mov x0[1].z, r12.z
                mov x0[2].z, r13.z
                mov x0[3].z, r14.z
                mov x0[0].w, r11.w
                mov x0[1].w, r12.w
                mov x0[2].w, r13.w
                mov x0[3].w, r14.w
                mov r11.x, x0[0].x
                mov r11.y, x0[1].x
                mov r11.z, x0[2].x
                mov r11.w, x0[3].x
                mov r12.x, x0[0].y
                mov r12.y, x0[1].y
                mov r12.z, x0[2].y
                mov r12.w, x0[3].y
                mov r13.x, x0[0].z
                mov r13.y, x0[1].z
                mov r13.z, x0[2].z
                mov r13.w, x0[3].z
                mov r14.x, x0[0].w
                mov r14.y, x0[1].w
                mov r14.z, x0[2].w
                mov r14.w, x0[3].w
                dp4 r0.w, r11.xyzw, cb0[36].xyzw
                dp4 r6.w, r11.xyzw, cb0[37].xyzw
                dp4 r7.w, r11.xyzw, cb0[38].xyzw
                dp4 r8.w, r11.xyzw, cb0[39].xyzw
                dp4 r9.z, r12.xyzw, cb0[36].xyzw
                dp4 r9.w, r12.xyzw, cb0[37].xyzw
                dp4 r11.x, r12.xyzw, cb0[38].xyzw
                dp4 r11.y, r12.xyzw, cb0[39].xyzw
                dp4 r11.z, r13.xyzw, cb0[36].xyzw
                dp4 r11.w, r13.xyzw, cb0[37].xyzw
                dp4 r12.x, r13.xyzw, cb0[38].xyzw
                dp4 r12.y, r13.xyzw, cb0[39].xyzw
                dp4 r12.z, r14.xyzw, cb0[36].xyzw
                dp4 r12.w, r14.xyzw, cb0[37].xyzw
                dp4 r13.x, r14.xyzw, cb0[38].xyzw
                dp4 r13.y, r14.xyzw, cb0[39].xyzw
                mov x1[0].x, r0.w
                mov x1[1].x, r6.w
                mov x1[2].x, r7.w
                mov x1[3].x, r8.w
                mov x1[0].y, r9.z
                mov x1[1].y, r9.w
                mov x1[2].y, r11.x
                mov x1[3].y, r11.y
                mov x1[0].z, r11.z
                mov x1[1].z, r11.w
                mov x1[2].z, r12.x
                mov x1[3].z, r12.y
                mov x1[0].w, r12.z
                mov x1[1].w, r12.w
                mov x1[2].w, r13.x
                mov x1[3].w, r13.y
                mul r11.xyzw, cb0[16].xyzw, cb0[28].xxxx
                mul r12.xyzw, cb0[17].xyzw, cb0[28].yyyy
                add r11.xyzw, r11.xyzw, r12.xyzw
                mul r12.xyzw, cb0[18].xyzw, cb0[28].zzzz
                add r11.xyzw, r11.xyzw, r12.xyzw
                mul r12.xyzw, cb0[19].xyzw, cb0[28].wwww
                add r11.xyzw, r11.xyzw, r12.xyzw
                mul r12.xyzw, cb0[16].xyzw, cb0[29].xxxx
                mul r13.xyzw, cb0[17].xyzw, cb0[29].yyyy
                add r12.xyzw, r12.xyzw, r13.xyzw
                mul r13.xyzw, cb0[18].xyzw, cb0[29].zzzz
                add r12.xyzw, r12.xyzw, r13.xyzw
                mul r13.xyzw, cb0[19].xyzw, cb0[29].wwww
                add r12.xyzw, r12.xyzw, r13.xyzw
                mul r13.xyzw, cb0[16].xyzw, cb0[30].xxxx
                mul r14.xyzw, cb0[17].xyzw, cb0[30].yyyy
                add r13.xyzw, r13.xyzw, r14.xyzw
                mul r14.xyzw, cb0[18].xyzw, cb0[30].zzzz
                add r13.xyzw, r13.xyzw, r14.xyzw
                mul r14.xyzw, cb0[19].xyzw, cb0[30].wwww
                add r13.xyzw, r13.xyzw, r14.xyzw
                mul r14.xyzw, cb0[16].xyzw, cb0[31].xxxx
                mul r15.xyzw, cb0[17].xyzw, cb0[31].yyyy
                add r14.xyzw, r14.xyzw, r15.xyzw
                mul r15.xyzw, cb0[18].xyzw, cb0[31].zzzz
                add r14.xyzw, r14.xyzw, r15.xyzw
                mul r15.xyzw, cb0[19].xyzw, cb0[31].wwww
                add r14.xyzw, r14.xyzw, r15.xyzw
                mov x0[4].x, r11.x
                mov x0[5].x, r12.x
                mov x0[6].x, r13.x
                mov x0[7].x, r14.x
                mov x0[4].y, r11.y
                mov x0[5].y, r12.y
                mov x0[6].y, r13.y
                mov x0[7].y, r14.y
                mov x0[4].z, r11.z
                mov x0[5].z, r12.z
                mov x0[6].z, r13.z
                mov x0[7].z, r14.z
                mov x0[4].w, r11.w
                mov x0[5].w, r12.w
                mov x0[6].w, r13.w
                mov x0[7].w, r14.w
                mov r11.x, x0[4].x
                mov r11.y, x0[5].x
                mov r11.z, x0[6].x
                mov r11.w, x0[7].x
                mov r12.x, x0[4].y
                mov r12.y, x0[5].y
                mov r12.z, x0[6].y
                mov r12.w, x0[7].y
                mov r13.x, x0[4].z
                mov r13.y, x0[5].z
                mov r13.z, x0[6].z
                mov r13.w, x0[7].z
                mov r14.x, x0[4].w
                mov r14.y, x0[5].w
                mov r14.z, x0[6].w
                mov r14.w, x0[7].w
                dp4 r0.w, r11.xyzw, cb0[36].xyzw
                dp4 r6.w, r11.xyzw, cb0[37].xyzw
                dp4 r7.w, r11.xyzw, cb0[38].xyzw
                dp4 r8.w, r11.xyzw, cb0[39].xyzw
                dp4 r9.z, r12.xyzw, cb0[36].xyzw
                dp4 r9.w, r12.xyzw, cb0[37].xyzw
                dp4 r11.x, r12.xyzw, cb0[38].xyzw
                dp4 r11.y, r12.xyzw, cb0[39].xyzw
                dp4 r11.z, r13.xyzw, cb0[36].xyzw
                dp4 r11.w, r13.xyzw, cb0[37].xyzw
                dp4 r12.x, r13.xyzw, cb0[38].xyzw
                dp4 r12.y, r13.xyzw, cb0[39].xyzw
                dp4 r12.z, r14.xyzw, cb0[36].xyzw
                dp4 r12.w, r14.xyzw, cb0[37].xyzw
                dp4 r13.x, r14.xyzw, cb0[38].xyzw
                dp4 r13.y, r14.xyzw, cb0[39].xyzw
                mov x1[4].x, r0.w
                mov x1[5].x, r6.w
                mov x1[6].x, r7.w
                mov x1[7].x, r8.w
                mov x1[4].y, r9.z
                mov x1[5].y, r9.w
                mov x1[6].y, r11.x
                mov x1[7].y, r11.y
                mov x1[4].z, r11.z
                mov x1[5].z, r11.w
                mov x1[6].z, r12.x
                mov x1[7].z, r12.y
                mov x1[4].w, r12.z
                mov x1[5].w, r12.w
                mov x1[6].w, r13.x
                mov x1[7].w, r13.y
                mul r11.xyzw, cb0[20].xyzw, cb0[32].xxxx
                mul r12.xyzw, cb0[21].xyzw, cb0[32].yyyy
                add r11.xyzw, r11.xyzw, r12.xyzw
                mul r12.xyzw, cb0[22].xyzw, cb0[32].zzzz
                add r11.xyzw, r11.xyzw, r12.xyzw
                mul r12.xyzw, cb0[23].xyzw, cb0[32].wwww
                add r11.xyzw, r11.xyzw, r12.xyzw
                mul r12.xyzw, cb0[20].xyzw, cb0[33].xxxx
                mul r13.xyzw, cb0[21].xyzw, cb0[33].yyyy
                add r12.xyzw, r12.xyzw, r13.xyzw
                mul r13.xyzw, cb0[22].xyzw, cb0[33].zzzz
                add r12.xyzw, r12.xyzw, r13.xyzw
                mul r13.xyzw, cb0[23].xyzw, cb0[33].wwww
                add r12.xyzw, r12.xyzw, r13.xyzw
                mul r13.xyzw, cb0[20].xyzw, cb0[34].xxxx
                mul r14.xyzw, cb0[21].xyzw, cb0[34].yyyy
                add r13.xyzw, r13.xyzw, r14.xyzw
                mul r14.xyzw, cb0[22].xyzw, cb0[34].zzzz
                add r13.xyzw, r13.xyzw, r14.xyzw
                mul r14.xyzw, cb0[23].xyzw, cb0[34].wwww
                add r13.xyzw, r13.xyzw, r14.xyzw
                mul r14.xyzw, cb0[20].xyzw, cb0[35].xxxx
                mul r15.xyzw, cb0[21].xyzw, cb0[35].yyyy
                add r14.xyzw, r14.xyzw, r15.xyzw
                mul r15.xyzw, cb0[22].xyzw, cb0[35].zzzz
                add r14.xyzw, r14.xyzw, r15.xyzw
                mul r15.xyzw, cb0[23].xyzw, cb0[35].wwww
                add r14.xyzw, r14.xyzw, r15.xyzw
                mov x0[8].x, r11.x
                mov x0[9].x, r12.x
                mov x0[10].x, r13.x
                mov x0[11].x, r14.x
                mov x0[8].y, r11.y
                mov x0[9].y, r12.y
                mov x0[10].y, r13.y
                mov x0[11].y, r14.y
                mov x0[8].z, r11.z
                mov x0[9].z, r12.z
                mov x0[10].z, r13.z
                mov x0[11].z, r14.z
                mov x0[8].w, r11.w
                mov x0[9].w, r12.w
                mov x0[10].w, r13.w
                mov x0[11].w, r14.w
                mov r11.x, x0[8].x
                mov r11.y, x0[9].x
                mov r11.z, x0[10].x
                mov r11.w, x0[11].x
                mov r12.x, x0[8].y
                mov r12.y, x0[9].y
                mov r12.z, x0[10].y
                mov r12.w, x0[11].y
                mov r13.x, x0[8].z
                mov r13.y, x0[9].z
                mov r13.z, x0[10].z
                mov r13.w, x0[11].z
                mov r14.x, x0[8].w
                mov r14.y, x0[9].w
                mov r14.z, x0[10].w
                mov r14.w, x0[11].w
                dp4 r0.w, r11.xyzw, cb0[36].xyzw
                dp4 r6.w, r11.xyzw, cb0[37].xyzw
                dp4 r7.w, r11.xyzw, cb0[38].xyzw
                dp4 r8.w, r11.xyzw, cb0[39].xyzw
                dp4 r9.z, r12.xyzw, cb0[36].xyzw
                dp4 r9.w, r12.xyzw, cb0[37].xyzw
                dp4 r11.x, r12.xyzw, cb0[38].xyzw
                dp4 r11.y, r12.xyzw, cb0[39].xyzw
                dp4 r11.z, r13.xyzw, cb0[36].xyzw
                dp4 r11.w, r13.xyzw, cb0[37].xyzw
                dp4 r12.x, r13.xyzw, cb0[38].xyzw
                dp4 r12.y, r13.xyzw, cb0[39].xyzw
                dp4 r12.z, r14.xyzw, cb0[36].xyzw
                dp4 r12.w, r14.xyzw, cb0[37].xyzw
                dp4 r13.x, r14.xyzw, cb0[38].xyzw
                dp4 r13.y, r14.xyzw, cb0[39].xyzw
                mov x1[8].x, r0.w
                mov x1[9].x, r6.w
                mov x1[10].x, r7.w
                mov x1[11].x, r8.w
                mov x1[8].y, r9.z
                mov x1[9].y, r9.w
                mov x1[10].y, r11.x
                mov x1[11].y, r11.y
                mov x1[8].z, r11.z
                mov x1[9].z, r11.w
                mov x1[10].z, r12.x
                mov x1[11].z, r12.y
                mov x1[8].w, r12.z
                mov x1[9].w, r12.w
                mov x1[10].w, r13.x
                mov x1[11].w, r13.y
                mov r11.x, x1[0].x
                mov r12.x, x1[1].x
                mov r13.x, x1[2].x
                mov r14.x, x1[3].x
                mov r11.y, x1[0].y
                mov r12.y, x1[1].y
                mov r13.y, x1[2].y
                mov r14.y, x1[3].y
                mov r11.z, x1[0].z
                mov r12.z, x1[1].z
                mov r13.z, x1[2].z
                mov r14.z, x1[3].z
                mov r11.w, x1[0].w
                mov r12.w, x1[1].w
                mov r13.w, x1[2].w
                mov r14.w, x1[3].w
                dp4 r11.x, r10.xyzw, r11.xyzw  // r11.x <- output.TexShadow0.x
                dp4 r11.y, r10.xyzw, r12.xyzw  // r11.y <- output.TexShadow0.y
                dp4 r11.z, r10.xyzw, r13.xyzw  // r11.z <- output.TexShadow0.z
                dp4 r11.w, r10.xyzw, r14.xyzw  // r11.w <- output.TexShadow0.w
                mov r12.x, x1[4].x
                mov r13.x, x1[5].x
                mov r14.x, x1[6].x
                mov r15.x, x1[7].x
                mov r12.y, x1[4].y
                mov r13.y, x1[5].y
                mov r14.y, x1[6].y
                mov r15.y, x1[7].y
                mov r12.z, x1[4].z
                mov r13.z, x1[5].z
                mov r14.z, x1[6].z
                mov r15.z, x1[7].z
                mov r12.w, x1[4].w
                mov r13.w, x1[5].w
                mov r14.w, x1[6].w
                mov r15.w, x1[7].w
                dp4 r12.x, r10.xyzw, r12.xyzw  // r12.x <- output.TexShadow1.x
                dp4 r12.y, r10.xyzw, r13.xyzw  // r12.y <- output.TexShadow1.y
                dp4 r12.z, r10.xyzw, r14.xyzw  // r12.z <- output.TexShadow1.z
                dp4 r12.w, r10.xyzw, r15.xyzw  // r12.w <- output.TexShadow1.w
                mov r13.x, x1[8].x
                mov r14.x, x1[9].x
                mov r15.x, x1[10].x
                mov r16.x, x1[11].x
                mov r13.y, x1[8].y
                mov r14.y, x1[9].y
                mov r15.y, x1[10].y
                mov r16.y, x1[11].y
                mov r13.z, x1[8].z
                mov r14.z, x1[9].z
                mov r15.z, x1[10].z
                mov r16.z, x1[11].z
                mov r13.w, x1[8].w
                mov r14.w, x1[9].w
                mov r15.w, x1[10].w
                mov r16.w, x1[11].w
                dp4 r13.x, r10.xyzw, r13.xyzw  // r13.x <- output.TexShadow2.x
                dp4 r13.y, r10.xyzw, r14.xyzw  // r13.y <- output.TexShadow2.y
                dp4 r13.z, r10.xyzw, r15.xyzw  // r13.z <- output.TexShadow2.z
                dp4 r13.w, r10.xyzw, r16.xyzw  // r13.w <- output.TexShadow2.w
                
                #line 212
                mov r14.x, x0[2].x
                mov r15.x, x0[3].x
                mov r14.y, x0[2].y
                mov r15.y, x0[3].y
                mov r14.z, x0[2].z
                mov r15.z, x0[3].z
                mov r14.w, x0[2].w
                mov r15.w, x0[3].w
                dp4 r14.x, r10.xyzw, r14.xyzw  // r14.x <- output.Depth0.x
                dp4 r14.y, r10.xyzw, r15.xyzw  // r14.y <- output.Depth0.y
                mov r15.x, x0[6].x
                mov r16.x, x0[7].x
                mov r15.y, x0[6].y
                mov r16.y, x0[7].y
                mov r15.z, x0[6].z
                mov r16.z, x0[7].z
                mov r15.w, x0[6].w
                mov r16.w, x0[7].w
                dp4 r9.z, r10.xyzw, r15.xyzw  // r9.z <- output.Depth0.z
                dp4 r9.w, r10.xyzw, r16.xyzw  // r9.w <- output.Depth0.w
                mov r15.x, x0[10].x
                mov r16.x, x0[11].x
                mov r15.y, x0[10].y
                mov r16.y, x0[11].y
                mov r15.z, x0[10].z
                mov r16.z, x0[11].z
                mov r15.w, x0[10].w
                mov r16.w, x0[11].w
                dp4 r14.z, r10.xyzw, r15.xyzw  // r14.z <- output.Depth1.x
                dp4 r14.w, r10.xyzw, r16.xyzw  // r14.w <- output.Depth1.y
                dp4 r1.x, v0.xyzw, r1.xyzw
                dp4 r1.y, v0.xyzw, r2.xyzw
                dp4 r1.z, v0.xyzw, r3.xyzw
                dp4 r1.w, v0.xyzw, r4.xyzw
                dp4 r0.w, r1.xyzw, cb4[0].xyzw  // r0.w <- output.clip
                mov o0.xyzw, r5.xyzw
                mov o4.xy, r9.xyxx
                mov o4.zw, r14.zzzw
                mov o5.xyzw, r11.xyzw
                mov o6.xyzw, r12.xyzw
                mov o7.xyzw, r13.xyzw
                mov o9.xy, r14.xyxx
                mov o9.zw, r9.zzzw
                mov o1.xyz, r6.xyzx
                mov o2.xyz, r7.xyzx
                mov o3.xyz, r8.xyzx
                mov o8.xyz, r0.xyzx
                mov o10.x, r0.w
                ret 
                // Approximately 425 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64 [unused]
                //   float4x4 gProjection;              // Offset:  128 Size:    64 [unused]
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbLight
                // {
                //
                //   float4 gLight_Ambient;             // Offset:    0 Size:    16
                //   float4 gLight_Diffuse;             // Offset:   16 Size:    16
                //   float4 gLight_Specular;            // Offset:   32 Size:    16
                //   float3 gLight_Direction;           // Offset:   48 Size:    12
                //   float3 gLight_PosW;                // Offset:   64 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbMaterial
                // {
                //
                //   float4 gMtrl_Ambient;              // Offset:    0 Size:    16
                //   float4 gMtrl_Diffuse;              // Offset:   16 Size:    16
                //   float4 gMtrl_Specular;             // Offset:   32 Size:    16
                //   float4 gMtrl_Emissive;             // Offset:   48 Size:    16 [unused]
                //   float gMtrl_Pow;                   // Offset:   64 Size:     4
                //
                // }
                //
                // cbuffer cbPerFrameInstancing
                // {
                //
                //   float4x4 gWorldInst[100];          // Offset:    0 Size:  6400 [unused]
                //
                // }
                //
                // cbuffer cbClipPlane
                // {
                //
                //   float4 gClipPlane;                 // Offset:    0 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnis                           sampler      NA          NA    1        1
                // samShadow                       sampler_c      NA          NA    2        1
                // txDiffuse                         texture  float4          2d    0        1
                // txBump                            texture  float4          2d    1        1
                // txShadow0                         texture  float4          2d    3        1
                // txShadow1                         texture  float4          2d    4        1
                // txShadow2                         texture  float4          2d    5        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbLight                           cbuffer      NA          NA    1        1
                // cbMaterial                        cbuffer      NA          NA    2        1
                // cbPerFrameInstancing              cbuffer      NA          NA    3        1
                // cbClipPlane                       cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // BINORMAL                 0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 6     zw        4     NONE   float     zw
                // TEXCOORD                 1   xyzw        5     NONE   float   xy  
                // TEXCOORD                 2   xyzw        6     NONE   float   xy  
                // TEXCOORD                 3   xyzw        7     NONE   float   xy  
                // TEXCOORD                 4   xyz         8     NONE   float   xyz 
                // TEXCOORD                 5   xyzw        9     NONE   float   xyzw
                // SV_ClipDistance          0   x          10  CLIPDST   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[5], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_constantbuffer cb4[1], immediateIndexed
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v4.zw
                dcl_input_ps linear v5.xy
                dcl_input_ps linear v6.xy
                dcl_input_ps linear v7.xy
                dcl_input_ps linear v8.xyz
                dcl_input_ps linear v9.xyzw
                dcl_output o0.xyzw
                dcl_temps 4
                dcl_indexableTemp x0[27], 4
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Normal.x; v1.y <- In.Normal.y; v1.z <- In.Normal.z; 
                //   v2.x <- In.Tangent.x; v2.y <- In.Tangent.y; v2.z <- In.Tangent.z; 
                //   v3.x <- In.Binormal.x; v3.y <- In.Binormal.y; v3.z <- In.Binormal.z; 
                //   v4.x <- In.Tex.x; v4.y <- In.Tex.y; 
                //   v5.x <- In.TexShadow0.x; v5.y <- In.TexShadow0.y; v5.z <- In.TexShadow0.z; v5.w <- In.TexShadow0.w; 
                //   v6.x <- In.TexShadow1.x; v6.y <- In.TexShadow1.y; v6.z <- In.TexShadow1.z; v6.w <- In.TexShadow1.w; 
                //   v7.x <- In.TexShadow2.x; v7.y <- In.TexShadow2.y; v7.z <- In.TexShadow2.z; v7.w <- In.TexShadow2.w; 
                //   v8.x <- In.toEye.x; v8.y <- In.toEye.y; v8.z <- In.toEye.z; 
                //   v9.x <- In.Depth0.x; v9.y <- In.Depth0.y; v9.z <- In.Depth0.z; v9.w <- In.Depth0.w; 
                //   v4.z <- In.Depth1.x; v4.w <- In.Depth1.y; 
                //   v10.x <- In.clip; 
                //   o0.x <- <PS_ShadowMap return value>.x; o0.y <- <PS_ShadowMap return value>.y; o0.z <- <PS_ShadowMap return value>.z; o0.w <- <PS_ShadowMap return value>.w; 
                //   x0 <- vTexCoords
                //
                #line 228 "D:\Project\Media\shader11\pos-norm-tex-bump.fx"
                mov r0.y, l(0.000977)  // r0.y <- dx
                div r1.x, v9.x, v9.y
                min r1.x, r1.x, l(1.000000)  // r1.x <- depth0
                div r1.y, v9.z, v9.w
                min r1.y, r1.y, l(1.000000)  // r1.y <- depth1
                div r1.z, v4.z, v4.w
                min r1.z, r1.z, l(1.000000)  // r1.z <- depth2
                
                #line 237
                mov x0[0].xy, v5.xyxx
                mov r2.x, -r0.y
                mov r2.y, l(0)
                add r2.xy, r2.xyxx, v5.xyxx
                mov x0[1].xy, r2.xyxx
                mov r0.z, l(0)
                add r2.xy, r0.yzyy, v5.xyxx
                mov x0[2].xy, r2.xyxx
                mov r2.y, -r0.y
                mov r2.x, l(0)
                add r2.xy, r2.xyxx, v5.xyxx
                mov x0[3].xy, r2.xyxx
                add r2.xy, r0.zyzz, v5.xyxx
                mov x0[6].xy, r2.xyxx
                mov r2.x, -r0.y
                mov r2.y, -r0.y
                add r2.xy, r2.xyxx, v5.xyxx
                mov x0[4].xy, r2.xyxx
                mov r0.w, -r0.y
                add r2.xy, r0.ywyy, v5.xyxx
                mov x0[5].xy, r2.xyxx
                mov r0.x, -r0.y
                add r0.xw, r0.xxxy, v5.xxxy
                mov x0[7].xy, r0.xwxx
                add r0.xw, r0.yyyy, v5.xxxy
                mov x0[8].xy, r0.xwxx
                mov x0[9].xy, v6.xyxx
                
                #line 248
                mov r2.x, -r0.y
                mov r2.y, l(0)
                add r0.xw, r2.xxxy, v6.xxxy
                mov x0[10].xy, r0.xwxx
                add r0.xw, r0.yyyz, v6.xxxy
                mov x0[11].xy, r0.xwxx
                mov r2.y, -r0.y
                mov r2.x, l(0)
                add r0.xw, r2.xxxy, v6.xxxy
                mov x0[12].xy, r0.xwxx
                add r0.xw, r0.zzzy, v6.xxxy
                mov x0[15].xy, r0.xwxx
                mov r2.x, -r0.y
                mov r2.y, -r0.y
                add r0.xw, r2.xxxy, v6.xxxy
                mov x0[13].xy, r0.xwxx
                mov r2.z, -r0.y
                mov r2.y, r0.y
                add r0.xw, r2.yyyz, v6.xxxy
                mov x0[14].xy, r0.xwxx
                mov r2.x, -r0.y
                add r0.xw, r2.xxxy, v6.xxxy
                mov x0[16].xy, r0.xwxx
                add r0.xw, r0.yyyy, v6.xxxy
                mov x0[17].xy, r0.xwxx
                mov x0[18].xy, v7.xyxx
                mov r3.x, -r0.y
                mov r3.y, l(0)
                add r0.xw, r3.xxxy, v7.xxxy
                mov x0[19].xy, r0.xwxx
                
                #line 259
                add r0.xw, r0.yyyz, v7.xxxy
                mov x0[20].xy, r0.xwxx
                mov r3.y, -r0.y
                mov r3.x, l(0)
                add r0.xw, r3.xxxy, v7.xxxy
                mov x0[21].xy, r0.xwxx
                add r0.xz, r0.zzyz, v7.xxyx
                mov x0[24].xy, r0.xzxx
                mov r3.x, -r0.y
                mov r3.y, -r0.y
                add r0.xz, r3.xxyx, v7.xxyx
                mov x0[22].xy, r0.xzxx
                mov r2.w, -r0.y
                add r0.xz, r2.yywy, v7.xxyx
                mov x0[23].xy, r0.xzxx
                mov r2.x, -r0.y
                add r0.xz, r2.xxyx, v7.xxyx
                mov x0[25].xy, r0.xzxx
                add r0.xy, r0.yyyy, v7.xyxx
                mov x0[26].xy, r0.xyxx
                mov r0.x, l(-0.001000)
                add r0.x, r0.x, r1.x  // r0.x <- S0
                mov r0.y, l(-0.001000)
                add r0.y, r0.y, r1.y  // r0.y <- S1
                mov r0.z, l(-0.001000)
                add r0.z, r0.z, r1.z  // r0.z <- S2
                
                #line 271
                mov r0.w, l(0)  // r0.w <- fShadowTerm
                mov r1.x, l(0)  // r1.x <- i
                mov r1.y, r0.w  // r1.y <- fShadowTerm
                mov r1.z, r1.x  // r1.z <- i
                loop 
                  ilt r1.w, r1.z, l(9)
                  breakc_z r1.w
                  mov r2.xy, x0[r1.z + 0].xyxx  // r2.x <- uv0.x; r2.y <- uv0.y
                  mov r2.zw, x0[r1.z + 9].xxxy  // r2.z <- uv1.x; r2.w <- uv1.y
                  mov r3.xy, x0[r1.z + 18].xyxx  // r3.x <- uv2.x; r3.y <- uv2.y
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t3.xxxx, s2, r0.x  // r1.w <- D0
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t4.xxxx, s2, r0.y  // r2.x <- D1
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.y, r3.xyxx, t5.xxxx, s2, r0.z  // r2.y <- D2
                  itof r2.z, l(1)
                  add r1.w, r1.w, r2.x
                  add r1.w, r2.y, r1.w
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mov r1.w, -r1.w
                  add r1.w, r1.w, r2.z
                  add r1.y, r1.w, r1.y
                
                #line 282
                  iadd r1.z, r1.z, l(1)
                endloop 
                div r0.x, r1.y, l(9.000000)  // r0.x <- fShadowTerm
                sample_indexable(texture2d)(float,float,float,float) r0.yz, v4.xyxx, t1.zxyw, s1
                mov r0.yz, r0.yyzy  // r0.y <- bumpMap.x; r0.z <- bumpMap.y
                mul r0.yz, r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000)
                mov r1.xy, l(-1.000000,-1.000000,-0.000000,-0.000000)
                add r0.yz, r0.yyzy, r1.xxyx
                
                #line 290
                mul r1.xyz, r0.yyyy, v2.xyzx
                add r1.xyz, r1.xyzx, v1.xyzx
                mul r0.yzw, r0.zzzz, v3.xxyz
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- bumpNormal.x; r0.z <- bumpNormal.y; r0.w <- bumpNormal.z
                
                #line 293
                dp3 r1.x, r0.yzwy, r0.yzwy
                rsq r1.x, r1.x
                mul r0.yzw, r0.yyzw, r1.xxxx
                mov r1.xyz, -cb1[3].xyzx  // r1.x <- L.x; r1.y <- L.y; r1.z <- L.z
                dp3 r1.w, v8.xyzx, v8.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, v8.xyzx
                add r2.xyz, r1.xyzx, r2.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, r2.xyzx  // r2.x <- H.x; r2.y <- H.y; r2.z <- H.z
                dp3 r1.w, r0.yzwy, r0.yzwy
                rsq r1.w, r1.w
                mul r0.yzw, r0.yyzw, r1.wwww  // r0.y <- N.x; r0.z <- N.y; r0.w <- N.z
                itof r1.w, l(0)
                dp3 r1.x, r0.yzwy, r1.xyzx
                max r1.x, r1.x, r1.w  // r1.x <- lightV
                mul r1.yzw, cb1[0].xxyz, cb2[0].xxyz
                mul r3.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r3.xyz, r3.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
                add r1.yzw, r1.yyzw, r3.xxyz
                mul r3.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r3.xyz, r1.xxxx, r3.xyzx
                mul r3.xyz, r3.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
                add r1.yzw, r1.yyzw, r3.xxyz
                mul r3.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r3.xyz, r1.xxxx, r3.xyzx
                mul r3.xyz, r0.xxxx, r3.xyzx
                mul r3.xyz, r3.xyzx, l(0.900000, 0.900000, 0.900000, 0.000000)
                add r1.xyz, r1.yzwy, r3.xyzx
                mul r3.xyz, cb1[2].xyzx, cb2[2].xyzx
                itof r0.x, l(0)
                dp3 r0.y, r0.yzwy, r2.xyzx
                max r0.x, r0.y, r0.x
                log r0.x, r0.x
                mul r0.x, r0.x, cb2[4].x
                exp r0.x, r0.x
                mul r0.xyz, r0.xxxx, r3.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                
                #line 306
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v4.xyxx, t0.xyzw, s1
                mul r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- Out.x; r0.y <- Out.y; r0.z <- Out.z
                mul r0.w, r1.w, cb2[1].w  // r0.w <- Out.w
                
                #line 309
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 167 instruction slots used
                            
            };
        }

    }

    technique11 BuildShadowMap
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float       
                // SV_InstanceID            0   x           3   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- instID; 
                //   o1.x <- <VS_BuildShadowMap return value>.Depth.x; o1.y <- <VS_BuildShadowMap return value>.Depth.y; 
                //   o0.x <- <VS_BuildShadowMap return value>.Pos.x; o0.y <- <VS_BuildShadowMap return value>.Pos.y; o0.z <- <VS_BuildShadowMap return value>.Pos.z; o0.w <- <VS_BuildShadowMap return value>.Pos.w
                //
                #line 331 "D:\Project\Media\shader11\pos-norm-tex-bump.fx"
                mov r0.xyzw, cb0[0].xyzw  // r0.x <- mWorld._m00; r0.y <- mWorld._m10; r0.z <- mWorld._m20; r0.w <- mWorld._m30
                mov r1.xyzw, cb0[1].xyzw  // r1.x <- mWorld._m01; r1.y <- mWorld._m11; r1.z <- mWorld._m21; r1.w <- mWorld._m31
                mov r2.xyzw, cb0[2].xyzw  // r2.x <- mWorld._m02; r2.y <- mWorld._m12; r2.z <- mWorld._m22; r2.w <- mWorld._m32
                mov r3.xyzw, cb0[3].xyzw  // r3.x <- mWorld._m03; r3.y <- mWorld._m13; r3.z <- mWorld._m23; r3.w <- mWorld._m33
                dp4 r0.x, v0.xyzw, r0.xyzw  // r0.x <- output.Pos.x
                dp4 r0.y, v0.xyzw, r1.xyzw  // r0.y <- output.Pos.y
                dp4 r0.z, v0.xyzw, r2.xyzw  // r0.z <- output.Pos.z
                dp4 r0.w, v0.xyzw, r3.xyzw  // r0.w <- output.Pos.w
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- output.Pos.x
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- output.Pos.y
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- output.Pos.z
                dp4 r1.w, r0.xyzw, cb0[7].xyzw  // r1.w <- output.Pos.w
                dp4 r0.z, r1.xyzw, cb0[8].xyzw  // r0.z <- output.Pos.x
                dp4 r0.w, r1.xyzw, cb0[9].xyzw  // r0.w <- output.Pos.y
                dp4 r0.x, r1.xyzw, cb0[10].xyzw  // r0.x <- output.Pos.z
                dp4 r0.y, r1.xyzw, cb0[11].xyzw  // r0.y <- output.Pos.w
                mov r0.xy, r0.xyxx  // r0.x <- output.Depth.x; r0.y <- output.Depth.y
                mov o0.xyzw, r0.zwxy
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 20 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Depth.x; v1.y <- In.Depth.y; 
                //   o0.x <- <PS_BuildShadowMap return value>.x; o0.y <- <PS_BuildShadowMap return value>.y; o0.z <- <PS_BuildShadowMap return value>.z; o0.w <- <PS_BuildShadowMap return value>.w
                //
                #line 349 "D:\Project\Media\shader11\pos-norm-tex-bump.fx"
                div o0.xyzw, v1.xxxx, v1.yyyy
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

    technique11 Unlit_Instancing
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbPerFrameInstancing
                // {
                //
                //   float4x4 gWorldInst[100];          // Offset:    0 Size:  6400
                //
                // }
                //
                // cbuffer cbClipPlane
                // {
                //
                //   float4 gClipPlane;                 // Offset:    0 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerFrameInstancing              cbuffer      NA          NA    3        1
                // cbClipPlane                       cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // BINORMAL                 0   xyz         4     NONE   float   xyz 
                // SV_InstanceID            0   x           5   INSTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // BINORMAL                 0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1   xyz         5     NONE   float   xyz 
                // SV_ClipDistance          0   x           6  CLIPDST   float   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb3[400], dynamicIndexed
                dcl_constantbuffer cb4[1], immediateIndexed
                dcl_input v0.xyzw
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input_sgv v5.x, instance_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output_siv o6.x, clip_distance
                dcl_temps 10
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- Tangent.x; v3.y <- Tangent.y; v3.z <- Tangent.z; 
                //   v4.x <- Binormal.x; v4.y <- Binormal.y; v4.z <- Binormal.z; 
                //   v5.x <- instID; 
                //   o6.x <- <VS return value>.clip; 
                //   o5.x <- <VS return value>.toEye.x; o5.y <- <VS return value>.toEye.y; o5.z <- <VS return value>.toEye.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.Binormal.x; o3.y <- <VS return value>.Binormal.y; o3.z <- <VS return value>.Binormal.z; 
                //   o2.x <- <VS return value>.Tangent.x; o2.y <- <VS return value>.Tangent.y; o2.z <- <VS return value>.Tangent.z; 
                //   o1.x <- <VS return value>.Normal.x; o1.y <- <VS return value>.Normal.y; o1.z <- <VS return value>.Normal.z; 
                //   o0.x <- <VS return value>.Pos.x; o0.y <- <VS return value>.Pos.y; o0.z <- <VS return value>.Pos.z; o0.w <- <VS return value>.Pos.w
                //
                #line 123 "D:\Project\Media\shader11\pos-norm-tex-bump.fx"
                itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- output.toEye.x; r0.y <- output.toEye.y; r0.z <- output.toEye.z
                imul null, r0.w, v5.x, l(4)
                mov r1.xyzw, cb3[r0.w + 0].xyzw  // r1.x <- mWorld._m00; r1.y <- mWorld._m10; r1.z <- mWorld._m20; r1.w <- mWorld._m30
                mov r2.xyzw, cb3[r0.w + 1].xyzw  // r2.x <- mWorld._m01; r2.y <- mWorld._m11; r2.z <- mWorld._m21; r2.w <- mWorld._m31
                mov r3.xyzw, cb3[r0.w + 2].xyzw  // r3.x <- mWorld._m02; r3.y <- mWorld._m12; r3.z <- mWorld._m22; r3.w <- mWorld._m32
                mov r4.xyzw, cb3[r0.w + 3].xyzw  // r4.x <- mWorld._m03; r4.y <- mWorld._m13; r4.z <- mWorld._m23; r4.w <- mWorld._m33
                dp4 r5.x, v0.xyzw, r1.xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, v0.xyzw, r2.xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, v0.xyzw, r3.xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, v0.xyzw, r4.xyzw  // r5.w <- output.Pos.w
                dp4 r6.x, r5.xyzw, cb0[4].xyzw  // r6.x <- output.Pos.x
                dp4 r6.y, r5.xyzw, cb0[5].xyzw  // r6.y <- output.Pos.y
                dp4 r6.z, r5.xyzw, cb0[6].xyzw  // r6.z <- output.Pos.z
                dp4 r6.w, r5.xyzw, cb0[7].xyzw  // r6.w <- output.Pos.w
                dp4 r5.x, r6.xyzw, cb0[8].xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, r6.xyzw, cb0[9].xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, r6.xyzw, cb0[10].xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, r6.xyzw, cb0[11].xyzw  // r5.w <- output.Pos.w
                dp3 r6.x, v1.xyzx, r1.xyzx
                dp3 r6.y, v1.xyzx, r2.xyzx
                dp3 r6.z, v1.xyzx, r3.xyzx
                dp3 r0.w, r6.xyzx, r6.xyzx
                rsq r0.w, r0.w
                mul r6.xyz, r0.wwww, r6.xyzx  // r6.x <- output.Normal.x; r6.y <- output.Normal.y; r6.z <- output.Normal.z
                dp3 r7.x, v3.xyzx, r1.xyzx
                dp3 r7.y, v3.xyzx, r2.xyzx
                dp3 r7.z, v3.xyzx, r3.xyzx
                dp3 r0.w, r7.xyzx, r7.xyzx
                rsq r0.w, r0.w
                mul r7.xyz, r0.wwww, r7.xyzx  // r7.x <- output.Tangent.x; r7.y <- output.Tangent.y; r7.z <- output.Tangent.z
                dp3 r8.x, v4.xyzx, r1.xyzx
                dp3 r8.y, v4.xyzx, r2.xyzx
                dp3 r8.z, v4.xyzx, r3.xyzx
                dp3 r0.w, r8.xyzx, r8.xyzx
                rsq r0.w, r0.w
                mul r8.xyz, r0.wwww, r8.xyzx  // r8.x <- output.Binormal.x; r8.y <- output.Binormal.y; r8.z <- output.Binormal.z
                mov r9.xy, v2.xyxx  // r9.x <- output.Tex.x; r9.y <- output.Tex.y
                dp4 r1.x, v0.xyzw, r1.xyzw
                dp4 r1.y, v0.xyzw, r2.xyzw
                dp4 r1.z, v0.xyzw, r3.xyzw
                dp4 r1.w, v0.xyzw, r4.xyzw
                dp4 r0.w, r1.xyzw, cb4[0].xyzw  // r0.w <- output.clip
                
                #line 135
                mov o0.xyzw, r5.xyzw
                mov o1.xyz, r6.xyzx
                mov o2.xyz, r7.xyzx
                mov o3.xyz, r8.xyzx
                mov o5.xyz, r0.xyzx
                mov o4.xy, r9.xyxx
                mov o6.x, r0.w
                ret 
                // Approximately 50 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64 [unused]
                //   float4x4 gProjection;              // Offset:  128 Size:    64 [unused]
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbLight
                // {
                //
                //   float4 gLight_Ambient;             // Offset:    0 Size:    16
                //   float4 gLight_Diffuse;             // Offset:   16 Size:    16
                //   float4 gLight_Specular;            // Offset:   32 Size:    16
                //   float3 gLight_Direction;           // Offset:   48 Size:    12
                //   float3 gLight_PosW;                // Offset:   64 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbMaterial
                // {
                //
                //   float4 gMtrl_Ambient;              // Offset:    0 Size:    16
                //   float4 gMtrl_Diffuse;              // Offset:   16 Size:    16
                //   float4 gMtrl_Specular;             // Offset:   32 Size:    16
                //   float4 gMtrl_Emissive;             // Offset:   48 Size:    16 [unused]
                //   float gMtrl_Pow;                   // Offset:   64 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // txDiffuse                         texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbLight                           cbuffer      NA          NA    1        1
                // cbMaterial                        cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float       
                // BINORMAL                 0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1   xyz         5     NONE   float   xyz 
                // SV_ClipDistance          0   x           6  CLIPDST   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[5], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Normal.x; v1.y <- In.Normal.y; v1.z <- In.Normal.z; 
                //   v2.x <- In.Tangent.x; v2.y <- In.Tangent.y; v2.z <- In.Tangent.z; 
                //   v3.x <- In.Binormal.x; v3.y <- In.Binormal.y; v3.z <- In.Binormal.z; 
                //   v4.x <- In.Tex.x; v4.y <- In.Tex.y; 
                //   v5.x <- In.toEye.x; v5.y <- In.toEye.y; v5.z <- In.toEye.z; 
                //   v6.x <- In.clip; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 144 "D:\Project\Media\shader11\pos-norm-tex-bump.fx"
                mov r0.xyz, -cb1[3].xyzx  // r0.x <- L.x; r0.y <- L.y; r0.z <- L.z
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.xyzx
                add r1.xyz, r0.xyzx, r1.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- H.x; r1.y <- H.y; r1.z <- H.z
                dp3 r0.w, v1.xyzx, v1.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, v1.xyzx  // r2.x <- N.x; r2.y <- N.y; r2.z <- N.z
                mul r3.xyz, cb1[0].xyzx, cb2[0].xyzx
                mul r4.xyz, cb1[1].xyzx, cb2[1].xyzx
                itof r0.w, l(0)
                dp3 r0.x, r2.xyzx, r0.xyzx
                max r0.x, r0.x, r0.w
                mul r0.xyz, r0.xxxx, r4.xyzx
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r3.xyz, cb1[2].xyzx, cb2[2].xyzx
                itof r0.w, l(0)
                dp3 r1.x, r2.xyzx, r1.xyzx
                max r0.w, r0.w, r1.x
                log r0.w, r0.w
                mul r0.w, r0.w, cb2[4].x
                exp r0.w, r0.w
                mul r1.xyz, r0.wwww, r3.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                
                #line 152
                sample_indexable(texture2d)(float,float,float,float) r1.xyz, v4.xyxx, t0.xyzw, s0
                mul r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- Out.x; r0.y <- Out.y; r0.z <- Out.z
                mov o0.xyz, r0.xyzx
                mov o0.w, cb2[1].w
                ret 
                // Approximately 32 instruction slots used
                            
            };
        }

    }

    technique11 ShadowMap_Instancing
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbPerFrameInstancing
                // {
                //
                //   float4x4 gWorldInst[100];          // Offset:    0 Size:  6400
                //
                // }
                //
                // cbuffer cbClipPlane
                // {
                //
                //   float4 gClipPlane;                 // Offset:    0 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerFrameInstancing              cbuffer      NA          NA    3        1
                // cbClipPlane                       cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // BINORMAL                 0   xyz         4     NONE   float   xyz 
                // SV_InstanceID            0   x           5   INSTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // BINORMAL                 0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 6     zw        4     NONE   float     zw
                // TEXCOORD                 1   xyzw        5     NONE   float   xyzw
                // TEXCOORD                 2   xyzw        6     NONE   float   xyzw
                // TEXCOORD                 3   xyzw        7     NONE   float   xyzw
                // TEXCOORD                 4   xyz         8     NONE   float   xyz 
                // TEXCOORD                 5   xyzw        9     NONE   float   xyzw
                // SV_ClipDistance          0   x          10  CLIPDST   float   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[40], immediateIndexed
                dcl_constantbuffer cb3[400], dynamicIndexed
                dcl_constantbuffer cb4[1], immediateIndexed
                dcl_input v0.xyzw
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input_sgv v5.x, instance_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xyzw
                dcl_output o6.xyzw
                dcl_output o7.xyzw
                dcl_output o8.xyz
                dcl_output o9.xyzw
                dcl_output_siv o10.x, clip_distance
                dcl_temps 17
                dcl_indexableTemp x0[12], 4
                dcl_indexableTemp x1[12], 4
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- Tangent.x; v3.y <- Tangent.y; v3.z <- Tangent.z; 
                //   v4.x <- Binormal.x; v4.y <- Binormal.y; v4.z <- Binormal.z; 
                //   v5.x <- instID; 
                //   o10.x <- <VS_ShadowMap return value>.clip; 
                //   o9.x <- <VS_ShadowMap return value>.Depth0.x; o9.y <- <VS_ShadowMap return value>.Depth0.y; o9.z <- <VS_ShadowMap return value>.Depth0.z; o9.w <- <VS_ShadowMap return value>.Depth0.w; 
                //   o8.x <- <VS_ShadowMap return value>.toEye.x; o8.y <- <VS_ShadowMap return value>.toEye.y; o8.z <- <VS_ShadowMap return value>.toEye.z; 
                //   o7.x <- <VS_ShadowMap return value>.TexShadow2.x; o7.y <- <VS_ShadowMap return value>.TexShadow2.y; o7.z <- <VS_ShadowMap return value>.TexShadow2.z; o7.w <- <VS_ShadowMap return value>.TexShadow2.w; 
                //   o6.x <- <VS_ShadowMap return value>.TexShadow1.x; o6.y <- <VS_ShadowMap return value>.TexShadow1.y; o6.z <- <VS_ShadowMap return value>.TexShadow1.z; o6.w <- <VS_ShadowMap return value>.TexShadow1.w; 
                //   o5.x <- <VS_ShadowMap return value>.TexShadow0.x; o5.y <- <VS_ShadowMap return value>.TexShadow0.y; o5.z <- <VS_ShadowMap return value>.TexShadow0.z; o5.w <- <VS_ShadowMap return value>.TexShadow0.w; 
                //   o4.x <- <VS_ShadowMap return value>.Tex.x; o4.y <- <VS_ShadowMap return value>.Tex.y; o4.z <- <VS_ShadowMap return value>.Depth1.x; o4.w <- <VS_ShadowMap return value>.Depth1.y; 
                //   o3.x <- <VS_ShadowMap return value>.Binormal.x; o3.y <- <VS_ShadowMap return value>.Binormal.y; o3.z <- <VS_ShadowMap return value>.Binormal.z; 
                //   o2.x <- <VS_ShadowMap return value>.Tangent.x; o2.y <- <VS_ShadowMap return value>.Tangent.y; o2.z <- <VS_ShadowMap return value>.Tangent.z; 
                //   o1.x <- <VS_ShadowMap return value>.Normal.x; o1.y <- <VS_ShadowMap return value>.Normal.y; o1.z <- <VS_ShadowMap return value>.Normal.z; 
                //   o0.x <- <VS_ShadowMap return value>.Pos.x; o0.y <- <VS_ShadowMap return value>.Pos.y; o0.z <- <VS_ShadowMap return value>.Pos.z; o0.w <- <VS_ShadowMap return value>.Pos.w; 
                //   x0 <- mLVP; x1 <- mVPT
                //
                #line 186 "D:\Project\Media\shader11\pos-norm-tex-bump.fx"
                itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- output.toEye.x; r0.y <- output.toEye.y; r0.z <- output.toEye.z
                imul null, r0.w, v5.x, l(4)
                mov r1.xyzw, cb3[r0.w + 0].xyzw  // r1.x <- mWorld._m00; r1.y <- mWorld._m10; r1.z <- mWorld._m20; r1.w <- mWorld._m30
                mov r2.xyzw, cb3[r0.w + 1].xyzw  // r2.x <- mWorld._m01; r2.y <- mWorld._m11; r2.z <- mWorld._m21; r2.w <- mWorld._m31
                mov r3.xyzw, cb3[r0.w + 2].xyzw  // r3.x <- mWorld._m02; r3.y <- mWorld._m12; r3.z <- mWorld._m22; r3.w <- mWorld._m32
                mov r4.xyzw, cb3[r0.w + 3].xyzw  // r4.x <- mWorld._m03; r4.y <- mWorld._m13; r4.z <- mWorld._m23; r4.w <- mWorld._m33
                dp4 r5.x, v0.xyzw, r1.xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, v0.xyzw, r2.xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, v0.xyzw, r3.xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, v0.xyzw, r4.xyzw  // r5.w <- output.Pos.w
                dp4 r6.x, r5.xyzw, cb0[4].xyzw  // r6.x <- output.Pos.x
                dp4 r6.y, r5.xyzw, cb0[5].xyzw  // r6.y <- output.Pos.y
                dp4 r6.z, r5.xyzw, cb0[6].xyzw  // r6.z <- output.Pos.z
                dp4 r6.w, r5.xyzw, cb0[7].xyzw  // r6.w <- output.Pos.w
                dp4 r5.x, r6.xyzw, cb0[8].xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, r6.xyzw, cb0[9].xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, r6.xyzw, cb0[10].xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, r6.xyzw, cb0[11].xyzw  // r5.w <- output.Pos.w
                dp3 r6.x, v1.xyzx, r1.xyzx
                dp3 r6.y, v1.xyzx, r2.xyzx
                dp3 r6.z, v1.xyzx, r3.xyzx
                dp3 r0.w, r6.xyzx, r6.xyzx
                rsq r0.w, r0.w
                mul r6.xyz, r0.wwww, r6.xyzx  // r6.x <- output.Normal.x; r6.y <- output.Normal.y; r6.z <- output.Normal.z
                dp3 r7.x, v3.xyzx, r1.xyzx
                dp3 r7.y, v3.xyzx, r2.xyzx
                dp3 r7.z, v3.xyzx, r3.xyzx
                dp3 r0.w, r7.xyzx, r7.xyzx
                rsq r0.w, r0.w
                mul r7.xyz, r0.wwww, r7.xyzx  // r7.x <- output.Tangent.x; r7.y <- output.Tangent.y; r7.z <- output.Tangent.z
                dp3 r8.x, v4.xyzx, r1.xyzx
                dp3 r8.y, v4.xyzx, r2.xyzx
                dp3 r8.z, v4.xyzx, r3.xyzx
                dp3 r0.w, r8.xyzx, r8.xyzx
                rsq r0.w, r0.w
                mul r8.xyz, r0.wwww, r8.xyzx  // r8.x <- output.Binormal.x; r8.y <- output.Binormal.y; r8.z <- output.Binormal.z
                mov r9.xy, v2.xyxx  // r9.x <- output.Tex.x; r9.y <- output.Tex.y
                
                #line 200
                dp4 r10.x, v0.xyzw, r1.xyzw  // r10.x <- wPos.x
                dp4 r10.y, v0.xyzw, r2.xyzw  // r10.y <- wPos.y
                dp4 r10.z, v0.xyzw, r3.xyzw  // r10.z <- wPos.z
                dp4 r10.w, v0.xyzw, r4.xyzw  // r10.w <- wPos.w
                mul r11.xyzw, cb0[12].xyzw, cb0[24].xxxx
                mul r12.xyzw, cb0[13].xyzw, cb0[24].yyyy
                add r11.xyzw, r11.xyzw, r12.xyzw
                mul r12.xyzw, cb0[14].xyzw, cb0[24].zzzz
                add r11.xyzw, r11.xyzw, r12.xyzw
                mul r12.xyzw, cb0[15].xyzw, cb0[24].wwww
                add r11.xyzw, r11.xyzw, r12.xyzw
                mul r12.xyzw, cb0[12].xyzw, cb0[25].xxxx
                mul r13.xyzw, cb0[13].xyzw, cb0[25].yyyy
                add r12.xyzw, r12.xyzw, r13.xyzw
                mul r13.xyzw, cb0[14].xyzw, cb0[25].zzzz
                add r12.xyzw, r12.xyzw, r13.xyzw
                mul r13.xyzw, cb0[15].xyzw, cb0[25].wwww
                add r12.xyzw, r12.xyzw, r13.xyzw
                mul r13.xyzw, cb0[12].xyzw, cb0[26].xxxx
                mul r14.xyzw, cb0[13].xyzw, cb0[26].yyyy
                add r13.xyzw, r13.xyzw, r14.xyzw
                mul r14.xyzw, cb0[14].xyzw, cb0[26].zzzz
                add r13.xyzw, r13.xyzw, r14.xyzw
                mul r14.xyzw, cb0[15].xyzw, cb0[26].wwww
                add r13.xyzw, r13.xyzw, r14.xyzw
                mul r14.xyzw, cb0[12].xyzw, cb0[27].xxxx
                mul r15.xyzw, cb0[13].xyzw, cb0[27].yyyy
                add r14.xyzw, r14.xyzw, r15.xyzw
                mul r15.xyzw, cb0[14].xyzw, cb0[27].zzzz
                add r14.xyzw, r14.xyzw, r15.xyzw
                mul r15.xyzw, cb0[15].xyzw, cb0[27].wwww
                add r14.xyzw, r14.xyzw, r15.xyzw
                mov x0[0].x, r11.x
                mov x0[1].x, r12.x
                mov x0[2].x, r13.x
                mov x0[3].x, r14.x
                mov x0[0].y, r11.y
                mov x0[1].y, r12.y
                mov x0[2].y, r13.y
                mov x0[3].y, r14.y
                mov x0[0].z, r11.z
                mov x0[1].z, r12.z
                mov x0[2].z, r13.z
                mov x0[3].z, r14.z
                mov x0[0].w, r11.w
                mov x0[1].w, r12.w
                mov x0[2].w, r13.w
                mov x0[3].w, r14.w
                mov r11.x, x0[0].x
                mov r11.y, x0[1].x
                mov r11.z, x0[2].x
                mov r11.w, x0[3].x
                mov r12.x, x0[0].y
                mov r12.y, x0[1].y
                mov r12.z, x0[2].y
                mov r12.w, x0[3].y
                mov r13.x, x0[0].z
                mov r13.y, x0[1].z
                mov r13.z, x0[2].z
                mov r13.w, x0[3].z
                mov r14.x, x0[0].w
                mov r14.y, x0[1].w
                mov r14.z, x0[2].w
                mov r14.w, x0[3].w
                dp4 r0.w, r11.xyzw, cb0[36].xyzw
                dp4 r6.w, r11.xyzw, cb0[37].xyzw
                dp4 r7.w, r11.xyzw, cb0[38].xyzw
                dp4 r8.w, r11.xyzw, cb0[39].xyzw
                dp4 r9.z, r12.xyzw, cb0[36].xyzw
                dp4 r9.w, r12.xyzw, cb0[37].xyzw
                dp4 r11.x, r12.xyzw, cb0[38].xyzw
                dp4 r11.y, r12.xyzw, cb0[39].xyzw
                dp4 r11.z, r13.xyzw, cb0[36].xyzw
                dp4 r11.w, r13.xyzw, cb0[37].xyzw
                dp4 r12.x, r13.xyzw, cb0[38].xyzw
                dp4 r12.y, r13.xyzw, cb0[39].xyzw
                dp4 r12.z, r14.xyzw, cb0[36].xyzw
                dp4 r12.w, r14.xyzw, cb0[37].xyzw
                dp4 r13.x, r14.xyzw, cb0[38].xyzw
                dp4 r13.y, r14.xyzw, cb0[39].xyzw
                mov x1[0].x, r0.w
                mov x1[1].x, r6.w
                mov x1[2].x, r7.w
                mov x1[3].x, r8.w
                mov x1[0].y, r9.z
                mov x1[1].y, r9.w
                mov x1[2].y, r11.x
                mov x1[3].y, r11.y
                mov x1[0].z, r11.z
                mov x1[1].z, r11.w
                mov x1[2].z, r12.x
                mov x1[3].z, r12.y
                mov x1[0].w, r12.z
                mov x1[1].w, r12.w
                mov x1[2].w, r13.x
                mov x1[3].w, r13.y
                mul r11.xyzw, cb0[16].xyzw, cb0[28].xxxx
                mul r12.xyzw, cb0[17].xyzw, cb0[28].yyyy
                add r11.xyzw, r11.xyzw, r12.xyzw
                mul r12.xyzw, cb0[18].xyzw, cb0[28].zzzz
                add r11.xyzw, r11.xyzw, r12.xyzw
                mul r12.xyzw, cb0[19].xyzw, cb0[28].wwww
                add r11.xyzw, r11.xyzw, r12.xyzw
                mul r12.xyzw, cb0[16].xyzw, cb0[29].xxxx
                mul r13.xyzw, cb0[17].xyzw, cb0[29].yyyy
                add r12.xyzw, r12.xyzw, r13.xyzw
                mul r13.xyzw, cb0[18].xyzw, cb0[29].zzzz
                add r12.xyzw, r12.xyzw, r13.xyzw
                mul r13.xyzw, cb0[19].xyzw, cb0[29].wwww
                add r12.xyzw, r12.xyzw, r13.xyzw
                mul r13.xyzw, cb0[16].xyzw, cb0[30].xxxx
                mul r14.xyzw, cb0[17].xyzw, cb0[30].yyyy
                add r13.xyzw, r13.xyzw, r14.xyzw
                mul r14.xyzw, cb0[18].xyzw, cb0[30].zzzz
                add r13.xyzw, r13.xyzw, r14.xyzw
                mul r14.xyzw, cb0[19].xyzw, cb0[30].wwww
                add r13.xyzw, r13.xyzw, r14.xyzw
                mul r14.xyzw, cb0[16].xyzw, cb0[31].xxxx
                mul r15.xyzw, cb0[17].xyzw, cb0[31].yyyy
                add r14.xyzw, r14.xyzw, r15.xyzw
                mul r15.xyzw, cb0[18].xyzw, cb0[31].zzzz
                add r14.xyzw, r14.xyzw, r15.xyzw
                mul r15.xyzw, cb0[19].xyzw, cb0[31].wwww
                add r14.xyzw, r14.xyzw, r15.xyzw
                mov x0[4].x, r11.x
                mov x0[5].x, r12.x
                mov x0[6].x, r13.x
                mov x0[7].x, r14.x
                mov x0[4].y, r11.y
                mov x0[5].y, r12.y
                mov x0[6].y, r13.y
                mov x0[7].y, r14.y
                mov x0[4].z, r11.z
                mov x0[5].z, r12.z
                mov x0[6].z, r13.z
                mov x0[7].z, r14.z
                mov x0[4].w, r11.w
                mov x0[5].w, r12.w
                mov x0[6].w, r13.w
                mov x0[7].w, r14.w
                mov r11.x, x0[4].x
                mov r11.y, x0[5].x
                mov r11.z, x0[6].x
                mov r11.w, x0[7].x
                mov r12.x, x0[4].y
                mov r12.y, x0[5].y
                mov r12.z, x0[6].y
                mov r12.w, x0[7].y
                mov r13.x, x0[4].z
                mov r13.y, x0[5].z
                mov r13.z, x0[6].z
                mov r13.w, x0[7].z
                mov r14.x, x0[4].w
                mov r14.y, x0[5].w
                mov r14.z, x0[6].w
                mov r14.w, x0[7].w
                dp4 r0.w, r11.xyzw, cb0[36].xyzw
                dp4 r6.w, r11.xyzw, cb0[37].xyzw
                dp4 r7.w, r11.xyzw, cb0[38].xyzw
                dp4 r8.w, r11.xyzw, cb0[39].xyzw
                dp4 r9.z, r12.xyzw, cb0[36].xyzw
                dp4 r9.w, r12.xyzw, cb0[37].xyzw
                dp4 r11.x, r12.xyzw, cb0[38].xyzw
                dp4 r11.y, r12.xyzw, cb0[39].xyzw
                dp4 r11.z, r13.xyzw, cb0[36].xyzw
                dp4 r11.w, r13.xyzw, cb0[37].xyzw
                dp4 r12.x, r13.xyzw, cb0[38].xyzw
                dp4 r12.y, r13.xyzw, cb0[39].xyzw
                dp4 r12.z, r14.xyzw, cb0[36].xyzw
                dp4 r12.w, r14.xyzw, cb0[37].xyzw
                dp4 r13.x, r14.xyzw, cb0[38].xyzw
                dp4 r13.y, r14.xyzw, cb0[39].xyzw
                mov x1[4].x, r0.w
                mov x1[5].x, r6.w
                mov x1[6].x, r7.w
                mov x1[7].x, r8.w
                mov x1[4].y, r9.z
                mov x1[5].y, r9.w
                mov x1[6].y, r11.x
                mov x1[7].y, r11.y
                mov x1[4].z, r11.z
                mov x1[5].z, r11.w
                mov x1[6].z, r12.x
                mov x1[7].z, r12.y
                mov x1[4].w, r12.z
                mov x1[5].w, r12.w
                mov x1[6].w, r13.x
                mov x1[7].w, r13.y
                mul r11.xyzw, cb0[20].xyzw, cb0[32].xxxx
                mul r12.xyzw, cb0[21].xyzw, cb0[32].yyyy
                add r11.xyzw, r11.xyzw, r12.xyzw
                mul r12.xyzw, cb0[22].xyzw, cb0[32].zzzz
                add r11.xyzw, r11.xyzw, r12.xyzw
                mul r12.xyzw, cb0[23].xyzw, cb0[32].wwww
                add r11.xyzw, r11.xyzw, r12.xyzw
                mul r12.xyzw, cb0[20].xyzw, cb0[33].xxxx
                mul r13.xyzw, cb0[21].xyzw, cb0[33].yyyy
                add r12.xyzw, r12.xyzw, r13.xyzw
                mul r13.xyzw, cb0[22].xyzw, cb0[33].zzzz
                add r12.xyzw, r12.xyzw, r13.xyzw
                mul r13.xyzw, cb0[23].xyzw, cb0[33].wwww
                add r12.xyzw, r12.xyzw, r13.xyzw
                mul r13.xyzw, cb0[20].xyzw, cb0[34].xxxx
                mul r14.xyzw, cb0[21].xyzw, cb0[34].yyyy
                add r13.xyzw, r13.xyzw, r14.xyzw
                mul r14.xyzw, cb0[22].xyzw, cb0[34].zzzz
                add r13.xyzw, r13.xyzw, r14.xyzw
                mul r14.xyzw, cb0[23].xyzw, cb0[34].wwww
                add r13.xyzw, r13.xyzw, r14.xyzw
                mul r14.xyzw, cb0[20].xyzw, cb0[35].xxxx
                mul r15.xyzw, cb0[21].xyzw, cb0[35].yyyy
                add r14.xyzw, r14.xyzw, r15.xyzw
                mul r15.xyzw, cb0[22].xyzw, cb0[35].zzzz
                add r14.xyzw, r14.xyzw, r15.xyzw
                mul r15.xyzw, cb0[23].xyzw, cb0[35].wwww
                add r14.xyzw, r14.xyzw, r15.xyzw
                mov x0[8].x, r11.x
                mov x0[9].x, r12.x
                mov x0[10].x, r13.x
                mov x0[11].x, r14.x
                mov x0[8].y, r11.y
                mov x0[9].y, r12.y
                mov x0[10].y, r13.y
                mov x0[11].y, r14.y
                mov x0[8].z, r11.z
                mov x0[9].z, r12.z
                mov x0[10].z, r13.z
                mov x0[11].z, r14.z
                mov x0[8].w, r11.w
                mov x0[9].w, r12.w
                mov x0[10].w, r13.w
                mov x0[11].w, r14.w
                mov r11.x, x0[8].x
                mov r11.y, x0[9].x
                mov r11.z, x0[10].x
                mov r11.w, x0[11].x
                mov r12.x, x0[8].y
                mov r12.y, x0[9].y
                mov r12.z, x0[10].y
                mov r12.w, x0[11].y
                mov r13.x, x0[8].z
                mov r13.y, x0[9].z
                mov r13.z, x0[10].z
                mov r13.w, x0[11].z
                mov r14.x, x0[8].w
                mov r14.y, x0[9].w
                mov r14.z, x0[10].w
                mov r14.w, x0[11].w
                dp4 r0.w, r11.xyzw, cb0[36].xyzw
                dp4 r6.w, r11.xyzw, cb0[37].xyzw
                dp4 r7.w, r11.xyzw, cb0[38].xyzw
                dp4 r8.w, r11.xyzw, cb0[39].xyzw
                dp4 r9.z, r12.xyzw, cb0[36].xyzw
                dp4 r9.w, r12.xyzw, cb0[37].xyzw
                dp4 r11.x, r12.xyzw, cb0[38].xyzw
                dp4 r11.y, r12.xyzw, cb0[39].xyzw
                dp4 r11.z, r13.xyzw, cb0[36].xyzw
                dp4 r11.w, r13.xyzw, cb0[37].xyzw
                dp4 r12.x, r13.xyzw, cb0[38].xyzw
                dp4 r12.y, r13.xyzw, cb0[39].xyzw
                dp4 r12.z, r14.xyzw, cb0[36].xyzw
                dp4 r12.w, r14.xyzw, cb0[37].xyzw
                dp4 r13.x, r14.xyzw, cb0[38].xyzw
                dp4 r13.y, r14.xyzw, cb0[39].xyzw
                mov x1[8].x, r0.w
                mov x1[9].x, r6.w
                mov x1[10].x, r7.w
                mov x1[11].x, r8.w
                mov x1[8].y, r9.z
                mov x1[9].y, r9.w
                mov x1[10].y, r11.x
                mov x1[11].y, r11.y
                mov x1[8].z, r11.z
                mov x1[9].z, r11.w
                mov x1[10].z, r12.x
                mov x1[11].z, r12.y
                mov x1[8].w, r12.z
                mov x1[9].w, r12.w
                mov x1[10].w, r13.x
                mov x1[11].w, r13.y
                mov r11.x, x1[0].x
                mov r12.x, x1[1].x
                mov r13.x, x1[2].x
                mov r14.x, x1[3].x
                mov r11.y, x1[0].y
                mov r12.y, x1[1].y
                mov r13.y, x1[2].y
                mov r14.y, x1[3].y
                mov r11.z, x1[0].z
                mov r12.z, x1[1].z
                mov r13.z, x1[2].z
                mov r14.z, x1[3].z
                mov r11.w, x1[0].w
                mov r12.w, x1[1].w
                mov r13.w, x1[2].w
                mov r14.w, x1[3].w
                dp4 r11.x, r10.xyzw, r11.xyzw  // r11.x <- output.TexShadow0.x
                dp4 r11.y, r10.xyzw, r12.xyzw  // r11.y <- output.TexShadow0.y
                dp4 r11.z, r10.xyzw, r13.xyzw  // r11.z <- output.TexShadow0.z
                dp4 r11.w, r10.xyzw, r14.xyzw  // r11.w <- output.TexShadow0.w
                mov r12.x, x1[4].x
                mov r13.x, x1[5].x
                mov r14.x, x1[6].x
                mov r15.x, x1[7].x
                mov r12.y, x1[4].y
                mov r13.y, x1[5].y
                mov r14.y, x1[6].y
                mov r15.y, x1[7].y
                mov r12.z, x1[4].z
                mov r13.z, x1[5].z
                mov r14.z, x1[6].z
                mov r15.z, x1[7].z
                mov r12.w, x1[4].w
                mov r13.w, x1[5].w
                mov r14.w, x1[6].w
                mov r15.w, x1[7].w
                dp4 r12.x, r10.xyzw, r12.xyzw  // r12.x <- output.TexShadow1.x
                dp4 r12.y, r10.xyzw, r13.xyzw  // r12.y <- output.TexShadow1.y
                dp4 r12.z, r10.xyzw, r14.xyzw  // r12.z <- output.TexShadow1.z
                dp4 r12.w, r10.xyzw, r15.xyzw  // r12.w <- output.TexShadow1.w
                mov r13.x, x1[8].x
                mov r14.x, x1[9].x
                mov r15.x, x1[10].x
                mov r16.x, x1[11].x
                mov r13.y, x1[8].y
                mov r14.y, x1[9].y
                mov r15.y, x1[10].y
                mov r16.y, x1[11].y
                mov r13.z, x1[8].z
                mov r14.z, x1[9].z
                mov r15.z, x1[10].z
                mov r16.z, x1[11].z
                mov r13.w, x1[8].w
                mov r14.w, x1[9].w
                mov r15.w, x1[10].w
                mov r16.w, x1[11].w
                dp4 r13.x, r10.xyzw, r13.xyzw  // r13.x <- output.TexShadow2.x
                dp4 r13.y, r10.xyzw, r14.xyzw  // r13.y <- output.TexShadow2.y
                dp4 r13.z, r10.xyzw, r15.xyzw  // r13.z <- output.TexShadow2.z
                dp4 r13.w, r10.xyzw, r16.xyzw  // r13.w <- output.TexShadow2.w
                
                #line 212
                mov r14.x, x0[2].x
                mov r15.x, x0[3].x
                mov r14.y, x0[2].y
                mov r15.y, x0[3].y
                mov r14.z, x0[2].z
                mov r15.z, x0[3].z
                mov r14.w, x0[2].w
                mov r15.w, x0[3].w
                dp4 r14.x, r10.xyzw, r14.xyzw  // r14.x <- output.Depth0.x
                dp4 r14.y, r10.xyzw, r15.xyzw  // r14.y <- output.Depth0.y
                mov r15.x, x0[6].x
                mov r16.x, x0[7].x
                mov r15.y, x0[6].y
                mov r16.y, x0[7].y
                mov r15.z, x0[6].z
                mov r16.z, x0[7].z
                mov r15.w, x0[6].w
                mov r16.w, x0[7].w
                dp4 r9.z, r10.xyzw, r15.xyzw  // r9.z <- output.Depth0.z
                dp4 r9.w, r10.xyzw, r16.xyzw  // r9.w <- output.Depth0.w
                mov r15.x, x0[10].x
                mov r16.x, x0[11].x
                mov r15.y, x0[10].y
                mov r16.y, x0[11].y
                mov r15.z, x0[10].z
                mov r16.z, x0[11].z
                mov r15.w, x0[10].w
                mov r16.w, x0[11].w
                dp4 r14.z, r10.xyzw, r15.xyzw  // r14.z <- output.Depth1.x
                dp4 r14.w, r10.xyzw, r16.xyzw  // r14.w <- output.Depth1.y
                dp4 r1.x, v0.xyzw, r1.xyzw
                dp4 r1.y, v0.xyzw, r2.xyzw
                dp4 r1.z, v0.xyzw, r3.xyzw
                dp4 r1.w, v0.xyzw, r4.xyzw
                dp4 r0.w, r1.xyzw, cb4[0].xyzw  // r0.w <- output.clip
                mov o0.xyzw, r5.xyzw
                mov o4.xy, r9.xyxx
                mov o4.zw, r14.zzzw
                mov o5.xyzw, r11.xyzw
                mov o6.xyzw, r12.xyzw
                mov o7.xyzw, r13.xyzw
                mov o9.xy, r14.xyxx
                mov o9.zw, r9.zzzw
                mov o1.xyz, r6.xyzx
                mov o2.xyz, r7.xyzx
                mov o3.xyz, r8.xyzx
                mov o8.xyz, r0.xyzx
                mov o10.x, r0.w
                ret 
                // Approximately 426 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64 [unused]
                //   float4x4 gProjection;              // Offset:  128 Size:    64 [unused]
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbLight
                // {
                //
                //   float4 gLight_Ambient;             // Offset:    0 Size:    16
                //   float4 gLight_Diffuse;             // Offset:   16 Size:    16
                //   float4 gLight_Specular;            // Offset:   32 Size:    16
                //   float3 gLight_Direction;           // Offset:   48 Size:    12
                //   float3 gLight_PosW;                // Offset:   64 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbMaterial
                // {
                //
                //   float4 gMtrl_Ambient;              // Offset:    0 Size:    16
                //   float4 gMtrl_Diffuse;              // Offset:   16 Size:    16
                //   float4 gMtrl_Specular;             // Offset:   32 Size:    16
                //   float4 gMtrl_Emissive;             // Offset:   48 Size:    16 [unused]
                //   float gMtrl_Pow;                   // Offset:   64 Size:     4
                //
                // }
                //
                // cbuffer cbPerFrameInstancing
                // {
                //
                //   float4x4 gWorldInst[100];          // Offset:    0 Size:  6400 [unused]
                //
                // }
                //
                // cbuffer cbClipPlane
                // {
                //
                //   float4 gClipPlane;                 // Offset:    0 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnis                           sampler      NA          NA    1        1
                // samShadow                       sampler_c      NA          NA    2        1
                // txDiffuse                         texture  float4          2d    0        1
                // txBump                            texture  float4          2d    1        1
                // txShadow0                         texture  float4          2d    3        1
                // txShadow1                         texture  float4          2d    4        1
                // txShadow2                         texture  float4          2d    5        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbLight                           cbuffer      NA          NA    1        1
                // cbMaterial                        cbuffer      NA          NA    2        1
                // cbPerFrameInstancing              cbuffer      NA          NA    3        1
                // cbClipPlane                       cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // BINORMAL                 0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 6     zw        4     NONE   float     zw
                // TEXCOORD                 1   xyzw        5     NONE   float   xy  
                // TEXCOORD                 2   xyzw        6     NONE   float   xy  
                // TEXCOORD                 3   xyzw        7     NONE   float   xy  
                // TEXCOORD                 4   xyz         8     NONE   float   xyz 
                // TEXCOORD                 5   xyzw        9     NONE   float   xyzw
                // SV_ClipDistance          0   x          10  CLIPDST   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[5], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_constantbuffer cb4[1], immediateIndexed
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v4.zw
                dcl_input_ps linear v5.xy
                dcl_input_ps linear v6.xy
                dcl_input_ps linear v7.xy
                dcl_input_ps linear v8.xyz
                dcl_input_ps linear v9.xyzw
                dcl_output o0.xyzw
                dcl_temps 4
                dcl_indexableTemp x0[27], 4
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Normal.x; v1.y <- In.Normal.y; v1.z <- In.Normal.z; 
                //   v2.x <- In.Tangent.x; v2.y <- In.Tangent.y; v2.z <- In.Tangent.z; 
                //   v3.x <- In.Binormal.x; v3.y <- In.Binormal.y; v3.z <- In.Binormal.z; 
                //   v4.x <- In.Tex.x; v4.y <- In.Tex.y; 
                //   v5.x <- In.TexShadow0.x; v5.y <- In.TexShadow0.y; v5.z <- In.TexShadow0.z; v5.w <- In.TexShadow0.w; 
                //   v6.x <- In.TexShadow1.x; v6.y <- In.TexShadow1.y; v6.z <- In.TexShadow1.z; v6.w <- In.TexShadow1.w; 
                //   v7.x <- In.TexShadow2.x; v7.y <- In.TexShadow2.y; v7.z <- In.TexShadow2.z; v7.w <- In.TexShadow2.w; 
                //   v8.x <- In.toEye.x; v8.y <- In.toEye.y; v8.z <- In.toEye.z; 
                //   v9.x <- In.Depth0.x; v9.y <- In.Depth0.y; v9.z <- In.Depth0.z; v9.w <- In.Depth0.w; 
                //   v4.z <- In.Depth1.x; v4.w <- In.Depth1.y; 
                //   v10.x <- In.clip; 
                //   o0.x <- <PS_ShadowMap return value>.x; o0.y <- <PS_ShadowMap return value>.y; o0.z <- <PS_ShadowMap return value>.z; o0.w <- <PS_ShadowMap return value>.w; 
                //   x0 <- vTexCoords
                //
                #line 228 "D:\Project\Media\shader11\pos-norm-tex-bump.fx"
                mov r0.y, l(0.000977)  // r0.y <- dx
                div r1.x, v9.x, v9.y
                min r1.x, r1.x, l(1.000000)  // r1.x <- depth0
                div r1.y, v9.z, v9.w
                min r1.y, r1.y, l(1.000000)  // r1.y <- depth1
                div r1.z, v4.z, v4.w
                min r1.z, r1.z, l(1.000000)  // r1.z <- depth2
                
                #line 237
                mov x0[0].xy, v5.xyxx
                mov r2.x, -r0.y
                mov r2.y, l(0)
                add r2.xy, r2.xyxx, v5.xyxx
                mov x0[1].xy, r2.xyxx
                mov r0.z, l(0)
                add r2.xy, r0.yzyy, v5.xyxx
                mov x0[2].xy, r2.xyxx
                mov r2.y, -r0.y
                mov r2.x, l(0)
                add r2.xy, r2.xyxx, v5.xyxx
                mov x0[3].xy, r2.xyxx
                add r2.xy, r0.zyzz, v5.xyxx
                mov x0[6].xy, r2.xyxx
                mov r2.x, -r0.y
                mov r2.y, -r0.y
                add r2.xy, r2.xyxx, v5.xyxx
                mov x0[4].xy, r2.xyxx
                mov r0.w, -r0.y
                add r2.xy, r0.ywyy, v5.xyxx
                mov x0[5].xy, r2.xyxx
                mov r0.x, -r0.y
                add r0.xw, r0.xxxy, v5.xxxy
                mov x0[7].xy, r0.xwxx
                add r0.xw, r0.yyyy, v5.xxxy
                mov x0[8].xy, r0.xwxx
                mov x0[9].xy, v6.xyxx
                
                #line 248
                mov r2.x, -r0.y
                mov r2.y, l(0)
                add r0.xw, r2.xxxy, v6.xxxy
                mov x0[10].xy, r0.xwxx
                add r0.xw, r0.yyyz, v6.xxxy
                mov x0[11].xy, r0.xwxx
                mov r2.y, -r0.y
                mov r2.x, l(0)
                add r0.xw, r2.xxxy, v6.xxxy
                mov x0[12].xy, r0.xwxx
                add r0.xw, r0.zzzy, v6.xxxy
                mov x0[15].xy, r0.xwxx
                mov r2.x, -r0.y
                mov r2.y, -r0.y
                add r0.xw, r2.xxxy, v6.xxxy
                mov x0[13].xy, r0.xwxx
                mov r2.z, -r0.y
                mov r2.y, r0.y
                add r0.xw, r2.yyyz, v6.xxxy
                mov x0[14].xy, r0.xwxx
                mov r2.x, -r0.y
                add r0.xw, r2.xxxy, v6.xxxy
                mov x0[16].xy, r0.xwxx
                add r0.xw, r0.yyyy, v6.xxxy
                mov x0[17].xy, r0.xwxx
                mov x0[18].xy, v7.xyxx
                mov r3.x, -r0.y
                mov r3.y, l(0)
                add r0.xw, r3.xxxy, v7.xxxy
                mov x0[19].xy, r0.xwxx
                
                #line 259
                add r0.xw, r0.yyyz, v7.xxxy
                mov x0[20].xy, r0.xwxx
                mov r3.y, -r0.y
                mov r3.x, l(0)
                add r0.xw, r3.xxxy, v7.xxxy
                mov x0[21].xy, r0.xwxx
                add r0.xz, r0.zzyz, v7.xxyx
                mov x0[24].xy, r0.xzxx
                mov r3.x, -r0.y
                mov r3.y, -r0.y
                add r0.xz, r3.xxyx, v7.xxyx
                mov x0[22].xy, r0.xzxx
                mov r2.w, -r0.y
                add r0.xz, r2.yywy, v7.xxyx
                mov x0[23].xy, r0.xzxx
                mov r2.x, -r0.y
                add r0.xz, r2.xxyx, v7.xxyx
                mov x0[25].xy, r0.xzxx
                add r0.xy, r0.yyyy, v7.xyxx
                mov x0[26].xy, r0.xyxx
                mov r0.x, l(-0.001000)
                add r0.x, r0.x, r1.x  // r0.x <- S0
                mov r0.y, l(-0.001000)
                add r0.y, r0.y, r1.y  // r0.y <- S1
                mov r0.z, l(-0.001000)
                add r0.z, r0.z, r1.z  // r0.z <- S2
                
                #line 271
                mov r0.w, l(0)  // r0.w <- fShadowTerm
                mov r1.x, l(0)  // r1.x <- i
                mov r1.y, r0.w  // r1.y <- fShadowTerm
                mov r1.z, r1.x  // r1.z <- i
                loop 
                  ilt r1.w, r1.z, l(9)
                  breakc_z r1.w
                  mov r2.xy, x0[r1.z + 0].xyxx  // r2.x <- uv0.x; r2.y <- uv0.y
                  mov r2.zw, x0[r1.z + 9].xxxy  // r2.z <- uv1.x; r2.w <- uv1.y
                  mov r3.xy, x0[r1.z + 18].xyxx  // r3.x <- uv2.x; r3.y <- uv2.y
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t3.xxxx, s2, r0.x  // r1.w <- D0
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t4.xxxx, s2, r0.y  // r2.x <- D1
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.y, r3.xyxx, t5.xxxx, s2, r0.z  // r2.y <- D2
                  itof r2.z, l(1)
                  add r1.w, r1.w, r2.x
                  add r1.w, r2.y, r1.w
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mov r1.w, -r1.w
                  add r1.w, r1.w, r2.z
                  add r1.y, r1.w, r1.y
                
                #line 282
                  iadd r1.z, r1.z, l(1)
                endloop 
                div r0.x, r1.y, l(9.000000)  // r0.x <- fShadowTerm
                sample_indexable(texture2d)(float,float,float,float) r0.yz, v4.xyxx, t1.zxyw, s1
                mov r0.yz, r0.yyzy  // r0.y <- bumpMap.x; r0.z <- bumpMap.y
                mul r0.yz, r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000)
                mov r1.xy, l(-1.000000,-1.000000,-0.000000,-0.000000)
                add r0.yz, r0.yyzy, r1.xxyx
                
                #line 290
                mul r1.xyz, r0.yyyy, v2.xyzx
                add r1.xyz, r1.xyzx, v1.xyzx
                mul r0.yzw, r0.zzzz, v3.xxyz
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- bumpNormal.x; r0.z <- bumpNormal.y; r0.w <- bumpNormal.z
                
                #line 293
                dp3 r1.x, r0.yzwy, r0.yzwy
                rsq r1.x, r1.x
                mul r0.yzw, r0.yyzw, r1.xxxx
                mov r1.xyz, -cb1[3].xyzx  // r1.x <- L.x; r1.y <- L.y; r1.z <- L.z
                dp3 r1.w, v8.xyzx, v8.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, v8.xyzx
                add r2.xyz, r1.xyzx, r2.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, r2.xyzx  // r2.x <- H.x; r2.y <- H.y; r2.z <- H.z
                dp3 r1.w, r0.yzwy, r0.yzwy
                rsq r1.w, r1.w
                mul r0.yzw, r0.yyzw, r1.wwww  // r0.y <- N.x; r0.z <- N.y; r0.w <- N.z
                itof r1.w, l(0)
                dp3 r1.x, r0.yzwy, r1.xyzx
                max r1.x, r1.x, r1.w  // r1.x <- lightV
                mul r1.yzw, cb1[0].xxyz, cb2[0].xxyz
                mul r3.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r3.xyz, r3.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
                add r1.yzw, r1.yyzw, r3.xxyz
                mul r3.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r3.xyz, r1.xxxx, r3.xyzx
                mul r3.xyz, r3.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
                add r1.yzw, r1.yyzw, r3.xxyz
                mul r3.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r3.xyz, r1.xxxx, r3.xyzx
                mul r3.xyz, r0.xxxx, r3.xyzx
                mul r3.xyz, r3.xyzx, l(0.900000, 0.900000, 0.900000, 0.000000)
                add r1.xyz, r1.yzwy, r3.xyzx
                mul r3.xyz, cb1[2].xyzx, cb2[2].xyzx
                itof r0.x, l(0)
                dp3 r0.y, r0.yzwy, r2.xyzx
                max r0.x, r0.y, r0.x
                log r0.x, r0.x
                mul r0.x, r0.x, cb2[4].x
                exp r0.x, r0.x
                mul r0.xyz, r0.xxxx, r3.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                
                #line 306
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v4.xyxx, t0.xyzw, s1
                mul r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- Out.x; r0.y <- Out.y; r0.z <- Out.z
                mul r0.w, r1.w, cb2[1].w  // r0.w <- Out.w
                
                #line 309
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 167 instruction slots used
                            
            };
        }

    }

    technique11 BuildShadowMap_Instancing
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbPerFrameInstancing
                // {
                //
                //   float4x4 gWorldInst[100];          // Offset:    0 Size:  6400
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerFrameInstancing              cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float       
                // SV_InstanceID            0   x           3   INSTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb3[400], dynamicIndexed
                dcl_input v0.xyzw
                dcl_input_sgv v3.x, instance_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- instID; 
                //   o1.x <- <VS_BuildShadowMap return value>.Depth.x; o1.y <- <VS_BuildShadowMap return value>.Depth.y; 
                //   o0.x <- <VS_BuildShadowMap return value>.Pos.x; o0.y <- <VS_BuildShadowMap return value>.Pos.y; o0.z <- <VS_BuildShadowMap return value>.Pos.z; o0.w <- <VS_BuildShadowMap return value>.Pos.w
                //
                #line 331 "D:\Project\Media\shader11\pos-norm-tex-bump.fx"
                imul null, r0.x, v3.x, l(4)
                mov r1.xyzw, cb3[r0.x + 0].xyzw  // r1.x <- mWorld._m00; r1.y <- mWorld._m10; r1.z <- mWorld._m20; r1.w <- mWorld._m30
                mov r2.xyzw, cb3[r0.x + 1].xyzw  // r2.x <- mWorld._m01; r2.y <- mWorld._m11; r2.z <- mWorld._m21; r2.w <- mWorld._m31
                mov r3.xyzw, cb3[r0.x + 2].xyzw  // r3.x <- mWorld._m02; r3.y <- mWorld._m12; r3.z <- mWorld._m22; r3.w <- mWorld._m32
                mov r0.xyzw, cb3[r0.x + 3].xyzw  // r0.x <- mWorld._m03; r0.y <- mWorld._m13; r0.z <- mWorld._m23; r0.w <- mWorld._m33
                dp4 r1.x, v0.xyzw, r1.xyzw  // r1.x <- output.Pos.x
                dp4 r1.y, v0.xyzw, r2.xyzw  // r1.y <- output.Pos.y
                dp4 r1.z, v0.xyzw, r3.xyzw  // r1.z <- output.Pos.z
                dp4 r1.w, v0.xyzw, r0.xyzw  // r1.w <- output.Pos.w
                dp4 r0.x, r1.xyzw, cb0[4].xyzw  // r0.x <- output.Pos.x
                dp4 r0.y, r1.xyzw, cb0[5].xyzw  // r0.y <- output.Pos.y
                dp4 r0.z, r1.xyzw, cb0[6].xyzw  // r0.z <- output.Pos.z
                dp4 r0.w, r1.xyzw, cb0[7].xyzw  // r0.w <- output.Pos.w
                dp4 r1.z, r0.xyzw, cb0[8].xyzw  // r1.z <- output.Pos.x
                dp4 r1.w, r0.xyzw, cb0[9].xyzw  // r1.w <- output.Pos.y
                dp4 r1.x, r0.xyzw, cb0[10].xyzw  // r1.x <- output.Pos.z
                dp4 r1.y, r0.xyzw, cb0[11].xyzw  // r1.y <- output.Pos.w
                mov r1.xy, r1.xyxx  // r1.x <- output.Depth.x; r1.y <- output.Depth.y
                mov o0.xyzw, r1.zwxy
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Depth.x; v1.y <- In.Depth.y; 
                //   o0.x <- <PS_BuildShadowMap return value>.x; o0.y <- <PS_BuildShadowMap return value>.y; o0.z <- <PS_BuildShadowMap return value>.z; o0.w <- <PS_BuildShadowMap return value>.w
                //
                #line 349 "D:\Project\Media\shader11\pos-norm-tex-bump.fx"
                div o0.xyzw, v1.xxxx, v1.yyyy
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

}

