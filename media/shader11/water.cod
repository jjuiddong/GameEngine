//
// FX Version: fx_5_0
//
// 5 local buffer(s)
//
cbuffer $Globals
{
    float4  g_vFog = { 1, 7000, 0, 0 }; // Offset:    0, size:   16
    float4  g_fogColor = { 0.376470596, 0.298039228, 0.250980407, 1 };// Offset:   16, size:   16
}

cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gView;                     // Offset:   64, size:   64
    float4x4 gProjection;               // Offset:  128, size:   64
    float4x4 gLightView[3];             // Offset:  192, size:  192
    float4x4 gLightProj[3];             // Offset:  384, size:  192
    float4x4 gLightTT;                  // Offset:  576, size:   64
    float3  gEyePosW;                   // Offset:  640, size:   12
}

cbuffer cbLight : register(b1)
{
    float4  gLight_Ambient;             // Offset:    0, size:   16
    float4  gLight_Diffuse;             // Offset:   16, size:   16
    float4  gLight_Specular;            // Offset:   32, size:   16
    float3  gLight_Direction;           // Offset:   48, size:   12
    float3  gLight_PosW;                // Offset:   64, size:   12
}

cbuffer cbMaterial : register(b2)
{
    float4  gMtrl_Ambient;              // Offset:    0, size:   16
    float4  gMtrl_Diffuse;              // Offset:   16, size:   16
    float4  gMtrl_Specular;             // Offset:   32, size:   16
    float4  gMtrl_Emissive;             // Offset:   48, size:   16
    float   gMtrl_Pow;                  // Offset:   64, size:    4
}

cbuffer cbWater : register(b3)
{
    float4x4 gWorldInv;                 // Offset:    0, size:   64
    float2  gWaveMapOffset0;            // Offset:   64, size:    8
    float2  gWaveMapOffset1;            // Offset:   72, size:    8
    float   gRefractBias;               // Offset:   80, size:    4
    float   gRefractPower;              // Offset:   84, size:    4
    float2  gRippleScale;               // Offset:   88, size:    8
}

//
// 8 local object(s)
//
Texture2D txDiffuse;
Texture2D txWaveMap0;
Texture2D txWaveMap1;
Texture2D txReflectMap;
Texture2D txRefractMap;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState samWrap
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
RasterizerState Depth
{
    DepthBias = uint(10000);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 Unlit
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12
                //
                // }
                //
                // cbuffer cbLight
                // {
                //
                //   float4 gLight_Ambient;             // Offset:    0 Size:    16 [unused]
                //   float4 gLight_Diffuse;             // Offset:   16 Size:    16 [unused]
                //   float4 gLight_Specular;            // Offset:   32 Size:    16 [unused]
                //   float3 gLight_Direction;           // Offset:   48 Size:    12
                //   float3 gLight_PosW;                // Offset:   64 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbWater
                // {
                //
                //   float4x4 gWorldInv;                // Offset:    0 Size:    64
                //   float2 gWaveMapOffset0;            // Offset:   64 Size:     8
                //   float2 gWaveMapOffset1;            // Offset:   72 Size:     8
                //   float gRefractBias;                // Offset:   80 Size:     4 [unused]
                //   float gRefractPower;               // Offset:   84 Size:     4 [unused]
                //   float2 gRippleScale;               // Offset:   88 Size:     8 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbLight                           cbuffer      NA          NA    1        1
                // cbWater                           cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 5      w        1     NONE   float      w
                // TEXCOORD                 1   xyz         2     NONE   float   xyz 
                // TEXCOORD                 2   xy          3     NONE   float   xy  
                // TEXCOORD                 3     zw        3     NONE   float     zw
                // TEXCOORD                 4   xyzw        4     NONE   float   xyzw
                // TEXCOORD                 6   xyz         5     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[41], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb3[5], immediateIndexed
                dcl_input v0.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o1.w
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xyzw
                dcl_output o5.xyz
                dcl_temps 10
                //
                // Initial variable locations:
                //   v0.x <- posL.x; v0.y <- posL.y; v0.z <- posL.z; v0.w <- posL.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- tex0.x; v2.y <- tex0.y; 
                //   o5.x <- <WaterVS return value>.Eye.x; o5.y <- <WaterVS return value>.Eye.y; o5.z <- <WaterVS return value>.Eye.z; 
                //   o4.x <- <WaterVS return value>.projTexC.x; o4.y <- <WaterVS return value>.projTexC.y; o4.z <- <WaterVS return value>.projTexC.z; o4.w <- <WaterVS return value>.projTexC.w; 
                //   o3.x <- <WaterVS return value>.tex0.x; o3.y <- <WaterVS return value>.tex0.y; o3.z <- <WaterVS return value>.tex1.x; o3.w <- <WaterVS return value>.tex1.y; 
                //   o2.x <- <WaterVS return value>.lightDirT.x; o2.y <- <WaterVS return value>.lightDirT.y; o2.z <- <WaterVS return value>.lightDirT.z; 
                //   o1.x <- <WaterVS return value>.toEyeT.x; o1.y <- <WaterVS return value>.toEyeT.y; o1.z <- <WaterVS return value>.toEyeT.z; o1.w <- <WaterVS return value>.eyeVertDist; 
                //   o0.x <- <WaterVS return value>.posH.x; o0.y <- <WaterVS return value>.posH.y; o0.z <- <WaterVS return value>.posH.z; o0.w <- <WaterVS return value>.posH.w
                //
                #line 116 "D:\Project\GameEngine\media\shader11\water.fx"
                mov r0.xyz, l(1.000000,0,0,0)  // r0.x <- TBN._m00; r0.y <- TBN._m01; r0.z <- TBN._m02
                mov r1.xyz, l(0,0,-1.000000,0)  // r1.x <- TBN._m10; r1.y <- TBN._m11; r1.z <- TBN._m12
                mov r2.xyz, l(0,1.000000,0,0)  // r2.x <- TBN._m20; r2.y <- TBN._m21; r2.z <- TBN._m22
                mul r3.xyzw, cb0[0].xyzw, cb0[4].xxxx
                mul r4.xyzw, cb0[1].xyzw, cb0[4].yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[2].xyzw, cb0[4].zzzz
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[3].xyzw, cb0[4].wwww
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[0].xyzw, cb0[5].xxxx
                mul r5.xyzw, cb0[1].xyzw, cb0[5].yyyy
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, cb0[2].xyzw, cb0[5].zzzz
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, cb0[3].xyzw, cb0[5].wwww
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, cb0[0].xyzw, cb0[6].xxxx
                mul r6.xyzw, cb0[1].xyzw, cb0[6].yyyy
                add r5.xyzw, r5.xyzw, r6.xyzw
                mul r6.xyzw, cb0[2].xyzw, cb0[6].zzzz
                add r5.xyzw, r5.xyzw, r6.xyzw
                mul r6.xyzw, cb0[3].xyzw, cb0[6].wwww
                add r5.xyzw, r5.xyzw, r6.xyzw
                mul r6.xyzw, cb0[0].xyzw, cb0[7].xxxx
                mul r7.xyzw, cb0[1].xyzw, cb0[7].yyyy
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r7.xyzw, cb0[2].xyzw, cb0[7].zzzz
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r7.xyzw, cb0[3].xyzw, cb0[7].wwww
                add r6.xyzw, r6.xyzw, r7.xyzw
                mov r7.x, r3.x  // r7.x <- mWVP._m00
                mov r7.y, r4.x  // r7.y <- mWVP._m01
                mov r7.z, r5.x  // r7.z <- mWVP._m02
                mov r7.w, r6.x  // r7.w <- mWVP._m03
                mov r8.x, r3.y  // r8.x <- mWVP._m10
                mov r8.y, r4.y  // r8.y <- mWVP._m11
                mov r8.z, r5.y  // r8.z <- mWVP._m12
                mov r8.w, r6.y  // r8.w <- mWVP._m13
                mov r9.x, r3.z  // r9.x <- mWVP._m20
                mov r9.y, r4.z  // r9.y <- mWVP._m21
                mov r9.z, r5.z  // r9.z <- mWVP._m22
                mov r9.w, r6.z  // r9.w <- mWVP._m23
                mov r6.x, r3.w  // r6.x <- mWVP._m30
                mov r6.y, r4.w  // r6.y <- mWVP._m31
                mov r6.z, r5.w  // r6.z <- mWVP._m32
                mov r6.w, r6.w  // r6.w <- mWVP._m33
                dp4 r3.x, r7.xyzw, cb0[8].xyzw  // r3.x <- mWVP._m00
                dp4 r4.x, r7.xyzw, cb0[9].xyzw  // r4.x <- mWVP._m01
                dp4 r5.x, r7.xyzw, cb0[10].xyzw  // r5.x <- mWVP._m02
                dp4 r7.x, r7.xyzw, cb0[11].xyzw  // r7.x <- mWVP._m03
                dp4 r3.y, r8.xyzw, cb0[8].xyzw  // r3.y <- mWVP._m10
                dp4 r4.y, r8.xyzw, cb0[9].xyzw  // r4.y <- mWVP._m11
                dp4 r5.y, r8.xyzw, cb0[10].xyzw  // r5.y <- mWVP._m12
                dp4 r7.y, r8.xyzw, cb0[11].xyzw  // r7.y <- mWVP._m13
                dp4 r3.z, r9.xyzw, cb0[8].xyzw  // r3.z <- mWVP._m20
                dp4 r4.z, r9.xyzw, cb0[9].xyzw  // r4.z <- mWVP._m21
                dp4 r5.z, r9.xyzw, cb0[10].xyzw  // r5.z <- mWVP._m22
                dp4 r7.z, r9.xyzw, cb0[11].xyzw  // r7.z <- mWVP._m23
                dp4 r3.w, r6.xyzw, cb0[8].xyzw  // r3.w <- mWVP._m30
                dp4 r4.w, r6.xyzw, cb0[9].xyzw  // r4.w <- mWVP._m31
                dp4 r5.w, r6.xyzw, cb0[10].xyzw  // r5.w <- mWVP._m32
                dp4 r7.w, r6.xyzw, cb0[11].xyzw  // r7.w <- mWVP._m33
                
                #line 124
                mov r0.xyz, r0.xyzx  // r0.x <- toTangentSpace._m00; r0.y <- toTangentSpace._m10; r0.z <- toTangentSpace._m20
                mov r1.xyz, r1.xyzx  // r1.x <- toTangentSpace._m01; r1.y <- toTangentSpace._m11; r1.z <- toTangentSpace._m21
                mov r2.xyz, r2.xyzx  // r2.x <- toTangentSpace._m02; r2.y <- toTangentSpace._m12; r2.z <- toTangentSpace._m22
                
                #line 127
                mov r6.xyz, cb0[40].xyzx
                mov r6.w, l(1.000000)
                dp4 r8.x, r6.xyzw, cb3[0].xyzw  // r8.x <- eyePosL.x
                dp4 r8.y, r6.xyzw, cb3[1].xyzw  // r8.y <- eyePosL.y
                dp4 r8.z, r6.xyzw, cb3[2].xyzw  // r8.z <- eyePosL.z
                mov r6.xyz, -v0.xyzx
                add r6.xyz, r6.xyzx, r8.xyzx
                dp3 r0.w, r6.xyzx, r6.xyzx
                sqrt r0.w, r0.w  // r0.w <- outVS.eyeVertDist
                
                #line 131
                mov r6.xyz, -v0.xyzx
                add r6.xyz, r6.xyzx, r8.xyzx  // r6.x <- toEyeL.x; r6.y <- toEyeL.y; r6.z <- toEyeL.z
                dp3 r8.x, r6.xyzx, r0.xyzx  // r8.x <- outVS.toEyeT.x
                dp3 r8.y, r6.xyzx, r1.xyzx  // r8.y <- outVS.toEyeT.y
                dp3 r8.z, r6.xyzx, r2.xyzx  // r8.z <- outVS.toEyeT.z
                
                #line 135
                mov r6.xyz, cb1[3].xyzx
                mov r6.w, l(0)
                dp4 r9.x, r6.xyzw, cb3[0].xyzw  // r9.x <- lightDirL.x
                dp4 r9.y, r6.xyzw, cb3[1].xyzw  // r9.y <- lightDirL.y
                dp4 r9.z, r6.xyzw, cb3[2].xyzw  // r9.z <- lightDirL.z
                dp3 r0.x, r9.xyzx, r0.xyzx  // r0.x <- outVS.lightDirT.x
                dp3 r0.y, r9.xyzx, r1.xyzx  // r0.y <- outVS.lightDirT.y
                dp3 r0.z, r9.xyzx, r2.xyzx  // r0.z <- outVS.lightDirT.z
                
                #line 139
                dp4 r1.x, v0.xyzw, r3.xyzw  // r1.x <- outVS.posH.x
                dp4 r1.y, v0.xyzw, r4.xyzw  // r1.y <- outVS.posH.y
                dp4 r1.z, v0.xyzw, r5.xyzw  // r1.z <- outVS.posH.z
                dp4 r1.w, v0.xyzw, r7.xyzw  // r1.w <- outVS.posH.w
                
                #line 142
                add r2.xy, v2.xyxx, cb3[4].xyxx  // r2.x <- outVS.tex0.x; r2.y <- outVS.tex0.y
                add r2.zw, v2.xxxy, cb3[4].zzzw  // r2.z <- outVS.tex1.x; r2.w <- outVS.tex1.y
                
                #line 146
                mov r1.xyzw, r1.xyzw  // r1.x <- outVS.projTexC.x; r1.y <- outVS.projTexC.y; r1.z <- outVS.projTexC.z; r1.w <- outVS.projTexC.w
                dp4 r3.x, v0.xyzw, cb0[0].xyzw
                dp4 r3.y, v0.xyzw, cb0[1].xyzw
                dp4 r3.z, v0.xyzw, cb0[2].xyzw
                mov r3.xyz, -r3.xyzx
                add r3.xyz, r3.xyzx, cb0[40].xyzx  // r3.x <- outVS.Eye.x; r3.y <- outVS.Eye.y; r3.z <- outVS.Eye.z
                
                #line 151
                mov o0.xyzw, r1.xyzw
                mov o1.xyz, r8.xyzx
                mov o1.w, r0.w
                mov o3.xy, r2.xyxx
                mov o3.zw, r2.zzzw
                mov o4.xyzw, r1.xyzw
                mov o2.xyz, r0.xyzx
                mov o5.xyz, r3.xyzx
                ret 
                // Approximately 109 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer $Globals
                // {
                //
                //   float4 g_vFog;                     // Offset:    0 Size:    16 [unused]
                //      = 0x3f800000 0x45dac000 0x00000000 0x00000000 
                //   float4 g_fogColor;                 // Offset:   16 Size:    16
                //      = 0x3ec0c0c1 0x3e989899 0x3e808081 0x3f800000 
                //
                // }
                //
                // cbuffer cbLight
                // {
                //
                //   float4 gLight_Ambient;             // Offset:    0 Size:    16 [unused]
                //   float4 gLight_Diffuse;             // Offset:   16 Size:    16
                //   float4 gLight_Specular;            // Offset:   32 Size:    16
                //   float3 gLight_Direction;           // Offset:   48 Size:    12 [unused]
                //   float3 gLight_PosW;                // Offset:   64 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbMaterial
                // {
                //
                //   float4 gMtrl_Ambient;              // Offset:    0 Size:    16 [unused]
                //   float4 gMtrl_Diffuse;              // Offset:   16 Size:    16
                //   float4 gMtrl_Specular;             // Offset:   32 Size:    16
                //   float4 gMtrl_Emissive;             // Offset:   48 Size:    16 [unused]
                //   float gMtrl_Pow;                   // Offset:   64 Size:     4
                //
                // }
                //
                // cbuffer cbWater
                // {
                //
                //   float4x4 gWorldInv;                // Offset:    0 Size:    64 [unused]
                //   float2 gWaveMapOffset0;            // Offset:   64 Size:     8 [unused]
                //   float2 gWaveMapOffset1;            // Offset:   72 Size:     8 [unused]
                //   float gRefractBias;                // Offset:   80 Size:     4
                //   float gRefractPower;               // Offset:   84 Size:     4
                //   float2 gRippleScale;               // Offset:   88 Size:     8
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // txWaveMap0                        texture  float4          2d    1        1
                // txWaveMap1                        texture  float4          2d    2        1
                // txReflectMap                      texture  float4          2d    3        1
                // txRefractMap                      texture  float4          2d    4        1
                // cbLight                           cbuffer      NA          NA    1        1
                // cbMaterial                        cbuffer      NA          NA    2        1
                // cbWater                           cbuffer      NA          NA    3        1
                // $Globals                          cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 5      w        1     NONE   float       
                // TEXCOORD                 1   xyz         2     NONE   float   xyz 
                // TEXCOORD                 2   xy          3     NONE   float   xy  
                // TEXCOORD                 3     zw        3     NONE   float     zw
                // TEXCOORD                 4   xyzw        4     NONE   float   xy w
                // TEXCOORD                 6   xyz         5     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb4[2], immediateIndexed
                dcl_constantbuffer cb1[3], immediateIndexed
                dcl_constantbuffer cb2[5], immediateIndexed
                dcl_constantbuffer cb3[6], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.zw
                dcl_input_ps linear v4.xyw
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- In.posH.x; v0.y <- In.posH.y; v0.z <- In.posH.z; v0.w <- In.posH.w; 
                //   v1.x <- In.toEyeT.x; v1.y <- In.toEyeT.y; v1.z <- In.toEyeT.z; 
                //   v2.x <- In.lightDirT.x; v2.y <- In.lightDirT.y; v2.z <- In.lightDirT.z; 
                //   v3.x <- In.tex0.x; v3.y <- In.tex0.y; v3.z <- In.tex1.x; v3.w <- In.tex1.y; 
                //   v4.x <- In.projTexC.x; v4.y <- In.projTexC.y; v4.z <- In.projTexC.z; v4.w <- In.projTexC.w; 
                //   v1.w <- In.eyeVertDist; 
                //   v5.x <- In.Eye.x; v5.y <- In.Eye.y; v5.z <- In.Eye.z; 
                //   o0.x <- <WaterPS return value>.x; o0.y <- <WaterPS return value>.y; o0.z <- <WaterPS return value>.z; o0.w <- <WaterPS return value>.w
                //
                #line 161 "D:\Project\GameEngine\media\shader11\water.fx"
                dp3 r0.x, v1.xyzx, v1.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v1.xyzx  // r0.x <- In.toEyeT.x; r0.y <- In.toEyeT.y; r0.z <- In.toEyeT.z
                dp3 r0.w, v2.xyzx, v2.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v2.xyzx  // r1.x <- In.lightDirT.x; r1.y <- In.lightDirT.y; r1.z <- In.lightDirT.z
                
                #line 165
                mov r1.xyz, -r1.xyzx  // r1.x <- lightVecT.x; r1.y <- lightVecT.y; r1.z <- lightVecT.z
                
                #line 169
                sample_indexable(texture2d)(float,float,float,float) r2.xyz, v3.xyxx, t1.xyzw, s0
                mov r2.xyz, r2.xyzx  // r2.x <- normalT0.x; r2.y <- normalT0.y; r2.z <- normalT0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v3.zwzz, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalT1.x; r3.y <- normalT1.y; r3.z <- normalT1.z
                
                #line 174
                mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r4.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r2.xyz, r2.xyzx, r4.xyzx
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r4.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r4.xyzx
                
                #line 178
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                dp3 r0.w, r2.xyzx, r2.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, r2.xyzx  // r2.x <- normalT.x; r2.y <- normalT.y; r2.z <- normalT.z
                
                #line 181
                mov r3.xyz, -r1.xyzx
                dp3 r0.w, r3.xyzx, r2.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r4.xyz, r0.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- r.x; r3.y <- r.y; r3.z <- r.z
                
                #line 184
                dp3 r0.w, r3.xyzx, r0.xyzx
                max r0.w, r0.w, l(0.000000)
                log r0.w, r0.w
                mul r0.w, r0.w, cb2[4].x
                exp r0.w, r0.w  // r0.w <- t
                
                #line 187
                dp3 r1.x, r1.xyzx, r2.xyzx
                max r1.x, r1.x, l(0.000000)  // r1.x <- s
                
                #line 192
                ge r1.x, l(0.000000), r1.x
                if_nz r1.x
                  mov r0.w, l(0)
                endif 
                
                #line 196
                div r1.xy, v4.xyxx, v4.wwww  // r1.x <- In.projTexC.x; r1.y <- In.projTexC.y
                mul r1.x, r1.x, l(0.500000)
                add r3.x, r1.x, l(0.500000)  // r3.x <- In.projTexC.x
                mul r1.x, r1.y, l(-0.500000)
                add r3.y, r1.x, l(0.500000)  // r3.y <- In.projTexC.y
                
                #line 206
                mov r1.x, -r3.y
                max r1.x, r1.x, r3.y
                log r1.x, r1.x
                mul r1.x, r1.x, l(10.000000)
                exp r1.x, r1.x
                mov r1.x, -r1.x
                add r1.x, r1.x, l(1.000000)  // r1.x <- vPerturbMod
                
                #line 209
                mul r4.xy, r2.xzxx, cb3[5].zwzz  // r4.x <- perturbVec.x; r4.y <- perturbVec.y
                mul r4.z, r1.x, r4.y  // r4.z <- perturbVec.y
                add r1.xy, r3.xyxx, r4.xzxx
                sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t3.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- reflectCol.x; r1.y <- reflectCol.y; r1.z <- reflectCol.z
                add r3.xy, r3.xyxx, r4.xzxx
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, r3.xyxx, t4.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- refractCol.x; r3.y <- refractCol.y; r3.z <- refractCol.z
                
                #line 217
                dp3 r0.x, r0.xyzx, r2.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, cb3[5].y
                exp r0.x, r0.x
                add r0.x, r0.x, cb3[5].x
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // r0.x <- refractWt
                
                #line 222
                mov r2.xyz, -r1.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r0.xyz, r0.xxxx, r2.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, cb2[1].xyzx  // r0.x <- diffuseMtrl.x; r0.y <- diffuseMtrl.y; r0.z <- diffuseMtrl.z
                
                #line 225
                mul r1.xyz, cb1[2].xyzx, cb2[2].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                mul r0.xyz, r0.xyzx, cb1[1].xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 229
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- final.x; r0.y <- final.y; r0.z <- final.z
                
                #line 234
                mov r0.xyz, r0.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                mov r0.w, cb2[1].w  // r0.w <- color.w
                
                #line 237
                itof r1.x, l(0)  // r1.x <- l
                mov r1.yzw, -r0.xxyz
                add r1.yzw, r1.yyzw, cb4[1].xxyz
                mul r1.xyz, r1.yzwy, r1.xxxx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- Out.x; r0.y <- Out.y; r0.z <- Out.z
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 86 instruction slots used
                            
            };
        }

    }

}

